{"version":3,"file":"index.js","sources":["../src/version/index.ts","../src/button/index.ts","../src/lib/escape.ts","../src/lib/util/setErrorCodeLang.ts","../src/lib/http/isFQDN.ts","../src/lib/http/isDomain.ts","../src/lib/rr/isMX.ts","../src/lib/http/IP.ts","../src/lib/rr/isTXT.ts","../src/lib/rr/isNS.ts","../src/lib/isNumber.ts","../src/lib/isInRange.ts","../src/lib/util/stringToArray.ts","../src/lib/rr/isCAA.ts","../src/lib/http/isPort.ts","../src/lib/rr/isSRV.ts","../src/lib/rr/validatorRR.ts"],"sourcesContent":["import { version as _version } from '../../package.json';\r\n\r\nexport const version: string = _version;\r\n","export interface ButtonProps {\r\n  size: string;\r\n}\r\n\r\nconst Button = 'export default Button;';\r\n\r\nexport default Button;\r\n","/**\r\n * 标签语义化\r\n *\r\n * */\r\nconst escape = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&/g, '&amp;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#x27;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\\//g, '&#x2F;')\r\n    .replace(/\\\\/g, '&#x5C;')\r\n    .replace(/`/g, '&#96;'));\r\n}\r\n\r\nexport default escape\r\n","export const enum EnumLanguageType {\r\n  en = 'en-US',\r\n  zh = 'zh-CN',\r\n}\r\nconst setErrorCodeLang = (lang: any = EnumLanguageType.zh) => {\r\n  if (lang === EnumLanguageType.en) {\r\n    return 'en';\r\n  }\r\n  return 'zh';\r\n};\r\n\r\nexport default setErrorCodeLang;\r\n","import setErrorCodeLang from '../util/setErrorCodeLang';\r\n\r\nimport { IsFQDNConfig, isFQDNRes } from './typings.d';\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    DOMAIN_IS_EMPTY: '校验内容为空',\r\n    DOMAIN_FORMAT_ERROR: '域名格式错误',\r\n    DOMAIN_TOO_SHORT: '域名长度不能小于 1 个字符.',\r\n    DOMAIN_TOO_LONG: '域名长度不能超过 255 个字符.',\r\n    LABEL_STARTS_WITH_DASH: '域名标签不能以 . 开头.',\r\n    LABEL_ENDS_WITH_DASH: '域名标签不能以 . 结尾.',\r\n    LABEL_WITH_HYPHEN: '域名标签不能以 - 开头或结尾.',\r\n    LABEL_TOO_LONG: '域名标签的长度最多为 63 个字符.',\r\n    LABEL_TOO_SHORT: '域名标签应至少为 1 个字符长.',\r\n    LABEL_WITH_UNDERSCORES: '域名标签不能包含 _ ',\r\n    LABEL_ENDS_WITH_UNDERSCORES: '域名标签不能以 _ 结尾.',\r\n    LABEL_INVALID_CHARS:\r\n      '域名标签只能包含a-z、A-Z、0-9、-、_、.、*、@、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD不能包含数字.',\r\n    TLD_INVALID_CHARS: 'TLD格式错误.',\r\n  },\r\n  en: {\r\n    DOMAIN_IS_EMPTY: 'Check content is empty',\r\n    DOMAIN_FORMAT_ERROR: 'Domain name format error',\r\n    DOMAIN_TOO_SHORT: 'Domain name too short.',\r\n    DOMAIN_TOO_LONG:\r\n      'Domain name too long. It should be no more than 255 chars.',\r\n    LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\r\n    LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\r\n    LABEL_WITH_HYPHEN: 'Domain labels cannot start or end with -.',\r\n    LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\r\n    LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\r\n    LABEL_WITH_UNDERSCORES: 'Domain labels cannot contain _',\r\n    LABEL_ENDS_WITH_UNDERSCORES: 'Domain labels can not end with _',\r\n    LABEL_INVALID_CHARS:\r\n      'Domain name label can only contain a-z、A-Z、0-9、-、_、.、*、@、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD cannot contain numbers',\r\n    TLD_INVALID_CHARS: 'TLD format error',\r\n  },\r\n};\r\n\r\n/**\r\n * 域名格式校验\r\n * FQDN：(Fully Qualified Domain Name)全限定域名：同时带有主机名和域名的名称。（通过符号“.”）\r\n * 例如：主机名是bigserver,域名是mycompany.com,那么FQDN就是bigserver.mycompany.com。 [1]\r\n * str: m.zdns.cn || zdns.cn. || h.m.zdns.cn.\r\n * */\r\nconst default_fqdn_options = {\r\n  // 是否包含TLD\r\n  require_tld: true,\r\n  // 是否允许包含下划线\r\n  allow_underscores: true,\r\n  // 是否允许 . 号结尾\r\n  allow_trailing_dot: false,\r\n  // 是否允许纯数字TLD\r\n  allow_numeric_tld: false,\r\n  // 是否允许配符 *\r\n  allow_wildcard: false,\r\n};\r\n\r\nexport default function isFQDN(\r\n  str: any,\r\n  options: Partial<IsFQDNConfig> = {},\r\n  lang?: string,\r\n): isFQDNRes {\r\n  let errorMessage = errorCodes[setErrorCodeLang(lang)];\r\n  if (typeof str !== 'string' || str.replace(' ', '') === '') {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_IS_EMPTY,\r\n    };\r\n  }\r\n\r\n  options = {\r\n    ...default_fqdn_options,\r\n    ...options,\r\n  };\r\n  console.log(options);\r\n\r\n  if (!str) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_SHORT,\r\n    };\r\n  }\r\n\r\n  const len = str.length;\r\n  if (len > 255) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_LONG,\r\n    };\r\n  }\r\n\r\n  /* Remove the optional trailing dot before checking validity */\r\n  if (options.allow_trailing_dot && str[len - 1] === '.') {\r\n    str = str.substring(0, len - 1);\r\n  }\r\n\r\n  /* Remove the optional wildcard before checking validity */\r\n  if (options.allow_wildcard && str.indexOf('*.') === 0) {\r\n    str = str.substring(2);\r\n  }\r\n\r\n  const nodes = str.split('.');\r\n  console.log(nodes);\r\n  const node_len = nodes.length;\r\n  const max_node = 127;\r\n  if (options.require_tld) {\r\n    // disallow fqdns without tld\r\n    if (node_len < 2) {\r\n      // 域名格式错误  zdns.cn\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    if (node_len > max_node) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    const tld = nodes[node_len - 1];\r\n    // reject numeric TLDs\r\n    if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_WITH_NUMBER,\r\n      };\r\n    }\r\n\r\n    if (\r\n      !/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(\r\n        tld,\r\n      )\r\n    ) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_INVALID_CHARS,\r\n      };\r\n    }\r\n  } else {\r\n    if (node_len > max_node - 1) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n  }\r\n  for (let i = 0; i < node_len; i++) {\r\n    const label = nodes[i];\r\n    console.log(label);\r\n    if (label.length > 63) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_TOO_LONG,\r\n      };\r\n    }\r\n    // \\u4E00-\\u9FA5 \\u00a1-\\uffff\r\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow full-width chars\r\n    if (/[\\uff01-\\uff5e]/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow node starting or ending with hyphen\r\n    if (/^-|-$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_HYPHEN,\r\n      };\r\n    }\r\n\r\n    if (!options.allow_underscores && /_/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n\r\n    // disallow node ending with _\r\n    if (/_$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_ENDS_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    success: true,\r\n    message: '',\r\n  };\r\n}\r\n","import isFQDN from './isFQDN'\r\n\r\n// is domain·\r\nconst isDomain = (str: string) => {\r\n  return isFQDN(str, {\r\n    require_tld: true,\r\n    // 是否允许包含下划线\r\n    allow_underscores: true,\r\n    // 是否允许 . 号结尾\r\n    allow_trailing_dot: false,\r\n    // 是否允许数字TLD号结尾\r\n    allow_numeric_tld: false,\r\n    // 是否运通配符 *\r\n    allow_wildcard: false\r\n  });\r\n};\r\nexport default isDomain\r\n","/**\r\n * MX【邮件交换记录 - Mail Exchanger】  => 将域名指向邮件服务器地址\r\n *  使用场景：设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为mail exchanger，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给“vincen@example.com”时，系统将对“example.com”进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。\r\n *  主机记录：一般是指子域名的前缀，（要做xxx@dns-example.com的邮箱，所以主机记录输入“ @ ”；要做xxx@mail.dns-example.com，如果主机记录填 mail）。\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析，邮件无法收取；\r\n *  记录值：输入内容通过联系邮箱注册商提供。例如阿里云邮提供的需要配置的解析记录值是 mx1.qiye.aliyun.com；\r\n *  MX优先级：输入内容通过联系邮箱注册商提供，MX 优先级的数值越低，优先级别就越高（如下图，邮件会先尝试发送到 MX 优先级为 5 的mx1.qiye.aliyun.com，如果尝试失败，才会发送到 MX 优先级为10 的mx2.qiye.aliyun.com）。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from '../http/isDomain'\r\n\r\nexport default (str: string) => {\r\n  if(!str) {\r\n    return false\r\n  }\r\n\r\n  return isDomain(str)\r\n\r\n};\r\n","'use strict';\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\r\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp('^(' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\r\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n  ')(%[0-9a-zA-Z-.:]{1,})?$');\r\n\r\nexport const isIPv4 = (s: string) => {\r\n  return IPv4Reg.test(s);\r\n}\r\n\r\nexport const isIPv6 = (s: string) => {\r\n  return IPv6Reg.test(s);\r\n}\r\n\r\nexport const isIP = (s: string) => {\r\n  if(isIPv4(s)) return 4;\r\n  if(isIPv6(s)) return 6;\r\n  return 0;\r\n}\r\n\r\n\r\n","\r\n/**\r\n * TXT  => 文本长度限制512，通常做SPF记录（反垃圾邮件）\r\n *  使用场景：如果希望对域名进行标识和说明，可以使用 TXT 记录， TXT 记录多用来做 SPF 记录（反垃圾邮件）。\r\n *  主机记录：一般是指子域名的前缀（如需为子域名为 www.dns-example.com 添加 TXT 记录， 主机记录输入 www；如需为dns-example.com添加TXT记录，主机记录输入 @）\r\n *  解析线路：默认 为必选项，未设置会导致部分用户无法解析。\r\n *  记录值：常用情况TXT 记录是用来做 SPF 反垃圾邮件的，最典型的 SPF 格式的 TXT 记录例子为“v=spf1 a mx ~all”，表示只有这个域名的 A 记录和 MX 记录中的 IP 地址有权限使用这个域名发送邮件。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\n/**\r\n * TXT记录，一般指某个主机名或域名的标识和说明。如：admin IN TXT \"管理员, 电话：XXXXXXXXXXX\"，mail IN TXT \"邮件主机，存放在xxx , 管理人：AAA\"，Jim IN TXT \"contact: abc@mailserver.com\"，也就是说，通过设置TXT记录内容可以使别人更方便地联系到你。TXT 记录常用的方式还有做 SPF 记录（反垃圾邮件）和SSL证书的DNS验证等。\r\n * */\r\n\r\nexport default (str: string) => {\r\n  return str.length > 255;\r\n}\r\n","/**\r\n * NS【Name Server - 域名服务器记录】  => 将子域名指定其他DNS服务器解析\r\n *  使用场景：如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。\r\n *  主机记录：一般是指子域名的前缀（如需将子域名为www.dns-example.com 的解析授权给腾讯云解析的DNS服务器进行解析管理，只需要在主机记录处填写 www 即可）。\r\n *  解析线路：默认为必填项，未设置默认线路会导致部分用户无法解析。\r\n *  记录值：记录值为要授权的 DNS 服务器域名，例如腾讯云解析的DNS服务器域名f1g1ns1.dnspod.net。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from \"@/lib/http/isDomain\";\r\n\r\n\r\nexport default (str: string) => {\r\n  return isDomain(str)\r\n}\r\n","/**\r\n * 判断参数是否为数字\r\n *\r\n * @param[number]\r\n * @param[allowNegative] 是否允许为负数\r\n */\r\nconst isNumber = (number: any, allowNegative = false) => {\r\n  /**\r\n   * isNaN([]) || isNaN('') || isNaN(true) || isNaN(false) || isNaN(null) => false\r\n   * */\r\n  if(typeof number === 'string') {\r\n    number = number.replace(/\\s+/g, '');\r\n  }\r\n  if(\r\n    isNaN(number) ||\r\n    number === '' ||\r\n    typeof number === 'object' ||\r\n    typeof number === 'boolean'\r\n  ) {\r\n    return false;\r\n  } else {\r\n    number = parseFloat(number);\r\n    if(number < 0) {\r\n      return allowNegative;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\nexport default isNumber;\r\n","import isNumber from \"./isNumber\";\r\n\r\n/**\r\n * 数字取值范围校验\r\n * */\r\nexport default (str: any, min: number, max: number) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  const val = Number(str);\r\n  return val >= min && val <= max;\r\n};\r\n","/**\r\n * 字符串 转 数组\r\n * String to Array\r\n * */\r\nconst stringToArray = (str: any, separator?: string) => {\r\n  if(typeof str === 'string') {\r\n    str = str.trim();\r\n    return str.split(separator || /\\s+/);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport default stringToArray;\r\n","/**\r\n * CAA  =>  CA证书颁发机构授权校验\r\n *  使用场景： CAA(Certificate Authority Authorization)，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。\r\n *  域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。\r\n *  CAA记录的格式为： [flag] [tag] [value]，是由一个标志字节的[flag]和一个被称为属性的[tag]-[value]（标签-值）对组成。您可以将多个CAA字段添加到域名的DNS记录中。\r\n * ------> [flag]：无符号整数（目前仅支持0和128），用于标志认证机构。通常情况下填0，表示如果颁发证书机构无法识别本条信息，就忽略。\r\n * ------> [tag]：支持 issue、issuewild 和 iodef。\r\n * --------> issue：CA授权单个证书颁发机构发布的 任何类型 域名证书。\r\n * --------> issuewild：CA授权单个证书颁发机构发布主机名的 通配符 证书。\r\n * --------> iodef：CA可以将违规的颁发记录URL发送给某个电子邮箱。\r\n * ------> [value]： CA的域名或用于违规通知的电子邮箱。\r\n */\r\nimport isInRange from \"@/lib/isInRange\";\r\nimport stringToArray from \"@/lib/util/stringToArray\";\r\n\r\n// （如：0 iodef \"mailto:admin@dns-example.com\"）\r\n// （如：0 issue \"symantec.com\"）\r\nexport default (str: any) => {\r\n  const caaValueRegex = /^\"[\\w-:./@]{1,255}\"$/;\r\n  const caaTags = ['issue', 'issuewild', 'iodef'];\r\n  const values = stringToArray(str);\r\n  return (\r\n    values.length === 3 &&\r\n    isInRange(values[0], 0, 255) &&\r\n    caaTags.indexOf(values[1]) !== -1 &&\r\n    caaValueRegex.test(values[2])\r\n  );\r\n};\r\n","/**\r\n * 端口号校验\r\n * */\r\nimport isInRange from \"../isInRange\";\r\n\r\nexport default (str: any) => {\r\n  return isInRange(str, 1, 65535);\r\n};\r\n","import isInRange from \"@/lib/isInRange\";\r\nimport isDomain from \"@/lib/http/isDomain\";\r\nimport stringToArray from \"@/lib/util/stringToArray\";\r\nimport isPort from \"@/lib/http/isPort\"\r\n\r\n/**\r\n * SRV【服务定位（SRV）资源记录】  => 记录提供特定的服务的服务器\r\n *  使用场景： SRV 记录用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。\r\n *  主机记录： 格式为 服务的名字.协议的类型。\r\n *    例如：_sip._tcp\r\n *  解析线路： 默认 为必选项，未设置默认线路会导致部分用户无法解析\r\n *  记录值： 格式为 【优先级】 【权重】 【端口】 目标地址 ，每项中间需以空格分隔。\r\n *    例如：0 5 5060 sipserver.example.com\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n\r\n * */\r\nexport default (str: string) => {\r\n  const values = stringToArray(str);\r\n  return (\r\n    values.length === 4 &&\r\n    isInRange(values[0], 0, 65535) &&\r\n    isInRange(values[1], 0, 65535) &&\r\n    isPort(values[2]) &&\r\n    isDomain(values[3])\r\n  );\r\n};\r\n","import isDomain from '../http/isDomain'\nimport isMX from \"./isMX\";\nimport { isIPv4, isIPv6 } from \"@/lib/http/IP\";\nimport isTXT from \"@/lib/rr/isTXT\";\nimport isNS from \"@/lib/rr/isNS\";\nimport isCAA from \"@/lib/rr/isCAA\";\nimport isSRV from \"@/lib/rr/isSRV\";\n\nexport const enum EnumRecordType {\n  A = \"A\",\n  AAAA = \"AAAA\",\n  NS = \"NS\",\n  MX = \"MX\",\n  CNAME = \"CNAME\",\n  CAA = \"CAA\",\n  SRV = \"SRV\",\n  TXT = \"TXT\"\n}\n\n// is rdata\nexport const isRdata = (str: string, type: EnumRecordType) => {\n  switch (type.toUpperCase()) {\n    case EnumRecordType.A:\n      return isIPv4(str);\n    case EnumRecordType.AAAA:\n      return isIPv6(str);\n    case EnumRecordType.CNAME:\n      return isDomain(str);\n    case EnumRecordType.MX:\n      return isMX(str);\n    case EnumRecordType.TXT:\n      return isTXT(str);\n    case EnumRecordType.NS:\n      return isNS(str);\n    case EnumRecordType.CAA:\n      return isCAA(str);\n    case EnumRecordType.SRV:\n      return isSRV(str);\n    default:\n      return false;\n  }\n};\n"],"names":["version","_version","Button","escape","str","replace","EnumLanguageType","setErrorCodeLang","lang","zh","en","errorCodes","DOMAIN_IS_EMPTY","DOMAIN_FORMAT_ERROR","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_WITH_HYPHEN","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_WITH_UNDERSCORES","LABEL_ENDS_WITH_UNDERSCORES","LABEL_INVALID_CHARS","TLD_WITH_NUMBER","TLD_INVALID_CHARS","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","isFQDN","options","errorMessage","success","message","console","log","len","length","substring","indexOf","nodes","split","node_len","max_node","tld","test","i","label","isDomain","v4Seg","v4Str","IPv4Reg","RegExp","v6Seg","IPv6Reg","isIPv4","s","isIPv6","isNumber","number","allowNegative","isNaN","parseFloat","min","max","val","Number","stringToArray","separator","trim","caaValueRegex","caaTags","values","isInRange","isPort","EnumRecordType","isRdata","type","toUpperCase","A","AAAA","CNAME","MX","isMX","TXT","isTXT","NS","isNS","CAA","isCAA","SRV","isSRV"],"mappings":"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"}