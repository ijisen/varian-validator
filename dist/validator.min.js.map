{"version":3,"file":"validator.min.js","sources":["../src/version/index.ts","../src/validator/util/utilTypeOf.ts","../src/validator/util/isValidDataTypes.ts","../src/validator/util/setErrorCodeLang.ts","../src/validator/util/utilStringToArray.ts","../src/validator/util/utilToString.ts","../src/validator/http/IP.ts","../src/validator/http/isFQDN.ts","../src/validator/http/isDomain.ts","../src/validator/isNumber.ts","../src/validator/isInRange.ts","../src/validator/http/isPort.ts","../src/validator/rr/validatorRR.ts","../src/validator/isCellPhone.ts","../src/validator/isCreditCard.ts","../src/validator/isInt.ts","../src/validator/isIdentityCard.ts","../src/validator/isStrongPassword.ts","../src/validator/escape.ts","../src/validator/isBooleanTrue.ts","../src/validator/isByteLength.ts","../src/validator/isEmail.ts","../src/validator/isEmpty.ts","../src/validator/isEthereumAddress.ts","../src/validator/rr/isHost.ts","../src/validator/isIMEI.ts","../src/validator/isIn.ts","../src/validator/isPostalCode.ts","../src/validator/rr/isA.ts","../src/validator/rr/isAAAA.ts","../src/validator/rr/isCAA.ts","../src/validator/rr/isCNAME.ts","../src/validator/rr/isMX.ts","../src/validator/rr/isNS.ts","../src/validator/rr/isSRV.ts","../src/validator/rr/isTXT.ts","../src/validator/rr/isTTL.ts","../src/validator/isURL.ts","../src/validator/isUUID.ts","../src/validator/rr/isZone.ts","../src/validator/unescape.ts"],"sourcesContent":["import { version as _version } from '../../package.json';\r\n\r\nexport const version: string = _version;\r\n\r\n","/**\r\n * Better way to handle type checking\r\n * null, {}, array and date are objects, which confuses\r\n */\r\n\r\nexport type EnumUtilTypeOf = 'undefined' | 'object' | 'array' | 'boolean' | 'number' | 'string' | 'function' | 'symbol' | 'bigint';\r\n\r\nconst utilTypeOf = (input: any): EnumUtilTypeOf => {\r\n  const rawObject = Object.prototype.toString.call(input).toLowerCase();\r\n  const typeOfRegex = /\\[object (.*)]/g;\r\n  // @ts-ignore\r\n  return typeOfRegex.exec(rawObject)[1];\r\n}\r\n\r\nexport default utilTypeOf\r\n\r\n\r\n\r\n\r\n","/**\r\n * 判断函数参数是否为有效数据类型\r\n * @param[str] any 参数\r\n * @param[types] [any] 支持参数类型, 默认支持 ['string', 'number']\r\n * */\r\nimport utilTypeOf, { EnumUtilTypeOf } from \"./utilTypeOf\";\r\n\r\nexport type ValidParamsDefaultTypes = Array<EnumUtilTypeOf>;\r\n\r\nconst isValidParamsTypes = (str: any, types?: ValidParamsDefaultTypes) => {\r\n  let defaultTypes: ValidParamsDefaultTypes = ['string', 'number'];\r\n  if(utilTypeOf(types) !== 'array') {\r\n    types = defaultTypes;\r\n  }\r\n  return (types && types.includes(utilTypeOf(str)));\r\n}\r\n\r\nexport default isValidParamsTypes;\r\n","/**\r\n * 语言类型\r\n * */\r\nexport const enum EnumLanguageType {\r\n  en = 'en-US',\r\n  zh = 'zh-CN',\r\n}\r\n\r\n/**\r\n * 设置错误消息语言类型\r\n * */\r\nconst setErrorCodeLang = (lang: any = EnumLanguageType.zh) => {\r\n  if (lang === EnumLanguageType.en) {\r\n    return 'en';\r\n  }\r\n  return 'zh';\r\n};\r\n\r\nexport default setErrorCodeLang;\r\n","/**\r\n * 字符串 转 数组\r\n * String to Array\r\n * */\r\nconst utilStringToArray = (str: any, separator?: string) => {\r\n  if(typeof str === 'string') {\r\n    str = str.trim();\r\n    return str.split(separator || /\\s+/);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport default utilStringToArray;\r\n","/**\r\n * 字符串格式判断\r\n * */\r\nconst utilToString = (input: any) => {\r\n  if(typeof input === 'object' && input !== null) {\r\n    if(typeof input.toString === 'function') {\r\n      input = input.toString();\r\n    } else {\r\n      input = '[object Object]';\r\n    }\r\n  } else if(input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {\r\n    input = '';\r\n  }\r\n  return String(input);\r\n}\r\n\r\nexport default utilToString\r\n","'use strict';\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\r\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp('^(' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\r\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n  ')(%[0-9a-zA-Z-.:]{1,})?$');\r\n\r\n/**\r\n * IPV4验证\r\n * */\r\nexport const isIPv4 = (s: string): boolean => {\r\n  return IPv4Reg.test(s);\r\n}\r\n\r\n/**\r\n * IPV6验证\r\n * */\r\nexport const isIPv6 = (s: string): boolean => {\r\n  return IPv6Reg.test(s);\r\n}\r\n/**\r\n * IPV4 & IPV6验证\r\n * */\r\nexport const isIP = (s: string): number => {\r\n  if(isIPv4(s)) return 4;\r\n  if(isIPv6(s)) return 6;\r\n  return 0;\r\n}\r\n\r\n\r\n","import setErrorCodeLang from '../util/setErrorCodeLang';\r\n\r\nimport { IsFQDNConfig, isFQDNRes } from './typings.d';\r\n\r\n/**\r\n * 域名格式校验 - 错误提示消息.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    DOMAIN_IS_EMPTY: '校验内容为空',\r\n    DOMAIN_FORMAT_ERROR: '域名格式错误',\r\n    DOMAIN_TOO_SHORT: '域名长度不能小于 1 个字符.',\r\n    DOMAIN_TOO_LONG: '域名长度不能超过 255 个字符.',\r\n    LABEL_STARTS_WITH_DASH: '域名标签不能以 . 开头.',\r\n    LABEL_ENDS_WITH_DASH: '域名标签不能以 . 结尾.',\r\n    LABEL_WITH_HYPHEN: '域名标签不能以 - 开头或结尾.',\r\n    LABEL_TOO_LONG: '域名标签的长度最多为 63 个字符.',\r\n    LABEL_TOO_SHORT: '域名标签应至少为 1 个字符长.',\r\n    LABEL_WITH_UNDERSCORES: '域名标签不能包含 _ ',\r\n    LABEL_ENDS_WITH_UNDERSCORES: '域名标签不能以 _ 结尾.',\r\n    LABEL_INVALID_CHARS:\r\n      '域名标签只能包含a-z、A-Z、0-9、-、_、.、*、@、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD不能包含数字.',\r\n    TLD_INVALID_CHARS: 'TLD格式错误.',\r\n  },\r\n  en: {\r\n    DOMAIN_IS_EMPTY: 'Check content is empty',\r\n    DOMAIN_FORMAT_ERROR: 'Domain name format error',\r\n    DOMAIN_TOO_SHORT: 'Domain name too short.',\r\n    DOMAIN_TOO_LONG:\r\n      'Domain name too long. It should be no more than 255 chars.',\r\n    LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\r\n    LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\r\n    LABEL_WITH_HYPHEN: 'Domain labels cannot start or end with -.',\r\n    LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\r\n    LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\r\n    LABEL_WITH_UNDERSCORES: 'Domain labels cannot contain _',\r\n    LABEL_ENDS_WITH_UNDERSCORES: 'Domain labels can not end with _',\r\n    LABEL_INVALID_CHARS:\r\n      'Domain name label can only contain a-z、A-Z、0-9、-、_、.、*、@、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD cannot contain numbers',\r\n    TLD_INVALID_CHARS: 'TLD format error',\r\n  },\r\n};\r\n\r\n/**\r\n * 域名格式校验 - 默认配置参数\r\n *\r\n * */\r\nconst default_fqdn_options = {\r\n  // 是否包含TLD\r\n  require_tld: true,\r\n  // 是否允许包含下划线\r\n  allow_underscores: true,\r\n  // 是否允许 . 号结尾\r\n  allow_trailing_dot: false,\r\n  // 是否允许纯数字TLD\r\n  allow_numeric_tld: false,\r\n  // 是否允许配符 *\r\n  allow_wildcard: false,\r\n};\r\n\r\n/**\r\n * 域名格式校验\r\n * FQDN：(Fully Qualified Domain Name)全限定域名：同时带有主机名和域名的名称。（通过符号“.”）\r\n * 例如：主机名是bigserver,域名是mycompany.com,那么FQDN就是bigserver.mycompany.com。 [1]\r\n * str: m.zdns.cn || zdns.cn. || h.m.zdns.cn.\r\n * */\r\nexport default function isFQDN(\r\n  str: any,\r\n  options: Partial<IsFQDNConfig> = {},\r\n  lang?: string,\r\n): isFQDNRes {\r\n  let errorMessage = errorCodes[setErrorCodeLang(lang)];\r\n  if (typeof str !== 'string' || str.replace(' ', '') === '') {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_IS_EMPTY,\r\n    };\r\n  }\r\n\r\n  options = {\r\n    ...default_fqdn_options,\r\n    ...options,\r\n  };\r\n  console.log(options);\r\n\r\n  if (!str) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_SHORT,\r\n    };\r\n  }\r\n\r\n  const len = str.length;\r\n  if (len > 255) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_LONG,\r\n    };\r\n  }\r\n\r\n  /* Remove the optional trailing dot before checking validity */\r\n  if (options.allow_trailing_dot && str[len - 1] === '.') {\r\n    str = str.substring(0, len - 1);\r\n  }\r\n\r\n  /* Remove the optional wildcard before checking validity */\r\n  if (options.allow_wildcard && str.indexOf('*.') === 0) {\r\n    str = str.substring(2);\r\n  }\r\n\r\n  const nodes = str.split('.');\r\n  console.log(nodes);\r\n  const node_len = nodes.length;\r\n  const max_node = 127;\r\n  if (options.require_tld) {\r\n    // disallow fqdns without tld\r\n    if (node_len < 2) {\r\n      // 域名格式错误  zdns.cn\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    if (node_len > max_node) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    const tld = nodes[node_len - 1];\r\n    // reject numeric TLDs\r\n    if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_WITH_NUMBER,\r\n      };\r\n    }\r\n\r\n    if (\r\n      !/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(\r\n        tld,\r\n      )\r\n    ) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_INVALID_CHARS,\r\n      };\r\n    }\r\n  } else {\r\n    if (node_len > max_node - 1) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n  }\r\n  for (let i = 0; i < node_len; i++) {\r\n    const label = nodes[i];\r\n    console.log(label);\r\n    if (label.length > 63) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_TOO_LONG,\r\n      };\r\n    }\r\n    // \\u4E00-\\u9FA5 \\u00a1-\\uffff\r\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow full-width chars\r\n    if (/[\\uff01-\\uff5e]/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow node starting or ending with hyphen\r\n    if (/^-|-$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_HYPHEN,\r\n      };\r\n    }\r\n\r\n    if (!options.allow_underscores && /_/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n\r\n    // disallow node ending with _\r\n    if (/_$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_ENDS_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    success: true,\r\n    message: '',\r\n  };\r\n}\r\n","import isFQDN from './isFQDN'\r\n\r\n/**\r\n * 域名合法性校验\r\n * */\r\nconst isDomain = (str: string) => {\r\n  return isFQDN(str, {\r\n    require_tld: true,\r\n    // 是否允许包含下划线\r\n    allow_underscores: true,\r\n    // 是否允许 . 号结尾\r\n    allow_trailing_dot: false,\r\n    // 是否允许数字TLD号结尾\r\n    allow_numeric_tld: false,\r\n    // 是否运通配符 *\r\n    allow_wildcard: false\r\n  });\r\n};\r\nexport default isDomain\r\n","/**\r\n * 判断参数是否为数字\r\n *\r\n * @param[number]\r\n * @param[allowNegative] 是否允许为负数\r\n */\r\nconst isNumber = (number: any, allowNegative = false) => {\r\n  /**\r\n   * isNaN([]) || isNaN('') || isNaN(true) || isNaN(false) || isNaN(null) => false\r\n   * */\r\n  if(typeof number === 'string') {\r\n    number = number.replace(/\\s+/g, '');\r\n  }\r\n  if(\r\n    isNaN(number) ||\r\n    number === '' ||\r\n    typeof number === 'object' ||\r\n    typeof number === 'boolean'\r\n  ) {\r\n    return false;\r\n  } else {\r\n    number = parseFloat(number);\r\n    if(number < 0) {\r\n      return allowNegative;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\nexport default isNumber;\r\n","import isNumber from \"./isNumber\";\r\n\r\n/**\r\n * 数字取值范围校验\r\n * @param[str] 数值\r\n * @param[min] 最小值\r\n * @param[max] 最大值\r\n * */\r\nconst isInRange = (str: any, min: number, max: number) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  const val = Number(str);\r\n  return val >= min && val <= max;\r\n};\r\n\r\nexport default isInRange\r\n","import isInRange from \"../isInRange\";\r\n\r\n/**\r\n * 端口号校验\r\n * */\r\nconst isPort = (str: any) => {\r\n  return isInRange(str, 1, 65535);\r\n};\r\n\r\nexport default isPort;\r\n","/**\r\n * 域名解析记录公共校验\r\n *\r\n * */\r\n\r\nimport isMX from \"./isMX\";\r\nimport isTXT from \"./isTXT\";\r\nimport isNS from \"./isNS\";\r\nimport isCAA from \"./isCAA\";\r\nimport isSRV from \"./isSRV\";\r\nimport isA from \"@/validator/rr/isA\";\r\nimport isAAAA from \"@/validator/rr/isAAAA\";\r\nimport isCNAME from \"@/validator/rr/isCNAME\";\r\n\r\nexport const enum EnumRecordType {\r\n  A = \"A\",\r\n  AAAA = \"AAAA\",\r\n  NS = \"NS\",\r\n  MX = \"MX\",\r\n  CNAME = \"CNAME\",\r\n  CAA = \"CAA\",\r\n  SRV = \"SRV\",\r\n  TXT = \"TXT\"\r\n}\r\n\r\n/**\r\n * 域名解析记录公共校验\r\n * @param[str] 校验值\r\n * @param[type] 校验类型\r\n * */\r\nexport const isRdata = (str: string, type: EnumRecordType) => {\r\n  switch (type.toUpperCase()) {\r\n    case EnumRecordType.A:\r\n      return isA(str);\r\n    case EnumRecordType.AAAA:\r\n      return isAAAA(str);\r\n    case EnumRecordType.CAA:\r\n      return isCAA(str);\r\n    case EnumRecordType.CNAME:\r\n      return isCNAME(str);\r\n    case EnumRecordType.MX:\r\n      return isMX(str);\r\n    case EnumRecordType.NS:\r\n      return isNS(str);\r\n    case EnumRecordType.SRV:\r\n      return isSRV(str);\r\n    case EnumRecordType.TXT:\r\n      return isTXT(str);\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n","/**\r\n *\r\n * 手机格式校验\r\n * @param[str]: 手机号\r\n * */\r\nconst isCellPhone = function (str: any) {\r\n  try {\r\n    const reg = /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/;\r\n    return reg.test(str);\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default isCellPhone\r\n","/* eslint-disable max-len */\r\nconst creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;\r\n/* eslint-enable max-len */\r\n\r\n/**\r\n * 信用卡格式验证\r\n * @param[str] 校验字符串\r\n * */\r\nexport default function isCreditCard(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += str;\r\n  const sanitized = str.replace(/[- ]+/g, '');\r\n  if(!creditCard.test(sanitized)) {\r\n    return false;\r\n  }\r\n  let sum = 0;\r\n  let digit;\r\n  let tmpNum;\r\n  let shouldDouble;\r\n  for (let i = sanitized.length - 1; i >= 0; i--) {\r\n    digit = sanitized.substring(i, (i + 1));\r\n    tmpNum = parseInt(digit, 10);\r\n    if(shouldDouble) {\r\n      tmpNum *= 2;\r\n      if(tmpNum >= 10) {\r\n        sum += ((tmpNum % 10) + 1);\r\n      } else {\r\n        sum += tmpNum;\r\n      }\r\n    } else {\r\n      sum += tmpNum;\r\n    }\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n  return !!((sum % 10) === 0 ? sanitized : false);\r\n}\r\n","import isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n/**\r\n * 是否为整数判断\r\n * @param[str] 数值\r\n * @param[options] 参数\r\n *\r\n * */\r\nexport default function isInt(str: any, options?: {\r\n  allow_leading_zeroes?: Boolean,\r\n  min?: number;\r\n  max?: number;\r\n  lt?: number;\r\n  gt?: number;\r\n}) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  const int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\r\n  const intLeadingZeroes = /^[-+]?[0-9]+$/;\r\n\r\n  options = options || {};\r\n\r\n  // Get the regex to use for testing, based on whether\r\n  // leading zeroes are allowed or not.\r\n  let regex = (\r\n    options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ?\r\n      int : intLeadingZeroes\r\n  );\r\n\r\n  // Check min/max/lt/gt\r\n  let minCheckPassed = (!options.hasOwnProperty('min') || (typeof options.min !== 'undefined' && str >= options.min));\r\n  let maxCheckPassed = (!options.hasOwnProperty('max') || (typeof options.max !== 'undefined' && str <= options.max));\r\n  let ltCheckPassed = (!options.hasOwnProperty('lt') || (typeof options.lt !== 'undefined' && str < options.lt));\r\n  let gtCheckPassed = (!options.hasOwnProperty('gt') || (typeof options.gt !== 'undefined' && str > options.gt));\r\n\r\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\r\n}\r\n","import isInt from './isInt';\r\nimport isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n/**\r\n * 证件号码验证函数\r\n *\r\n * */\r\n\r\nconst identityCardValidators = {\r\n  PL: (str: string) => {\r\n    const weightOfDigits = {\r\n      1: 1,\r\n      2: 3,\r\n      3: 7,\r\n      4: 9,\r\n      5: 1,\r\n      6: 3,\r\n      7: 7,\r\n      8: 9,\r\n      9: 1,\r\n      10: 3,\r\n      11: 0,\r\n    };\r\n\r\n    if(str != null && str.length === 11 && isInt(str, { allow_leading_zeroes: true })) {\r\n      const digits = str.split('').slice(0, -1);\r\n      const sum = digits.reduce((acc, digit, index) =>\r\n        acc + (Number(digit) * weightOfDigits[index + 1]), 0);\r\n\r\n      const modulo = sum % 10;\r\n      const lastDigit = Number(str.charAt(str.length - 1));\r\n\r\n      if((modulo === 0 && lastDigit === 0) || lastDigit === 10 - modulo) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  ES: (str: string) => {\r\n    const DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;\r\n\r\n    const charsValue = {\r\n      X: 0,\r\n      Y: 1,\r\n      Z: 2,\r\n    };\r\n\r\n    const controlDigits = [\r\n      'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',\r\n      'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    // validate the control digit\r\n    const number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, char => charsValue[char]);\r\n\r\n    // @ts-ignore\r\n    return sanitized.endsWith(controlDigits[number % 23]);\r\n  },\r\n  FI: (str: string) => {\r\n    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated\r\n    if(str.length !== 11) {\r\n      return false;\r\n    }\r\n\r\n    if(!str.match(/^\\d{6}[\\-A\\+]\\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {\r\n      return false;\r\n    }\r\n\r\n    const checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';\r\n\r\n    const idAsNumber = (parseInt(str.slice(0, 6), 10) * 1000) + parseInt(str.slice(7, 10), 10);\r\n    const remainder = idAsNumber % 31;\r\n    const checkDigit = checkDigits[remainder];\r\n\r\n    return checkDigit === str.slice(10, 11);\r\n  },\r\n  IN: (str: string) => {\r\n    const DNI = /^[1-9]\\d{3}\\s?\\d{4}\\s?\\d{4}$/;\r\n\r\n    // multiplication table\r\n    const d = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],\r\n      [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],\r\n      [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],\r\n      [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],\r\n      [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],\r\n      [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],\r\n      [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],\r\n      [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],\r\n      [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\r\n    ];\r\n\r\n    // permutation table\r\n    const p = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],\r\n      [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],\r\n      [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],\r\n      [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],\r\n      [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],\r\n      [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],\r\n      [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    let c = 0;\r\n    let invertedArray = sanitized.replace(/\\s/g, '').split('').map(Number).reverse();\r\n\r\n    invertedArray.forEach((val, i) => {\r\n      c = d[c][p[(i % 8)][val]];\r\n    });\r\n\r\n    return c === 0;\r\n  },\r\n  IR: (str: string) => {\r\n    if(!str.match(/^\\d{10}$/)) return false;\r\n    str = (`0000${str}`).substr(str.length - 6);\r\n\r\n    if(parseInt(str.substr(3, 6), 10) === 0) return false;\r\n\r\n    const lastNumber = parseInt(str.substr(9, 1), 10);\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      sum += parseInt(str.substr(i, 1), 10) * (10 - i);\r\n    }\r\n\r\n    sum %= 11;\r\n\r\n    return (\r\n      (sum < 2 && lastNumber === sum) || (sum >= 2 && lastNumber === 11 - sum)\r\n    );\r\n  },\r\n  IT: function IT(str: string) {\r\n    if(str.length !== 9) return false;\r\n    if(str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana\r\n    return str.search(/C[A-Z]\\d{5}[A-Z]{2}/is) > -1;\r\n  },\r\n  NO: (str: string) => {\r\n    const sanitized = str.trim();\r\n    if(isNaN(Number(sanitized))) return false;\r\n    if(sanitized.length !== 11) return false;\r\n    if(sanitized === '00000000000') return false;\r\n\r\n    // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer\r\n    const f = sanitized.split('').map(Number);\r\n    let k1 = (11 - (((3 * f[0]) + (7 * f[1]) + (6 * f[2])\r\n      + (1 * f[3]) + (8 * f[4]) + (9 * f[5]) + (4 * f[6])\r\n      + (5 * f[7]) + (2 * f[8])) % 11)) % 11;\r\n    let k2 = (11 - (((5 * f[0]) + (4 * f[1]) + (3 * f[2])\r\n      + (2 * f[3]) + (7 * f[4]) + (6 * f[5]) + (5 * f[6])\r\n      + (4 * f[7]) + (3 * f[8]) + (2 * k1)) % 11)) % 11;\r\n\r\n    if(k1 !== f[9] || k2 !== f[10]) return false;\r\n    return true;\r\n  },\r\n  TH: (str: string) => {\r\n    if(!str.match(/^[1-8]\\d{12}$/)) return false;\r\n\r\n    // validate check digit\r\n    let sum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n      sum += parseInt(str[i], 10) * (13 - i);\r\n    }\r\n    return str[12] === ((11 - (sum % 11)) % 10).toString();\r\n  },\r\n  LK: (str: string) => {\r\n    const old_nic = /^[1-9]\\d{8}[vx]$/i;\r\n    const new_nic = /^[1-9]\\d{11}$/i;\r\n\r\n    if(str.length === 10 && old_nic.test(str)) return true;\r\n    else if(str.length === 12 && new_nic.test(str)) return true;\r\n    return false;\r\n  },\r\n  'he-IL': (str: string) => {\r\n    const DNI = /^\\d{9}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    const id = sanitized;\r\n\r\n    let sum = 0,\r\n      incNum;\r\n    for (let i = 0; i < id.length; i++) {\r\n      incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2\r\n      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total\r\n    }\r\n    return sum % 10 === 0;\r\n  },\r\n  'ar-LY': (str: string) => {\r\n    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2\r\n    const NIN = /^(1|2)\\d{11}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!NIN.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'ar-TN': (str: string) => {\r\n    const DNI = /^\\d{8}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'zh-CN': (str: string) => {\r\n    const provincesAndCities = [\r\n      '11', // 北京\r\n      '12', // 天津\r\n      '13', // 河北\r\n      '14', // 山西\r\n      '15', // 内蒙古\r\n      '21', // 辽宁\r\n      '22', // 吉林\r\n      '23', // 黑龙江\r\n      '31', // 上海\r\n      '32', // 江苏\r\n      '33', // 浙江\r\n      '34', // 安徽\r\n      '35', // 福建\r\n      '36', // 江西\r\n      '37', // 山东\r\n      '41', // 河南\r\n      '42', // 湖北\r\n      '43', // 湖南\r\n      '44', // 广东\r\n      '45', // 广西\r\n      '46', // 海南\r\n      '50', // 重庆\r\n      '51', // 四川\r\n      '52', // 贵州\r\n      '53', // 云南\r\n      '54', // 西藏\r\n      '61', // 陕西\r\n      '62', // 甘肃\r\n      '63', // 青海\r\n      '64', // 宁夏\r\n      '65', // 新疆\r\n      '71', // 台湾\r\n      '81', // 香港\r\n      '82', // 澳门\r\n      '91', // 国外\r\n    ];\r\n\r\n    const powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];\r\n\r\n    const parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\r\n\r\n    const checkAddressCode = (addressCode: string) => provincesAndCities.includes(addressCode);\r\n\r\n    const checkBirthDayCode = (birDayCode: string) => {\r\n      const yyyy = parseInt(birDayCode.substring(0, 4), 10);\r\n      const mm = parseInt(birDayCode.substring(4, 6), 10);\r\n      const dd = parseInt(birDayCode.substring(6), 10);\r\n      const xdata = new Date(yyyy, mm - 1, dd);\r\n      if(xdata > new Date()) {\r\n        return false;\r\n        // eslint-disable-next-line max-len\r\n      } else if((xdata.getFullYear() === yyyy) && (xdata.getMonth() === mm - 1) && (xdata.getDate() === dd)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    const getParityBit = (idCardNo: string) => {\r\n      let id17 = idCardNo.substring(0, 17);\r\n\r\n      let power = 0;\r\n      for (let i = 0; i < 17; i++) {\r\n        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);\r\n      }\r\n\r\n      let mod = power % 11;\r\n      return parityBit[mod];\r\n    };\r\n\r\n    const checkParityBit = (idCardNo: string) => getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();\r\n\r\n\r\n    const check15IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = `19${idCardNo.substring(6, 12)}`;\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return true;\r\n    };\r\n\r\n    const check18IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{5}[1-9]\\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}(\\d|x|X)$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = idCardNo.substring(6, 14);\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return checkParityBit(idCardNo);\r\n    };\r\n\r\n    const checkIdCardNo = (idCardNo: string) => {\r\n      let check = /^\\d{15}|(\\d{17}(\\d|x|X))$/.test(idCardNo);\r\n      if(!check) return false;\r\n      if(idCardNo.length === 15) {\r\n        return check15IdCardNo(idCardNo);\r\n      }\r\n      return check18IdCardNo(idCardNo);\r\n    };\r\n    return checkIdCardNo(str);\r\n  },\r\n  'zh-TW': (str: string) => {\r\n    const ALPHABET_CODES = {\r\n      A: 10,\r\n      B: 11,\r\n      C: 12,\r\n      D: 13,\r\n      E: 14,\r\n      F: 15,\r\n      G: 16,\r\n      H: 17,\r\n      I: 34,\r\n      J: 18,\r\n      K: 19,\r\n      L: 20,\r\n      M: 21,\r\n      N: 22,\r\n      O: 35,\r\n      P: 23,\r\n      Q: 24,\r\n      R: 25,\r\n      S: 26,\r\n      T: 27,\r\n      U: 28,\r\n      V: 29,\r\n      W: 32,\r\n      X: 30,\r\n      Y: 31,\r\n      Z: 33,\r\n    };\r\n\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    if(!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;\r\n\r\n    // @ts-ignore\r\n    return Array.from(sanitized).reduce((sum, number, index) => {\r\n      if(index === 0) {\r\n        const code = ALPHABET_CODES[number];\r\n\r\n        return ((code % 10) * 9) + Math.floor(code / 10);\r\n      }\r\n\r\n      if(index === 9) {\r\n        return ((10 - (sum % 10)) - Number(number)) % 10 === 0;\r\n      }\r\n\r\n      return sum + (Number(number) * (9 - index));\r\n    }, 0);\r\n  },\r\n};\r\n\r\n/**\r\n * isIdentityCard\r\n * @param[str] any 证件号码\r\n * @param[locale] string 证件类型\r\n * */\r\nexport default function isIdentityCard(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false;\r\n  }\r\n  str = `${str}`;\r\n  if(locale in identityCardValidators) {\r\n    return identityCardValidators[locale](str);\r\n  } else if(locale === 'any') {\r\n    for (const key in identityCardValidators) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      if(identityCardValidators.hasOwnProperty(key)) {\r\n        const validator = identityCardValidators[key];\r\n        if(validator(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","/**\r\n * 密码强度验证\r\n *\r\n * */\r\nimport isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\nconst upperCaseRegex = /^[A-Z]$/;\r\nconst lowerCaseRegex = /^[a-z]$/;\r\nconst numberRegex = /^[0-9]$/;\r\nconst symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\r\n\r\nexport interface IsStrongPasswordOptions {\r\n  minLength: number;\r\n  minLowercase: number;\r\n  minUppercase: number;\r\n  minNumbers: number;\r\n  minSymbols: number;\r\n  returnScore: boolean;\r\n  pointsPerUnique: number;\r\n  pointsPerRepeat: number;\r\n  pointsForContainingLower: number;\r\n  pointsForContainingUpper: number;\r\n  pointsForContainingNumber: number;\r\n  pointsForContainingSymbol: number;\r\n}\r\n\r\nconst defaultOptions: IsStrongPasswordOptions = {\r\n  // 最小长度\r\n  minLength: 8,\r\n  // 最少小写字母个数\r\n  minLowercase: 1,\r\n  // 最少大写字母个数\r\n  minUppercase: 1,\r\n  // 最少数字个数\r\n  minNumbers: 1,\r\n  // 最少特殊符号个数\r\n  minSymbols: 1,\r\n  // 返回密码强度评分\r\n  returnScore: false,\r\n  pointsPerUnique: 1,\r\n  pointsPerRepeat: 0.5,\r\n  pointsForContainingLower: 10,\r\n  pointsForContainingUpper: 10,\r\n  pointsForContainingNumber: 10,\r\n  pointsForContainingSymbol: 10,\r\n};\r\n\r\n/* Counts number of occurrences of each char in a string\r\n * could be moved to util/ ?\r\n*/\r\nfunction countChars(str: string) {\r\n  let result = {};\r\n  Array.from(str).forEach((char) => {\r\n    let curVal = result[char];\r\n    if(curVal) {\r\n      result[char] += 1;\r\n    } else {\r\n      result[char] = 1;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/* Return information about a password */\r\nexport interface IAnalysisType {\r\n  length: number;\r\n  uniqueChars: number;\r\n  uppercaseCount: number;\r\n  lowercaseCount: number;\r\n  numberCount: number;\r\n  symbolCount: number;\r\n}\r\n\r\nfunction analyzePassword(password: string) {\r\n  let charMap = countChars(password);\r\n  let analysis: IAnalysisType = {\r\n    length: password.length,\r\n    uniqueChars: Object.keys(charMap).length,\r\n    uppercaseCount: 0,\r\n    lowercaseCount: 0,\r\n    numberCount: 0,\r\n    symbolCount: 0,\r\n  };\r\n  Object.keys(charMap).forEach((char) => {\r\n    /* istanbul ignore else */\r\n    if(upperCaseRegex.test(char)) {\r\n      analysis.uppercaseCount += charMap[char];\r\n    } else if(lowerCaseRegex.test(char)) {\r\n      analysis.lowercaseCount += charMap[char];\r\n    } else if(numberRegex.test(char)) {\r\n      analysis.numberCount += charMap[char];\r\n    } else if(symbolRegex.test(char)) {\r\n      analysis.symbolCount += charMap[char];\r\n    }\r\n  });\r\n  return analysis;\r\n}\r\n\r\nfunction scorePassword(analysis: IAnalysisType, scoringOptions: IsStrongPasswordOptions) {\r\n  let points = 0;\r\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\r\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\r\n  if(analysis.lowercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingLower;\r\n  }\r\n  if(analysis.uppercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingUpper;\r\n  }\r\n  if(analysis.numberCount > 0) {\r\n    points += scoringOptions.pointsForContainingNumber;\r\n  }\r\n  if(analysis.symbolCount > 0) {\r\n    points += scoringOptions.pointsForContainingSymbol;\r\n  }\r\n  return points;\r\n}\r\n\r\n/**\r\n * 密码强度验证\r\n *\r\n * @param[str]  密码\r\n * @param[options]  验证参数\r\n * */\r\nexport default function isStrongPassword(str: any, options?: Partial<IsStrongPasswordOptions>) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const analysis = analyzePassword(str);\r\n  const new_options: IsStrongPasswordOptions = {\r\n    ...defaultOptions,\r\n    ...options\r\n  };\r\n  if(new_options.returnScore) {\r\n    return scorePassword(analysis, new_options);\r\n  }\r\n  return analysis.length >= new_options.minLength\r\n    && analysis.lowercaseCount >= new_options.minLowercase\r\n    && analysis.uppercaseCount >= new_options.minUppercase\r\n    && analysis.numberCount >= new_options.minNumbers\r\n    && analysis.symbolCount >= new_options.minSymbols;\r\n}\r\n","/**\r\n * 标签语义化\r\n *\r\n * @param[str]  str\r\n * eg: <h1> => &lt;h1&gt;\r\n *\r\n * */\r\nconst escape = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&/g, '&amp;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#x27;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\\//g, '&#x2F;')\r\n    .replace(/\\\\/g, '&#x5C;')\r\n    .replace(/`/g, '&#96;'));\r\n}\r\n\r\nexport default escape\r\n","import isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n/**\r\n * 布尔值判断\r\n * @param[str]: 布尔值\r\n * @param[extend]: 是否支持拓展\r\n * @param[trueBooleans]: 拓展布尔值\r\n * */\r\nconst isBooleanTrue = (str: any, extend: Boolean, trueBooleans = ['yes', 'true', '1']) => {\r\n  const type_str = typeof str;\r\n  if(type_str === 'boolean') {\r\n    return str\r\n  }\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  if(extend) {\r\n    str = `${str}`.toLowerCase()\r\n    return trueBooleans.includes(str);\r\n  }\r\n}\r\n\r\nexport default isBooleanTrue\r\n","/**\r\n * 子节长度判断\r\n *@param[str] any 字符串\r\n *@param[option] 参数 {min: number, max:number}\r\n * */\r\nexport interface IsByteLengthOptions {\r\n  min?: number;\r\n  max: number;\r\n}\r\n\r\nexport default function isByteLength(str: any, options: IsByteLengthOptions) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  let min;\r\n  let max;\r\n  if(typeof (options) === 'object') {\r\n    min = options.min || 0;\r\n    max = options.max;\r\n  } else {\r\n    // backwards compatibility: isByteLength(str, min [, max])\r\n    min = arguments[1];\r\n    max = arguments[2];\r\n  }\r\n  const len = encodeURI(str).split(/%..|./).length - 1;\r\n  return len >= min && (typeof max === 'undefined' || len <= max);\r\n}\r\n\r\n","/**\r\n *\r\n * 邮箱格式正则校验\r\n * @param[str] 邮箱\r\n * */\r\nconst isEmail = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  // 用户名@主机名”\r\n  const reg = /^(?!.*?[._-]{2})[a-z0-9][a-z0-9._-]{0,62}[a-z0-9]@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]{2,63}$/i;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isEmail\r\n","import isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n\r\n/**\r\n * 判断字符串是否为空值\r\n * @param[str] 需要判断的值\r\n * @param[option] {ignore_whitespace: boolean} 是否忽略空格\r\n * */\r\n\r\ninterface DefaultIsEmptyOptions {\r\n  ignore_whitespace: boolean;\r\n}\r\n\r\nexport const isEmptyStr = (str: any, options?: DefaultIsEmptyOptions) => {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const default_is_empty_options = {\r\n    ignore_whitespace: false\r\n  };\r\n  str = `${str}`;\r\n  options = options || default_is_empty_options;\r\n\r\n  return (options.ignore_whitespace ? str.trim().length : str.length) === 0;\r\n}\r\n\r\n\r\n/**\r\n * @names：判断数组是否为空数据\r\n * @params[data] Array\r\n * */\r\nexport const isEmptyArray = (data = []) => {\r\n  return !Array.isArray(data) || !data.length\r\n};\r\n\r\n","/**\r\n * 以太坊地址校验\r\n * @param[str] 以太坊地址\r\n * */\r\nconst isEthereumAddress = (str: any) => {\r\n  const ethReg = /^(0x)[0-9a-f]{40}$/i;\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  return ethReg.test(str);\r\n}\r\nexport default isEthereumAddress\r\n","import isFQDN from \"../http/isFQDN\";\r\n\r\n/**\r\n * 主机合法性校验\r\n * */\r\nconst isHost = (str: string) => {\r\n  const specialHosts = '@';\r\n  return (\r\n    str.indexOf(specialHosts) > -1 ||\r\n    isFQDN(str, {\r\n      // 是否包含TLD\r\n      require_tld: true,\r\n      // 是否允许包含下划线\r\n      allow_underscores: true,\r\n      // 是否允许 . 号结尾\r\n      allow_trailing_dot: false,\r\n      // 是否允许数字TLD号结尾\r\n      allow_numeric_tld: false,\r\n      // 是否运通配符 *\r\n      allow_wildcard: false\r\n    })\r\n  );\r\n};\r\n\r\nexport default isHost\r\n","import isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n\r\n/**\r\n * IMEI校验\r\n * @param[str] imei\r\n * @param[allow_hyphens] boolean 允许连字符\r\n * */\r\nexport default function isIMEI(str: any, allow_hyphens = false) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  str = `${str}`;\r\n\r\n  let imeiRegexWithoutHypens = /^[0-9]{15}$/;\r\n  let imeiRegexWithHypens = /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/;\r\n  // default regex for checking imei is the one without hyphens\r\n\r\n  let imeiRegex = imeiRegexWithoutHypens;\r\n\r\n  if(allow_hyphens) {\r\n    imeiRegex = imeiRegexWithHypens;\r\n  }\r\n\r\n\r\n  if(!imeiRegex.test(str)) {\r\n    return false;\r\n  }\r\n\r\n  str = str.replace(/-/g, '');\r\n\r\n  let sum = 0,\r\n    mul = 2,\r\n    l = 14;\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    const digit = str.substring(l - i - 1, l - i);\r\n    const tp = parseInt(digit, 10) * mul;\r\n    if(tp >= 10) {\r\n      sum += (tp % 10) + 1;\r\n    } else {\r\n      sum += tp;\r\n    }\r\n    if(mul === 1) {\r\n      mul += 1;\r\n    } else {\r\n      mul -= 1;\r\n    }\r\n  }\r\n  const chk = ((10 - (sum % 10)) % 10);\r\n  return chk === parseInt(str.substring(14, 15), 10);\r\n\r\n}\r\n","import utilToString from './util/utilToString';\r\nimport isValidParamsTypes from \"./util/isValidDataTypes\";\r\nimport utilTypeOf from \"./util/utilTypeOf\";\r\n\r\n/**\r\n * 是否包含数据判断\r\n * @param[str] 要判断的数据\r\n * @param[options] 匹配的数据\r\n * */\r\nexport default function isIn(str: any, options: any) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  let i;\r\n  let options_type = utilTypeOf(options)\r\n  if(options_type === 'array') {\r\n    const array: any[] = [];\r\n    for (i in options) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if({}.hasOwnProperty.call(options, i)) {\r\n        array[i] = utilToString(options[i]);\r\n      }\r\n    }\r\n    return array.indexOf(str) >= 0;\r\n  } else if(options_type === 'object') {\r\n    return options.hasOwnProperty(str);\r\n  } else if(options_type === 'function') {\r\n    return options.indexOf(str) >= 0;\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * 邮编格式验证\r\n *\r\n * */\r\nimport isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n/**\r\n * 邮编格式验证\r\n * @param[str] 邮编\r\n * @param[locale] 邮编所属地\r\n * */\r\nexport default function isPostalCode(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  // common patterns\r\n  const threeDigit = /^\\d{3}$/;\r\n  const fourDigit = /^\\d{4}$/;\r\n  const fiveDigit = /^\\d{5}$/;\r\n  const sixDigit = /^\\d{6}$/;\r\n\r\n  const patterns = {\r\n    AD: /^AD\\d{3}$/,\r\n    AT: fourDigit,\r\n    AU: fourDigit,\r\n    AZ: /^AZ\\d{4}$/,\r\n    BE: fourDigit,\r\n    BG: fourDigit,\r\n    BR: /^\\d{5}-\\d{3}$/,\r\n    BY: /2[1-4]{1}\\d{4}$/,\r\n    CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\r\n    CH: fourDigit,\r\n    CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\r\n    CZ: /^\\d{3}\\s?\\d{2}$/,\r\n    DE: fiveDigit,\r\n    DK: fourDigit,\r\n    DO: fiveDigit,\r\n    DZ: fiveDigit,\r\n    EE: fiveDigit,\r\n    ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\r\n    FI: fiveDigit,\r\n    FR: /^\\d{2}\\s?\\d{3}$/,\r\n    GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\r\n    GR: /^\\d{3}\\s?\\d{2}$/,\r\n    HR: /^([1-5]\\d{4}$)/,\r\n    HT: /^HT\\d{4}$/,\r\n    HU: fourDigit,\r\n    ID: fiveDigit,\r\n    IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\r\n    IL: /^(\\d{5}|\\d{7})$/,\r\n    IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\r\n    IR: /\\b(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}\\b/,\r\n    IS: threeDigit,\r\n    IT: fiveDigit,\r\n    JP: /^\\d{3}\\-\\d{4}$/,\r\n    KE: fiveDigit,\r\n    KR: /^(\\d{5}|\\d{6})$/,\r\n    LI: /^(948[5-9]|949[0-7])$/,\r\n    LT: /^LT\\-\\d{5}$/,\r\n    LU: fourDigit,\r\n    LV: /^LV\\-\\d{4}$/,\r\n    LK: fiveDigit,\r\n    MX: fiveDigit,\r\n    MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\r\n    MY: fiveDigit,\r\n    NL: /^\\d{4}\\s?[a-z]{2}$/i,\r\n    NO: fourDigit,\r\n    NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\r\n    NZ: fourDigit,\r\n    PL: /^\\d{2}\\-\\d{3}$/,\r\n    PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\r\n    PT: /^\\d{4}\\-\\d{3}?$/,\r\n    RO: sixDigit,\r\n    RU: sixDigit,\r\n    SA: fiveDigit,\r\n    SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\r\n    SG: sixDigit,\r\n    SI: fourDigit,\r\n    SK: /^\\d{3}\\s?\\d{2}$/,\r\n    TH: fiveDigit,\r\n    TN: fourDigit,\r\n    TW: /^\\d{3}(\\d{2})?$/,\r\n    UA: fiveDigit,\r\n    US: /^\\d{5}(-\\d{4})?$/,\r\n    ZA: fourDigit,\r\n    ZM: fiveDigit,\r\n  };\r\n  if(locale in patterns) {\r\n    return patterns[locale].test(str);\r\n  } else if(locale === 'any') {\r\n    for (const key in patterns) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if(patterns.hasOwnProperty(key)) {\r\n        const pattern = patterns[key];\r\n        if(pattern.test(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","/**\r\n * A记录【Address】 => 将域名指向一个IPV4地址\r\n *  使用场景: 添加 A 记录可实现将域名指向 IP 地址。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）。\r\n *  解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。\r\n *  记录值：记录值为 IP 地址，填写 IPv4 地址。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport { isIPv4 } from \"../http/IP\";\r\n\r\nconst isA = (str: string) => {\r\n  return isIPv4(str);\r\n\r\n};\r\nexport default isA\r\n","/**\r\n * AAAA【AAAA record】  => 将域名指向一个IPV6地址\r\n * 使用场景：当预期是实现访问者通过 IPv6 地址访问网站，可以使用 AAAA 记录实现。\r\n * 主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）\r\n * 解析线路：默认为必选项，未设置会导致部分用户无法访问；\r\n * 记录值：记录值为IP地址，填写 IPV6 地址\r\n * TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport { isIPv6 } from \"../http/IP\";\r\n\r\nconst isAAAA = (str: string) => {\r\n  return isIPv6(str);\r\n\r\n};\r\nexport default isAAAA\r\n","/**\r\n * CAA  =>  CA证书颁发机构授权校验\r\n *  使用场景： CAA(Certificate Authority Authorization)，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。\r\n *  域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。\r\n *  CAA记录的格式为： [flag] [tag] [value]，是由一个标志字节的[flag]和一个被称为属性的[tag]-[value]（标签-值）对组成。您可以将多个CAA字段添加到域名的DNS记录中。\r\n * ------> [flag]：无符号整数（目前仅支持0和128），用于标志认证机构。通常情况下填0，表示如果颁发证书机构无法识别本条信息，就忽略。\r\n * ------> [tag]：支持 issue、issuewild 和 iodef。\r\n * --------> issue：CA授权单个证书颁发机构发布的 任何类型 域名证书。\r\n * --------> issuewild：CA授权单个证书颁发机构发布主机名的 通配符 证书。\r\n * --------> iodef：CA可以将违规的颁发记录URL发送给某个电子邮箱。\r\n * ------> [value]： CA的域名或用于违规通知的电子邮箱。\r\n */\r\nimport isInRange from \"../isInRange\";\r\nimport utilStringToArray from \"../util/utilStringToArray\";\r\n\r\n// （如：0 iodef \"mailto:admin@dns-example.com\"）\r\n// （如：0 issue \"symantec.com\"）\r\nconst isCAA = (str: any) => {\r\n  const caaValueRegex = /^\"[\\w-:./@]{1,255}\"$/;\r\n  const caaTags = ['issue', 'issuewild', 'iodef'];\r\n  const values = utilStringToArray(str);\r\n  return (\r\n    values.length === 3 &&\r\n    isInRange(values[0], 0, 255) &&\r\n    caaTags.indexOf(values[1]) !== -1 &&\r\n    caaValueRegex.test(values[2])\r\n  );\r\n};\r\nexport default isCAA\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n/**\r\n * CNAME【别名解析 - Canonical Name】  => 将域名指向另外一个域名\r\n *  使用场景: 当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入“ www”；如需实现dns-example.com的解析，主机记录输入“@”）\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析。\r\n *  记录值：记录值为 CNAME 指向的域名，只可以填写域名。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\nconst isCNAME = (str: string) => {\r\n  return isDomain(str)\r\n}\r\n\r\nexport default isCNAME;\r\n","/**\r\n * MX【邮件交换记录 - Mail Exchanger】  => 将域名指向邮件服务器地址\r\n *  使用场景：设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为mail exchanger，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给“vincen@example.com”时，系统将对“example.com”进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。\r\n *  主机记录：一般是指子域名的前缀，（要做xxx@dns-example.com的邮箱，所以主机记录输入“ @ ”；要做xxx@mail.dns-example.com，如果主机记录填 mail）。\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析，邮件无法收取；\r\n *  记录值：输入内容通过联系邮箱注册商提供。例如阿里云邮提供的需要配置的解析记录值是 mx1.qiye.aliyun.com；\r\n *  MX优先级：输入内容通过联系邮箱注册商提供，MX 优先级的数值越低，优先级别就越高（如下图，邮件会先尝试发送到 MX 优先级为 5 的mx1.qiye.aliyun.com，如果尝试失败，才会发送到 MX 优先级为10 的mx2.qiye.aliyun.com）。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from '../http/isDomain'\r\n\r\nconst isMX = (str: string) => {\r\n  if(!str) {\r\n    return false\r\n  }\r\n\r\n  return isDomain(str)\r\n\r\n};\r\nexport default isMX;\r\n","/**\r\n * NS【Name Server - 域名服务器记录】  => 将子域名指定其他DNS服务器解析\r\n *  使用场景：如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。\r\n *  主机记录：一般是指子域名的前缀（如需将子域名为www.dns-example.com 的解析授权给腾讯云解析的DNS服务器进行解析管理，只需要在主机记录处填写 www 即可）。\r\n *  解析线路：默认为必填项，未设置默认线路会导致部分用户无法解析。\r\n *  记录值：记录值为要授权的 DNS 服务器域名，例如腾讯云解析的DNS服务器域名f1g1ns1.dnspod.net。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from \"../http/isDomain\";\r\n\r\n\r\nconst isNS = (str: string) => {\r\n  return isDomain(str)\r\n}\r\n\r\nexport default isNS\r\n","import isDomain from \"../http/isDomain\";\r\nimport isPort from \"../http/isPort\"\r\nimport utilStringToArray from \"../util/utilStringToArray\";\r\nimport isInRange from \"../isInRange\";\r\n\r\n\r\n/**\r\n * SRV【服务定位（SRV）资源记录】  => 记录提供特定的服务的服务器\r\n *  使用场景： SRV 记录用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。\r\n *  主机记录： 格式为 服务的名字.协议的类型。\r\n *    例如：_sip._tcp\r\n *  解析线路： 默认 为必选项，未设置默认线路会导致部分用户无法解析\r\n *  记录值： 格式为 【优先级】 【权重】 【端口】 目标地址 ，每项中间需以空格分隔。\r\n *    例如：0 5 5060 sipserver.example.com\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n\r\n * */\r\nconst isSRV = (str: string) => {\r\n  const values = utilStringToArray(str);\r\n  return (\r\n    values.length === 4 &&\r\n    isInRange(values[0], 0, 65535) &&\r\n    isInRange(values[1], 0, 65535) &&\r\n    isPort(values[2]) &&\r\n    isDomain(values[3])\r\n  );\r\n};\r\n\r\nexport default isSRV\r\n","/**\r\n * TXT  => 文本长度限制512，通常做SPF记录（反垃圾邮件）\r\n *  使用场景：如果希望对域名进行标识和说明，可以使用 TXT 记录， TXT 记录多用来做 SPF 记录（反垃圾邮件）。\r\n *  主机记录：一般是指子域名的前缀（如需为子域名为 www.dns-example.com 添加 TXT 记录， 主机记录输入 www；如需为dns-example.com添加TXT记录，主机记录输入 @）\r\n *  解析线路：默认 为必选项，未设置会导致部分用户无法解析。\r\n *  记录值：常用情况TXT 记录是用来做 SPF 反垃圾邮件的，最典型的 SPF 格式的 TXT 记录例子为“v=spf1 a mx ~all”，表示只有这个域名的 A 记录和 MX 记录中的 IP 地址有权限使用这个域名发送邮件。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\n/**\r\n * TXT记录，一般指某个主机名或域名的标识和说明。如：admin IN TXT \"管理员, 电话：XXXXXXXXXXX\"，mail IN TXT \"邮件主机，存放在xxx , 管理人：AAA\"，Jim IN TXT \"contact: abc@mailserver.com\"，也就是说，通过设置TXT记录内容可以使别人更方便地联系到你。TXT 记录常用的方式还有做 SPF 记录（反垃圾邮件）和SSL证书的DNS验证等。\r\n * */\r\n\r\nconst isTXT = (str: string) => {\r\n  return str.length > 255;\r\n}\r\n\r\nexport default isTXT\r\n","import isNumber from '../isNumber'\r\n\r\n/**\r\n * TTL【Time-To-Live】 => 为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *  TTL值是指全国各地的localdns服务器中缓存解析结果的时间周期。\r\n *  1 . 当各地的localdns服务器接接收到解析请求查询时，就会向权威DNS（例如云解析DNS）发起解析请求查询，获取到解析结果。\r\n *  2 . localdns会将查询到的解析结果，保存到本地一段时间。保存的这个时间周期，就是根据TTL设置而来的。在保存的这个时间周期内，如果各地localdns再接收到此域名的解析请求查询，是不会再向权威DNS发起请求查询的，而是直接将本地保存的解析结果返回给用户。\r\n *  3 . 当localdns本地缓存的时间到期后，就会清除该解析记录的缓存结果，清除后，如果各地localdns再接收到此域名的解析请求查询，则会重新向权威DNS（例如云解析DNS）发起解析请求查询，获取最新的解析结果。\r\n *\r\n *  */\r\nconst isTTL = (str: string | number, maxTTL: 65535) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  if(isNumber(str)) {\r\n    let ttl = Number(str);\r\n    return ttl > 0 && ttl <= maxTTL;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default isTTL\r\n","/**\r\n * URL 正在校验\r\n *\r\n * */\r\nimport isFQDN from './http/isFQDN';\r\nimport { isIP, isIPv6 } from './http/IP';\r\n\r\n/*\r\noptions for isURL method\r\n\r\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\r\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\r\nprotocols - valid protocols can be modified with this option\r\nrequire_host - if set as false isURL will not check if host is present in the URL\r\nrequire_port - if set as true isURL will check if port is present in the URL\r\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\r\nvalidate_length - if set as false isURL will skip string length validation (IE maximum is 2083)\r\n\r\n*/\r\n\r\n\r\nexport type TProtocols = Array<'http' | 'https' | 'ftp'>;\r\nexport type TCheckHostMatches = Array<string | RegExp>;\r\n\r\nexport interface IIsURLDefaultUrlOptions {\r\n  protocols: TProtocols;\r\n  require_tld: boolean;\r\n  require_protocol: boolean;\r\n  require_host: boolean;\r\n  require_port: boolean;\r\n  require_valid_protocol: boolean;\r\n  allow_underscores: boolean;\r\n  allow_trailing_dot: boolean;\r\n  allow_protocol_relative_urls: boolean;\r\n  allow_fragments: boolean;\r\n  allow_query_components: boolean;\r\n  validate_length: boolean;\r\n  disallow_auth?: boolean;\r\n  host_whitelist?: TCheckHostMatches;\r\n  host_blacklist?: TCheckHostMatches;\r\n}\r\n\r\n\r\n/**\r\n * URL合法性校验\r\n * @param[url]  url\r\n * @param[options] 校验参数\r\n * */\r\nexport default function isURL(url: any, options: Partial<IIsURLDefaultUrlOptions>) {\r\n\r\n\r\n  const default_url_options: IIsURLDefaultUrlOptions = {\r\n    protocols: ['http', 'https', 'ftp'],\r\n    require_tld: true,\r\n    require_protocol: false,\r\n    require_host: true,\r\n    require_port: false,\r\n    require_valid_protocol: true,\r\n    allow_underscores: false,\r\n    allow_trailing_dot: false,\r\n    allow_protocol_relative_urls: false,\r\n    allow_fragments: true,\r\n    allow_query_components: true,\r\n    validate_length: true,\r\n  };\r\n\r\n  const wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\r\n\r\n  function isRegExp(obj: RegExp | string) {\r\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\r\n  }\r\n\r\n  function checkHost(host: string, matches: TCheckHostMatches) {\r\n    for (let i = 0; i < matches.length; i++) {\r\n      let match = matches[i];\r\n      // @ts-ignore\r\n      if(host === match || (isRegExp(match) && match.test(host))) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if(typeof url !== \"string\") {\r\n    return false\r\n  }\r\n  if(!url || /[\\s<>]/.test(url)) {\r\n    return false;\r\n  }\r\n  if(url.indexOf('mailto:') === 0) {\r\n    return false;\r\n  }\r\n  const new_options = {\r\n    ...options,\r\n    ...default_url_options\r\n  };\r\n\r\n  if(options.validate_length && url.length >= 2083) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_fragments && url.includes('#')) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_query_components && (url.includes('?') || url.includes('&'))) {\r\n    return false;\r\n  }\r\n\r\n  let protocol, auth, host, hostname, port, port_str, split, ipv6;\r\n\r\n  split = url.split('#');\r\n  url = split.shift();\r\n\r\n  split = url.split('?');\r\n  url = split.shift();\r\n\r\n  split = url.split('://');\r\n  if(split.length > 1) {\r\n    protocol = split.shift().toLowerCase();\r\n    if(new_options.require_valid_protocol && new_options.protocols.indexOf(protocol) === -1) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_protocol) {\r\n    return false;\r\n  } else if(url.substr(0, 2) === '//') {\r\n    if(!new_options.allow_protocol_relative_urls) {\r\n      return false;\r\n    }\r\n    split[0] = url.substr(2);\r\n  }\r\n  url = split.join('://');\r\n\r\n  if(url === '') {\r\n    return false;\r\n  }\r\n\r\n  split = url.split('/');\r\n  url = split.shift();\r\n\r\n  if(url === '' && !new_options.require_host) {\r\n    return true;\r\n  }\r\n\r\n  split = url.split('@');\r\n  if(split.length > 1) {\r\n    if(new_options.disallow_auth) {\r\n      return false;\r\n    }\r\n    if(split[0] === '') {\r\n      return false;\r\n    }\r\n    auth = split.shift();\r\n    if(auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\r\n      return false;\r\n    }\r\n    const [user, password] = auth.split(':');\r\n    if(user === '' && password === '') {\r\n      return false;\r\n    }\r\n  }\r\n  hostname = split.join('@');\r\n\r\n  port_str = null;\r\n  ipv6 = null;\r\n  const ipv6_match = hostname.match(wrapped_ipv6);\r\n  if(ipv6_match) {\r\n    host = '';\r\n    ipv6 = ipv6_match[1];\r\n    port_str = ipv6_match[2] || null;\r\n  } else {\r\n    split = hostname.split(':');\r\n    host = split.shift();\r\n    if(split.length) {\r\n      port_str = split.join(':');\r\n    }\r\n  }\r\n\r\n  if(port_str !== null && port_str.length > 0) {\r\n    port = parseInt(port_str, 10);\r\n    if(!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_port) {\r\n    return false;\r\n  }\r\n\r\n  if(new_options.host_whitelist) {\r\n    return checkHost(host, new_options.host_whitelist);\r\n  }\r\n  if(!isIP(host) && !isFQDN(host, new_options) && (!ipv6 || !isIPv6(ipv6))) {\r\n    return false;\r\n  }\r\n\r\n  host = host || ipv6;\r\n\r\n  return !(new_options.host_blacklist && checkHost(host, new_options.host_blacklist));\r\n\r\n\r\n}\r\n","import isValidParamsTypes from \"./util/isValidDataTypes\";\r\n\r\n/**\r\n * uuid 合法性校验\r\n * @param[str]  url\r\n * @param[version] uuid版本\r\n * */\r\nexport default function isUUID(str: any, version: any) {\r\n  const uuid = {\r\n    1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n  };\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const pattern = uuid[![undefined, null].includes(version) ? version : 'all'];\r\n  return !!pattern && pattern.test(str);\r\n}\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n// is zone\r\nconst isZone = (str: string) => {\r\n  const rootZone = '.';\r\n  return rootZone === str || isDomain(str);\r\n};\r\n\r\nexport default isZone\r\n","/**\r\n * 标签语义化编译\r\n * @param[str]  str\r\n * eg: &lt;h1&gt; => <h1>\r\n * */\r\nexport default function unescape(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&quot;/g, '\"')\r\n    .replace(/&#x27;/g, \"'\")\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n    .replace(/&#x2F;/g, '/')\r\n    .replace(/&#x5C;/g, '\\\\')\r\n    .replace(/&#96;/g, '`')\r\n    .replace(/&amp;/g, '&'));\r\n  // &amp; replacement has to be the last one to prevent\r\n  // bugs with intermediate strings containing escape sequences\r\n  // See: https://github.com/validatorjs/validator.js/issues/1827\r\n}\r\n"],"names":["utilTypeOf","input","rawObject","Object","prototype","toString","call","toLowerCase","exec","isValidParamsTypes","str","types","defaultTypes","includes","EnumLanguageType","setErrorCodeLang","lang","zh","en","utilStringToArray","separator","trim","split","utilToString","isNaN","length","String","v4Seg","v4Str","IPv4Reg","RegExp","v6Seg","IPv6Reg","isIPv4","s","test","isIPv6","isIP","errorCodes","DOMAIN_IS_EMPTY","DOMAIN_FORMAT_ERROR","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_WITH_HYPHEN","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_WITH_UNDERSCORES","LABEL_ENDS_WITH_UNDERSCORES","LABEL_INVALID_CHARS","TLD_WITH_NUMBER","TLD_INVALID_CHARS","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","isFQDN","options","errorMessage","replace","success","message","console","log","len","substring","indexOf","nodes","node_len","tld","max_node","i","label","isDomain","isNumber","number","allowNegative","parseFloat","isInRange","min","max","val","Number","isPort","EnumRecordType","creditCard","isInt","regex","hasOwnProperty","allow_leading_zeroes","minCheckPassed","maxCheckPassed","ltCheckPassed","lt","gtCheckPassed","gt","identityCardValidators","PL","weightOfDigits","modulo","slice","reduce","acc","digit","index","lastDigit","charAt","ES","charsValue","X","Y","Z","sanitized","toUpperCase","char","endsWith","FI","match","parseInt","IN","d","p","c","map","reverse","forEach","IR","substr","lastNumber","sum","IT","search","NO","f","k1","k2","TH","LK","id","incNum","provincesAndCities","powers","parityBit","checkAddressCode","addressCode","checkBirthDayCode","birDayCode","yyyy","mm","dd","xdata","Date","getFullYear","getMonth","getDate","checkParityBit","idCardNo","id17","power","getParityBit","check","check15IdCardNo","check18IdCardNo","ALPHABET_CODES","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","Array","from","code","Math","floor","upperCaseRegex","lowerCaseRegex","numberRegex","symbolRegex","defaultOptions","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","analyzePassword","password","charMap","result","countChars","analysis","uniqueChars","keys","uppercaseCount","lowercaseCount","numberCount","symbolCount","extend","trueBooleans","arguments","encodeURI","err","tmpNum","shouldDouble","data","isArray","ignore_whitespace","allow_hyphens","imeiRegex","mul","tp","locale","key","validator","Error","options_type","array","fourDigit","fiveDigit","sixDigit","patterns","AD","AT","AU","AZ","BE","BG","BR","BY","CA","CH","CN","CZ","DE","DK","DO","DZ","EE","FR","GB","GR","HR","HT","HU","ID","IE","IL","IS","JP","KE","KR","LI","LT","LU","LV","MX","MT","MY","NL","NP","NZ","PR","PT","RO","RU","SA","SE","SG","SI","SK","TN","TW","UA","US","ZA","ZM","type","isA","AAAA","isAAAA","CAA","values","isCAA","CNAME","isCNAME","isMX","NS","isNS","SRV","isSRV","TXT","isTXT","new_options","scoringOptions","points","scorePassword","maxTTL","ttl","url","checkHost","host","matches","obj","protocols","require_protocol","require_host","require_port","require_valid_protocol","allow_protocol_relative_urls","allow_fragments","allow_query_components","validate_length","protocol","auth","hostname","port","port_str","ipv6","shift","join","disallow_auth","user","ipv6_match","host_whitelist","host_blacklist","version","pattern","all","undefined"],"mappings":"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"}