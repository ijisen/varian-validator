{"version":3,"file":"validator.js","sources":["../src/utils/isNumber.ts","../src/utils/arithmetic.ts","../src/utils/arrayDataGrouping.ts","../src/utils/cookie.ts","../src/utils/dateFormatReg.ts","../src/utils/debounce.ts","../src/utils/deepClone.ts","../src/utils/domain.ts","../src/utils/escape.ts","../src/utils/filterStringSpace.ts","../src/utils/getStrByteLength.ts","../src/utils/getUrlParam.ts","../src/utils/specialSymbolToComma.ts","../src/utils/inputTextareaFormat.ts","../src/utils/isExistValue.ts","../src/utils/utilTypeOf.ts","../src/utils/isValidParamsTypes.ts","../src/utils/localStorage.ts","../src/utils/sessionStorage.ts","../src/utils/setErrorCodeLang.ts","../src/utils/setHtmlTitle.ts","../src/utils/setUrlParam.ts","../src/utils/stringToLowerOrUpperCase.ts","../src/utils/throttle.ts","../src/utils/unescape.ts","../src/utils/utilsSubmitForm.ts","../src/utils/stringToArray.ts","../src/utils/utilToString.ts","../src/validator/http/IP.ts","../src/validator/http/isFQDN.ts","../src/validator/http/isDomain.ts","../src/validator/isInRange.ts","../src/validator/http/isPort.ts","../src/validator/rr/isMX.ts","../src/validator/rr/isTXT.ts","../src/validator/rr/isNS.ts","../src/validator/rr/isCAA.ts","../src/validator/rr/isSRV.ts","../src/validator/rr/isA.ts","../src/validator/rr/isAAAA.ts","../src/validator/rr/isCNAME.ts","../src/validator/rr/isRdata.ts","../src/validator/rr/isHost.ts","../src/validator/rr/isTTL.ts","../src/validator/rr/isZone.ts","../src/validator/IsBankCard.ts","../src/validator/isBooleanTrue.ts","../src/validator/isByteLength.ts","../src/validator/isCellPhone.ts","../src/validator/isCreditCard.ts","../src/validator/isEmail.ts","../src/validator/isEmptyArray.ts","../src/validator/isEmptyStr.ts","../src/validator/isEthereumAddress.ts","../src/validator/isExistString.ts","../src/validator/isFixedPhone.ts","../src/validator/isInt.ts","../src/validator/isIdentityCard.ts","../src/validator/isIMEI.ts","../src/validator/isIn.ts","../src/validator/isObject.ts","../src/validator/isPostalCode.ts","../src/validator/isStrongPassword.ts","../src/validator/isTaxpayerNo.ts","../src/validator/isURL.ts","../src/validator/isUUID.ts"],"sourcesContent":["/**\r\n * 判断参数是否为数字\r\n *\r\n * @param[number]\r\n * @param[allowNegative] 是否允许为负数\r\n */\r\nexport const isNumber = (number: any, allowNegative = false) => {\r\n  /**\r\n   * isNaN([]) || isNaN('') || isNaN(true) || isNaN(false) || isNaN(null) => false\r\n   * */\r\n  if(typeof number === 'string') {\r\n    number = number.replace(/\\s+/g, '');\r\n  }\r\n  if(\r\n    isNaN(number) ||\r\n    number === '' ||\r\n    typeof number === 'object' ||\r\n    typeof number === 'boolean'\r\n  ) {\r\n    return false;\r\n  } else {\r\n    number = parseFloat(number);\r\n    if(number < 0) {\r\n      return allowNegative;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n","/** =======================================================\r\n * @names：  算术运算\r\n * @author：jisen\r\n * @time：  2022-07-04\r\n * @description：\r\n * ======================================================== */\r\nimport { isNumber } from \"./isNumber\";\r\n\r\n\r\n/**\r\n * 金额保留两位小数\r\n * @param[num]\r\n * @param[ceil] 是否向上取整， 默认四舍五入\r\n * ceil === true, 向上取整; eg: 5.051 = 5.06\r\n * ceil === false, 四舍五入; eg: 5.051 = 5.05\r\n */\r\nexport function numberToDecimal2(num: any, ceil?: boolean) {\r\n  if(!isNumber(num)) {\r\n    return num;\r\n  }\r\n  let f = parseFloat(num);\r\n  // Math.ceil(19.01*100) => 1902 js BUG\r\n  f = numberMultiply(f, 100);\r\n  if(ceil) {\r\n    f = Math.ceil(f) / 100;\r\n  } else {\r\n    f = Math.round(f) / 100;\r\n  }\r\n  let s = f.toString();\r\n  let rs = s.indexOf('.');\r\n  if(rs < 0) {\r\n    rs = s.length;\r\n    s += '.';\r\n  }\r\n  while (s.length <= rs + 2) {\r\n    s += '0';\r\n  }\r\n  return s;\r\n}\r\n\r\n/**\r\n * 计算值格式化\r\n * */\r\nconst numberFormat = (num: any) => {\r\n  try {\r\n    return num.toString().split(\".\")[1].length;\r\n  } catch (e) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 加法运算，避免数据相加小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 加数1\r\n * @param num2 加数2\r\n * 1.111 + 2 = 3.1109999999999998\r\n */\r\nexport function numberAdd(num1: any, num2: any) {\r\n  const baseNum1 = numberFormat(num1);\r\n  const baseNum2 = numberFormat(num2);\r\n  const baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));\r\n  return (numberMultiply(num1, baseNum) + numberMultiply(num2, baseNum)) / baseNum;\r\n}\r\n\r\n/**\r\n * 减法运算，避免数据相减小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 被减数\r\n * @param num2 减数\r\n */\r\nexport function numberSubtract(num1: number, num2: number) {\r\n  // 精度\r\n  let precision;\r\n  const baseNum1 = numberFormat(num1);\r\n  const baseNum2 = numberFormat(num2);\r\n  const baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));\r\n  precision = (baseNum1 >= baseNum2) ? baseNum1 : baseNum2;\r\n  return ((num1 * baseNum - num2 * baseNum) / baseNum).toFixed(precision);\r\n}\r\n\r\n/**\r\n * 乘法运算，避免数据相乘小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 被乘数\r\n * @param num2 乘数\r\n */\r\nexport function numberMultiply(num1: number, num2: number) {\r\n  let baseNum = 0;\r\n  baseNum += numberFormat(num1);\r\n  baseNum += numberFormat(num2);\r\n  return Number(num1.toString().replace(\".\", \"\")) * Number(num2.toString().replace(\".\", \"\")) / Math.pow(10, baseNum);\r\n}\r\n\r\n/**\r\n * 除法运算，避免数据相除小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 被除数\r\n * @param num2 除数\r\n */\r\nexport function numberDivide(num1: number, num2: number) {\r\n  const baseNum1 = numberFormat(num1);\r\n  const baseNum2 = numberFormat(num2);\r\n  const baseNum3 = Number(num1.toString().replace(\".\", \"\"));\r\n  const baseNum4 = Number(num2.toString().replace(\".\", \"\"));\r\n  return (baseNum3 / baseNum4) * Math.pow(10, baseNum2 - baseNum1);\r\n}\r\n","/**\r\n * @names：数组分组提交数据\r\n * @params[data] 数据\r\n * @params[groupLen] 组员\r\n * */\r\nexport const arrayDataGrouping = (data = [], groupLen = 10) => {\r\n  if(!Array.isArray(data) || !data.length) {\r\n    return undefined\r\n  }\r\n  // 数据长度\r\n  let dataLen = data.length;\r\n  if(dataLen <= groupLen) {\r\n    return [data]\r\n  }\r\n  data = JSON.parse(JSON.stringify(data));\r\n  // 当前数据可分组数\r\n  let group = Math.ceil(dataLen / groupLen);\r\n  let groupData = [];\r\n  for (let i = 1; i < group; i++) {\r\n    groupData.push(data.splice(0, groupLen))\r\n  }\r\n  groupData.push(data);\r\n  return groupData;\r\n};\r\n","\r\n/**\r\n * 储存 cookie 值\r\n * @param[name] cookie 关键字\r\n * @param[data] cookie 值\r\n * @param[objHours] 储存时间\r\n * @return boolean  储存成功与否\r\n */\r\nexport const setCookie = (name:string, data: any, objHours: number) => {\r\n  if(!name || !data) {\r\n    return false\r\n  }\r\n  if(typeof data === \"object\") {\r\n    data = JSON.stringify(data)\r\n  }\r\n  // 编码\r\n  let str = name + \"=\" + encodeURI(data);\r\n  // 为0时不设定过期时间，浏览器关闭时cookie自动消失\r\n  if(objHours > 0) {\r\n    const date = new Date();\r\n    const ms = objHours * 3600 * 1000;\r\n    date.setTime(date.getTime() + ms);\r\n    str += \"; expires=\" + date.toUTCString();\r\n  }\r\n  document.cookie = str;\r\n  return  true\r\n}\r\n\r\n\r\n/**\r\n * 获取 cookie 值\r\n * @param[name] cookie 关键字\r\n * @return any  获取到的值\r\n */\r\nexport const getCookieValue = (name: string)=> {\r\n  if(!name) return undefined;\r\n  let prefix = name + \"=\";\r\n  let start = document.cookie.indexOf(prefix);\r\n\r\n  if(start === -1) {\r\n    return null;\r\n  }\r\n\r\n  let end = document.cookie.indexOf(\";\", start + prefix.length);\r\n  if(end === -1) {\r\n    end = document.cookie.length;\r\n  }\r\n\r\n  let value = document.cookie.substring(start + prefix.length, end);\r\n  value = decodeURI(value);\r\n  try {\r\n    return JSON.parse(value)\r\n  } catch (e) {\r\n    return value\r\n  }\r\n}\r\n","/**\r\n * 解决IE不识别 2018-08-12的时间格式\r\n *\r\n * @param[date]: 日期\r\n *\r\n * eg: 2018-08-12 => 2018/08/12\r\n * */\r\nexport function dateFormatReg(date: any) {\r\n  if(typeof date === 'string') {\r\n    date = date.replace(/-/g, '/')\r\n  }\r\n  return date;\r\n}\r\n\r\n/**\r\n * 日期格式化.\r\n * @param[date]\r\n * @param[format] 格式\r\n */\r\nexport function formatDate(date: any, format = 'YYYY-MM-DD') {\r\n  if(!date) {\r\n    return ''\r\n  }\r\n  const reg = /cst/ig;\r\n  // 如果时间格式为 CST格式，则需要-14小时\r\n  if(typeof date === 'string' && reg.test(date)) {\r\n    date = new Date(date);\r\n    date.setHours(date.getHours() - 14);\r\n  }\r\n  date = dateFormatReg(date);\r\n  date = new Date(date);\r\n  const o = {\r\n    'M+': date.getMonth() + 1, //month\r\n    'D+': date.getDate(), //day\r\n    'd+': date.getDate(), //day\r\n    'H+': date.getHours(), //hour\r\n    'm+': date.getMinutes(), //minute\r\n    's+': date.getSeconds(), //second\r\n    'q+': Math.floor((date.getMonth() + 3) / 3), //quarter\r\n    'S': date.getMilliseconds(), //millisecond\r\n  };\r\n\r\n  if(/(Y+)/i.test(format)) {\r\n    format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n  }\r\n\r\n  for (const k in o) {\r\n    if(new RegExp('(' + k + ')').test(format)) {\r\n      format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\r\n    }\r\n  }\r\n  return format;\r\n}\r\n","/**\r\n * name：函数防抖\r\n * description：函数触发后，如果函数还没执行完成，则打断执行，重新执行\r\n * @params[fn]  回调函数\r\n * @params[delay]  定时器延时\r\n */\r\nexport const debounce = (fn = () => {\r\n}, delay = 200) => {\r\n  let timer: any = null;\r\n  return () => {\r\n    // 再次触发时，立即重新执行\r\n    // if (timer) {\r\n    clearTimeout(timer);\r\n    timer = null;\r\n    // }\r\n    timer = setTimeout(fn, delay);\r\n\r\n  }\r\n};\r\n","\r\n/**\r\n * 对象深度克隆\r\n *\r\n * @param[obj] 要克隆的对象\r\n */\r\nexport function deepClone(obj: any[] | { [propName: string]: any }) {\r\n  let newObj = Array.isArray(obj) ? [] : {};\r\n  if(obj && typeof obj === \"object\") {\r\n    for (let key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        newObj[key] = (obj && typeof obj[key] === 'object') ? deepClone(obj[key]) : obj[key];\r\n      }\r\n    }\r\n  }\r\n  return newObj\r\n}\r\n","/** =======================================================\r\n * @names：  域名相关公共方法\r\n * @author：jisen\r\n * @time：  2022-07-04\r\n * @description：域名相关公共方法\r\n * ======================================================== */\r\n/**\r\n *  获取【域名】的TLD\r\n *  abc.com => com\r\n *  abc.com.cn =>cn\r\n *  blog.zdns.com.cn => zdns.com.cn\r\n * */\r\nexport function getDomainTld(domain: any) {\r\n  if(typeof domain !== 'string') {\r\n    return ''\r\n  }\r\n  let index = domain.indexOf('.')\r\n  if(index > -1) {\r\n    return domain.slice(index + 1);\r\n  }\r\n  return ''\r\n}\r\n\r\n/**\r\n * 域名可注册年限判断\r\n * .co 为五年\r\n * 其它十年\r\n * @params[tld] 顶级域 com|co|net\r\n * */\r\nexport function getDomainPeriod(tld: any): number {\r\n  if(typeof tld !== 'string') {\r\n    return 10\r\n  }\r\n  // 注册时间为5年的顶级域\r\n  const tld_arr = ['co'];\r\n\r\n  let _period = 10;\r\n  if(tld_arr.indexOf(tld) > -1) {\r\n    _period = 5;\r\n  }\r\n  return _period;\r\n}\r\n","/**\r\n * 标签语义化\r\n *\r\n * @param[str]  str\r\n * eg: <h1> => &lt;h1&gt;\r\n *\r\n * */\r\nconst escape = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&/g, '&amp;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#x27;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\\//g, '&#x2F;')\r\n    .replace(/\\\\/g, '&#x5C;')\r\n    .replace(/`/g, '&#96;'));\r\n}\r\n\r\nexport default escape\r\n","/**\r\n * @names：普通文本过滤所有的空格\r\n * 部分 ajax 响应数据为字符串，且包含转义字符，无法转成JSON\r\n *\r\n * @params[str] string\r\n * @params[filterAllSpace] boolean\r\n * @return string\r\n * eg: aaa  aa  => aaa aa\r\n * */\r\nconst filterStringSpace = (str: any, filterAllSpace = false): string => {\r\n  if(typeof str !== 'string') {\r\n    // return str;\r\n    return ''\r\n  }\r\n  str = str.trim();\r\n  const reg = /\\\\0|\\\\u0000|\\s+/g;\r\n  if(filterAllSpace) {\r\n    return str.replace(reg, '')\r\n  } else {\r\n    return str.replace(reg, ' ')\r\n  }\r\n};\r\n\r\nexport default filterStringSpace;\r\n","/**\r\n *  计算字符串长度\r\n *  将字符串转Unicode计算 一个中文 = 3个子节\r\n *\r\n * @param[str] 字符串\r\n */\r\nexport function getStrByteLength(str: string) {\r\n  let totalLength = 0;\r\n  for (let i = 0, len = str.length; i < len; i++) {\r\n    const charCode = str.charCodeAt(i);\r\n    if (charCode < 0x007f) {\r\n      totalLength += 1;\r\n    } else if ((0x0080 <= charCode) && (charCode <= 0x07ff)) {\r\n      totalLength += 2;\r\n    } else if ((0x0800 <= charCode) && (charCode <= 0xffff)) {\r\n      totalLength += 3;\r\n    }\r\n  }\r\n  console.log(\"信息长度为: \" + totalLength + \" 字节\");\r\n  return totalLength;\r\n}\r\n","/**\r\n * 获取url中的参数\r\n *\r\n * @param[name] 参数名\r\n * @param[param] 参数  'name=xx&age=124'\r\n */\r\nexport function getUrlParam(name: string, param: string) {\r\n  //构造一个含有目标参数的正则表达式对象\r\n  let reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\r\n  //匹配目标参数\r\n  let _params = param || window.location.search.substring(1);\r\n  let r = _params.match(reg);\r\n  //返回参数值\r\n  if(r !== null) return decodeURIComponent(r[2]);\r\n  return null;\r\n}\r\n","\r\n/**\r\n * @names：特殊符号转 , 英文号\r\n * @params[str] string\r\n * @return string\r\n * */\r\nexport const specialSymbolToComma = (str: any) => {\r\n  if(typeof str === \"string\") {\r\n    return str.replace(/\\r|\\s|\\n|，/g, ',')\r\n  }\r\n  return \"\"\r\n};\r\n","import { specialSymbolToComma } from \"./specialSymbolToComma\";\r\n\r\n/**\r\n * @names：textarea 输入内容格式化\r\n * @params[str] string\r\n * @return [] Array\r\n * */\r\nexport const inputTextareaFormat = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return []\r\n  }\r\n  // 去除首尾空格\r\n  str = str.trim();\r\n  // 大写转小写\r\n  str = str.toLowerCase();\r\n  // 去除多余的空格\r\n  str = str.replace(/\\s+|\\n+/g, ' ');\r\n  // 特殊符号转 ,\r\n  str = specialSymbolToComma(str);\r\n  // 去重\r\n  str = [...new Set(str.split(','))];\r\n  return str.filter((item:string) => item !== '');\r\n};\r\n","\r\n/**\r\n * 判断数据是否存在\r\n * @param[value] 需要判断的数据\r\n * @param[returnType] 返回类型，默认返回 boolean\r\n * @return boolean || string\r\n */\r\nexport const isExistValue = (value: any, returnType = 'boolean') => {\r\n  let _value = '';\r\n  if(value === 0 || value === false || value) {\r\n    _value = value;\r\n  } else {\r\n    // null undefined ''\r\n    _value = '-';\r\n  }\r\n  // console.log(_value);\r\n  return (returnType === 'boolean') ? (_value !== '-') : _value\r\n};\r\n","/**\r\n * Better way to handle type checking\r\n * null, {}, array and date are objects, which confuses\r\n */\r\n\r\nexport type EnumUtilTypeOf =\r\n  'undefined'\r\n  | 'object'\r\n  | 'array'\r\n  | 'boolean'\r\n  | 'number'\r\n  | 'string'\r\n  | 'function'\r\n  | 'symbol'\r\n  | 'bigint';\r\n\r\nconst utilTypeOf = (input: any): EnumUtilTypeOf => {\r\n  const rawObject = Object.prototype.toString.call(input).toLowerCase();\r\n  const typeOfRegex = /\\[object (.*)]/g;\r\n  // @ts-ignore\r\n  return typeOfRegex.exec(rawObject)[1];\r\n}\r\n\r\nexport default utilTypeOf\r\n\r\n\r\n\r\n\r\n","/**\r\n * 判断函数参数是否为有效数据类型\r\n * @param[str] any 参数\r\n * @param[types] [any] 支持参数类型, 默认支持 ['string', 'number']\r\n * */\r\nimport utilTypeOf, { EnumUtilTypeOf } from \"./utilTypeOf\";\r\n\r\nexport type ValidParamsDefaultTypes = Array<EnumUtilTypeOf>;\r\n\r\nconst isValidParamsTypes = (str: any, types?: ValidParamsDefaultTypes) => {\r\n  let defaultTypes: ValidParamsDefaultTypes = ['string', 'number'];\r\n  if(utilTypeOf(types) !== 'array') {\r\n    types = defaultTypes;\r\n  }\r\n  return (types && types.includes(utilTypeOf(str)));\r\n}\r\n\r\nexport default isValidParamsTypes;\r\n","/**\r\n * 存储 localStorage\r\n * @param[name] storage 关键字\r\n * @param[data] storage 值\r\n * @return boolean  储存成功与否\r\n */\r\nexport const setLocalStorage = (name: string, data: any) => {\r\n  if(!name) return false;\r\n  if(typeof data !== 'string') {\r\n    data = JSON.stringify(data)\r\n  }\r\n  window.localStorage.setItem(name, data);\r\n  return true\r\n}\r\n\r\n/**\r\n * 获取localStorage\r\n * @param[name] storage 关键字\r\n * @return any  获取到的值\r\n */\r\nexport const getLocalStorage = (name: string) => {\r\n  if(!name) return undefined;\r\n  const value = window.localStorage.getItem(name);\r\n  try {\r\n    return JSON.parse(<string>value)\r\n  } catch (e) {\r\n    return value\r\n  }\r\n}\r\n\r\n/**\r\n * 删除localStorage\r\n * @param[name] storage 关键字\r\n * @return boolean 删除成功与否\r\n */\r\nexport const removeLocalStorage = (name: string) => {\r\n  if(!name) return false;\r\n  window.localStorage.removeItem(name);\r\n  return true\r\n}\r\n","/**\r\n * 存储 sessionStorage\r\n * @param[name] session关键字\r\n * @param[data] session值\r\n * @return boolean  储存成功与否\r\n */\r\nexport const setSessionStorage = (name: string, data: any) => {\r\n  if(!name) return undefined;\r\n  if(typeof data !== 'string') {\r\n    data = JSON.stringify(data)\r\n  }\r\n  window.sessionStorage.setItem(name, data);\r\n  return true\r\n}\r\n\r\n/**\r\n * 获取 sessionStorage\r\n * @param[name] session关键字\r\n * @return any  获取到的值\r\n */\r\nexport const getSessionStorage = (name: string) => {\r\n  if(!name) return false;\r\n  const value = window.sessionStorage.getItem(name);\r\n  try {\r\n    return JSON.parse(<string>value)\r\n  } catch (e) {\r\n    return value\r\n  }\r\n  // return value ? JSON.parse(value) : value\r\n}\r\n\r\n/**\r\n * 删除 sessionStorage\r\n * @param[name] session关键字\r\n * @return boolean 删除成功与否\r\n */\r\nexport const removeSessionStorage = (name: string) => {\r\n  if(!name) return false;\r\n  window.sessionStorage.removeItem(name);\r\n  return true\r\n}\r\n","/**\r\n * 语言类型\r\n * */\r\nexport enum EnumLanguageType {\r\n  en = 'en-US',\r\n  zh = 'zh-CN',\r\n}\r\n\r\n/**\r\n * 设置错误消息语言类型\r\n * */\r\nconst setErrorCodeLang = (lang: any = EnumLanguageType.zh) => {\r\n  if (lang === EnumLanguageType.en) {\r\n    return 'en';\r\n  }\r\n  return 'zh';\r\n};\r\n\r\nexport default setErrorCodeLang;\r\n","\r\n/**\r\n * 设置页面标题\r\n *\r\n * @param[title] 标题\r\n */\r\nexport function setHtmlTitle(title: string) {\r\n  document.title = title;\r\n}\r\n","import { isExistValue } from \"./isExistValue\";\r\n\r\n/**\r\n * 配置url参数\r\n *\r\n * @param[data] 参数\r\n */\r\nexport function setUrlParam(data: string) {\r\n  if(Object.prototype.toString.call(data) !== '[object Object]') {\r\n    return undefined\r\n  }\r\n  let keys = Object.keys(data);\r\n  let str = '';\r\n  keys.forEach(key => {\r\n    const value = data[key];\r\n    if(isExistValue(value)) {\r\n      if(str) {\r\n        str += '&'\r\n      }\r\n      str += `${key}=${value}`\r\n    }\r\n  });\r\n  return encodeURI(str);\r\n}\r\n","/**\r\n * 字符串 大小写转换\r\n * String to Case\r\n * */\r\nexport  const stringToLowerOrUpperCase = (str: any, toUpper?: boolean) => {\r\n  if (str && typeof str === 'string') {\r\n    return toUpper ? str.toUpperCase() : str.toLowerCase();\r\n  }\r\n  return str;\r\n};\r\n","/**\r\n * name：函数节流\r\n * description：函数触发后,如果函数还在执行中，就不再执行，\r\n * @params[fn]  回调函数\r\n * @params[delay]  定时器延时\r\n */\r\nexport const throttle = (fn = () => {\r\n}, delay = 200) => {\r\n  let timer: any = null;\r\n  return () => {\r\n    // 函数在执行中，无论触发几次都不执行。\r\n    if(timer) return;\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      fn && fn();\r\n      timer = null;\r\n    }, delay);\r\n  }\r\n};\r\n","/**\r\n * 标签语义化编译\r\n * @param[str]  str\r\n * eg: &lt;h1&gt; => <h1>\r\n * */\r\nexport default function unescape(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&quot;/g, '\"')\r\n    .replace(/&#x27;/g, \"'\")\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n    .replace(/&#x2F;/g, '/')\r\n    .replace(/&#x5C;/g, '\\\\')\r\n    .replace(/&#96;/g, '`')\r\n    .replace(/&amp;/g, '&'));\r\n  // &amp; replacement has to be the last one to prevent\r\n  // bugs with intermediate strings containing escape sequences\r\n  // See: https://github.com/validatorjs/validator.js/issues/1827\r\n}\r\n","\r\n\r\n/**\r\n * @names：模拟表单提交数据\r\n * @params[config] Object\r\n * */\r\nexport const utilsSubmitForm = (config: {\r\n  url: string;\r\n  method: string;\r\n  params: { [propName: string]: any };\r\n}) => {\r\n  config = config || {};\r\n  const action = config.url;\r\n  const method = config.method || 'POST';\r\n  const params = config.params || {};\r\n  const form = document.createElement('form');\r\n\r\n  form.style.display = 'none';\r\n  form.method = method;\r\n  form.action = action;\r\n  // form.target = '_blank';\r\n\r\n  for (let [key, value] of Object.entries(params)) {\r\n    const input: HTMLInputElement = document.createElement('input');\r\n    input.type = 'hidden';\r\n    input.name = key;\r\n    input.value = value;\r\n    form.appendChild(input);\r\n  }\r\n  /*for (let i = 0, j = params.length; i < j; i++) {\r\n    let input = document.createElement('input');\r\n    let item = params[i];\r\n    let key = item.key;\r\n    let value = item.value;\r\n    input.type = 'hidden';\r\n    input.name = key;\r\n    input.value = value;\r\n    form.appendChild(input);\r\n  }*/\r\n  document.body.appendChild(form);\r\n  form.submit();\r\n  document.body.removeChild(form);\r\n};\r\n","/**\r\n * 字符串 转 数组\r\n * String to Array\r\n * @param[str] 需要拆分的数据\r\n * @param[separator] 拆分标识符，默认 ,\r\n * */\r\nconst stringToArray = (str: any, separator?: string) => {\r\n  separator = separator || ','\r\n  if (typeof str === 'string') {\r\n    str = str.trim();\r\n    separator = separator || ',';\r\n    return str.split(separator || /\\s+/);\r\n  } else if (Array.isArray(str)) {\r\n    return str\r\n  } else if (typeof str === 'number' || typeof str === \"boolean\") {\r\n    return [str]\r\n  }\r\n  return [];\r\n};\r\n\r\nexport default stringToArray;\r\n","/**\r\n * 字符串格式判断\r\n * */\r\nconst utilToString = (input: any) => {\r\n  if(typeof input === 'object' && input !== null) {\r\n    if(typeof input.toString === 'function') {\r\n      input = input.toString();\r\n    } else {\r\n      input = '[object Object]';\r\n    }\r\n  } else if(input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {\r\n    input = '';\r\n  }\r\n  return String(input);\r\n}\r\n\r\nexport default utilToString\r\n","'use strict';\r\n\r\nimport { setErrorCodeLang } from '@/utils/_index';\r\nimport { isFQDNRes } from \"./typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    IP_SEGMENT_ERR_FORMAT: 'IP 格式错误',\r\n    IP_SEGMENT_NOT_SUPPORT_V6: '不支持IPV6网段',\r\n    IP_SEGMENT_ERR_TYPE: 'IP类型不一致',\r\n    IP_SEGMENT_ERR_SEGMENT: 'IP 不在同一网段',\r\n    IP_SEGMENT_ERR_RANGE: '结束IP不能小于起始IP',\r\n    IP_SEGMENT_SUCCESS: '校验成功',\r\n  },\r\n  en: {\r\n    IP_SEGMENT_ERR_FORMAT: 'Incorrect IP format',\r\n    IP_SEGMENT_NOT_SUPPORT_V6: 'Does not support IPV6',\r\n    IP_SEGMENT_ERR_TYPE: 'IP types are inconsistent',\r\n    IP_SEGMENT_ERR_SEGMENT: 'IP is not in the same network segment',\r\n    IP_SEGMENT_ERR_RANGE: 'The ending IP cannot be smaller than the starting IP',\r\n    IP_SEGMENT_SUCCESS: 'Verification succeeded',\r\n  },\r\n};\r\n\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\r\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp(\r\n  '^(' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\r\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n  ')(%[0-9a-zA-Z-.:]{1,})?$',\r\n);\r\n\r\nexport const isIPv4 = (s: string) => {\r\n  return IPv4Reg.test(s);\r\n};\r\n\r\nexport const isIPv6 = (s: string) => {\r\n  return IPv6Reg.test(s);\r\n};\r\n\r\nexport const isIP = (s: string) => {\r\n  if(isIPv4(s)) return 4;\r\n  if(isIPv6(s)) return 6;\r\n  return 0;\r\n};\r\n\r\n/**\r\n * IPV4 是否为同一网段判定\r\n * */\r\nexport const isSameIPV4Segment = (startIP: string, endIP: string, lang?: any): isFQDNRes => {\r\n  let errorMessage = errorCodes[setErrorCodeLang(lang)];\r\n\r\n  if(!isIPv4(startIP) || !isIPv4(endIP)) {\r\n    /** IP 格式错误 */\r\n    return {\r\n      success: false,\r\n      message: errorMessage.IP_SEGMENT_ERR_FORMAT,\r\n    };\r\n  }\r\n\r\n  /** IPV4 拆分 */\r\n  const ipV4Split = (ip: string) => {\r\n    // ip = 255.255.255.1\r\n    const slice_index = ip.lastIndexOf('.');\r\n    return {\r\n      // 255.255.255\r\n      ip_prefix: ip.slice(0, slice_index),\r\n      // 1\r\n      ip_suffix: ip.slice(slice_index + 1),\r\n    };\r\n  };\r\n  const start_ip = ipV4Split(startIP);\r\n  const end_ip = ipV4Split(endIP);\r\n  let msg_tips = {\r\n    success: false,\r\n    // IP 不在同一网段\r\n    message: errorMessage.IP_SEGMENT_ERR_SEGMENT,\r\n  };\r\n  if(start_ip.ip_prefix === end_ip.ip_prefix) {\r\n    if(start_ip.ip_suffix > end_ip.ip_suffix) {\r\n      // 起始IP不能大于结束IP\r\n      msg_tips.message = errorMessage.IP_SEGMENT_ERR_RANGE;\r\n    } else {\r\n      msg_tips = {\r\n        success: true,\r\n        // 校验成功,\r\n        message: errorMessage.IP_SEGMENT_SUCCESS,\r\n      };\r\n    }\r\n  }\r\n  return msg_tips;\r\n};\r\n","import setErrorCodeLang from '@/utils/setErrorCodeLang';\r\nimport filterStringSpace from '@/utils/filterStringSpace';\r\n\r\nimport { IsFQDNConfig, isFQDNRes } from './typings.d';\r\n\r\n/**\r\n * 域名格式校验 - 错误提示消息.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    DOMAIN_IS_EMPTY: '校验内容为空',\r\n    DOMAIN_FORMAT_ERROR: '域名格式错误',\r\n    DOMAIN_TOO_SHORT: '域名长度不能小于 1 个字符.',\r\n    DOMAIN_TOO_LONG: '域名长度不能超过 255 个字符.',\r\n    LABEL_STARTS_WITH_DASH: '域名标签不能以 . 开头.',\r\n    LABEL_ENDS_WITH_DASH: '域名标签不能以 . 结尾.',\r\n    LABEL_WITH_HYPHEN: '域名标签不能以 - 开头或结尾.',\r\n    LABEL_TOO_LONG: '域名标签的长度最多为 63 个字符.',\r\n    LABEL_TOO_SHORT: '域名标签应至少为 1 个字符长.',\r\n    LABEL_WITH_UNDERSCORES: '域名标签不能包含 _ ',\r\n    LABEL_ENDS_WITH_UNDERSCORES: '域名标签不能以 _ 结尾.',\r\n    LABEL_INVALID_CHARS:\r\n      '域名标签只能包含a-z、A-Z、0-9、-、_、.、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD不能包含数字.',\r\n    TLD_INVALID_CHARS: 'TLD格式错误.',\r\n  },\r\n  en: {\r\n    DOMAIN_IS_EMPTY: 'Check content is empty',\r\n    DOMAIN_FORMAT_ERROR: 'Domain name format error',\r\n    DOMAIN_TOO_SHORT: 'Domain name too short.',\r\n    DOMAIN_TOO_LONG:\r\n      'Domain name too long. It should be no more than 255 chars.',\r\n    LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\r\n    LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\r\n    LABEL_WITH_HYPHEN: 'Domain labels cannot start or end with -.',\r\n    LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\r\n    LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\r\n    LABEL_WITH_UNDERSCORES: 'Domain labels cannot contain _',\r\n    LABEL_ENDS_WITH_UNDERSCORES: 'Domain labels can not end with _',\r\n    LABEL_INVALID_CHARS:\r\n      'Domain name label can only contain a-z、A-Z、0-9、-、_、.、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD cannot contain numbers',\r\n    TLD_INVALID_CHARS: 'TLD format error',\r\n  },\r\n};\r\n\r\n/**\r\n * 域名格式校验 - 默认配置参数\r\n * FQDN：(Fully Qualified Domain Name)全限定域名：同时带有主机名和域名的名称。（通过符号“.”）\r\n * 例如：主机名是bigserver,域名是mycompany.com,那么FQDN就是bigserver.mycompany.com。 [1]\r\n * str: m.zdns.cn || zdns.cn. || h.m.zdns.cn.\r\n *\r\n * */\r\nconst default_fqdn_options = {\r\n  // 是否包含TLD\r\n  require_tld: true,\r\n  // 是否允许包含下划线\r\n  allow_underscores: true,\r\n  // 是否允许 . 号结尾\r\n  allow_trailing_dot: false,\r\n  // 是否允许纯数字TLD\r\n  allow_numeric_tld: false,\r\n  // 是否允许TLD包含 -\r\n  allow_hyphen_tld: false,\r\n  // 是否允许配符 *\r\n  allow_wildcard: false,\r\n};\r\n\r\n/**\r\n * 域名格式校验\r\n * FQDN：(Fully Qualified Domain Name)全限定域名：同时带有主机名和域名的名称。（通过符号“.”）\r\n * 例如：主机名是bigserver,域名是mycompany.com,那么FQDN就是bigserver.mycompany.com。 [1]\r\n * str: m.zdns.cn || zdns.cn. || h.m.zdns.cn.\r\n * */\r\nexport default function isFQDN(\r\n  str: any,\r\n  options: Partial<IsFQDNConfig> = {},\r\n  lang?: string,\r\n): isFQDNRes {\r\n  let errorMessage = errorCodes[setErrorCodeLang(lang)];\r\n  if(typeof str !== 'string') {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n    };\r\n  }\r\n  str = filterStringSpace(str, true);\r\n  options = {\r\n    ...default_fqdn_options,\r\n    ...options,\r\n  };\r\n  console.log(options);\r\n\r\n  if(!str) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_IS_EMPTY,\r\n    };\r\n  }\r\n\r\n  const len = str.length;\r\n  if(len > 255) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_LONG,\r\n    };\r\n  }\r\n\r\n  /* Remove the optional trailing dot before checking validity */\r\n  if(options.allow_trailing_dot && str[len - 1] === '.') {\r\n    str = str.substring(0, len - 1);\r\n  }\r\n\r\n  /* Remove the optional wildcard before checking validity */\r\n  if(options.allow_wildcard && str.indexOf('*.') === 0) {\r\n    str = str.substring(2);\r\n  }\r\n\r\n  const nodes = str.split('.');\r\n  console.log(nodes);\r\n  const node_len = nodes.length;\r\n  const max_node = 127;\r\n  if(options.require_tld) {\r\n    // disallow fqdns without tld\r\n    if(node_len < 2) {\r\n      // 域名格式错误  zdns.cn\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    if(node_len > max_node) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    const tld = nodes[node_len - 1];\r\n    // reject numeric TLDs\r\n    if(!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_WITH_NUMBER,\r\n      };\r\n    }\r\n\r\n    let tldReg = /^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i;\r\n    if(options.allow_hyphen_tld) {\r\n      tldReg = /^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF-]{2,})$/i;\r\n    }\r\n\r\n    if(!tldReg.test(tld)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_INVALID_CHARS,\r\n      };\r\n    }\r\n  } else {\r\n    if(node_len > max_node - 1) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n  }\r\n  for (let i = 0; i < node_len; i++) {\r\n    const label = nodes[i];\r\n    console.log(label);\r\n    if(label.length > 63) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_TOO_LONG,\r\n      };\r\n    }\r\n    // \\u4E00-\\u9FA5 \\u00a1-\\uffff\r\n    if(!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow full-width chars\r\n    if(/[\\uff01-\\uff5e]/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow node starting or ending with hyphen\r\n    if(/^-|-$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_HYPHEN,\r\n      };\r\n    }\r\n\r\n    if(!options.allow_underscores && /_/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n\r\n    // disallow node ending with _\r\n    if(/_$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_ENDS_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    success: true,\r\n    message: '',\r\n  };\r\n}\r\n","import isFQDN from './isFQDN'\r\nimport { IsFQDNConfig, isFQDNRes } from \"./typings.d\";\r\n\r\n/**\r\n * 域名合法性校验\r\n * */\r\ninterface IsDomainConfig {\r\n  str: string;\r\n  lang?: string;\r\n  config?: Partial<IsFQDNConfig>;\r\n}\r\n\r\nconst isDomain = ({ str, lang, config = {} }: IsDomainConfig = { str: '' }): isFQDNRes => {\r\n  return isFQDN(str, {\r\n    require_tld: true,\r\n    // 是否允许包含下划线\r\n    allow_underscores: true,\r\n    // 是否允许 . 号结尾\r\n    allow_trailing_dot: false,\r\n    // 是否允许数字TLD号结尾\r\n    allow_numeric_tld: false,\r\n    // 是否运通配符 *\r\n    allow_wildcard: false,\r\n    ...config\r\n  }, lang);\r\n};\r\nexport default isDomain\r\n","import {isNumber} from \"@/utils/isNumber\";\r\n\r\n/**\r\n * 数字取值范围校验\r\n * @param[str] 数值\r\n * @param[min] 最小值\r\n * @param[max] 最大值\r\n * */\r\nconst isInRange = (str: any, min: number, max: number) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  const val = Number(str);\r\n  return val >= min && val <= max;\r\n};\r\n\r\nexport default isInRange\r\n","import isInRange from \"../isInRange\";\r\n\r\n/**\r\n * 端口号校验\r\n * */\r\nconst isPort = (str: any) => {\r\n  return isInRange(str, 1, 65535);\r\n};\r\n\r\nexport default isPort;\r\n","/**\r\n * MX【邮件交换记录 - Mail Exchanger】  => 将域名指向邮件服务器地址\r\n *  使用场景：设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为mail exchanger，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给“vincen@example.com”时，系统将对“example.com”进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。\r\n *  主机记录：一般是指子域名的前缀，（要做xxx@dns-example.com的邮箱，所以主机记录输入“ @ ”；要做xxx@mail.dns-example.com，如果主机记录填 mail）。\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析，邮件无法收取；\r\n *  记录值：输入内容通过联系邮箱注册商提供。例如阿里云邮提供的需要配置的解析记录值是 mx1.qiye.aliyun.com；\r\n *  MX优先级：输入内容通过联系邮箱注册商提供，MX 优先级的数值越低，优先级别就越高（如下图，邮件会先尝试发送到 MX 优先级为 5 的mx1.qiye.aliyun.com，如果尝试失败，才会发送到 MX 优先级为10 的mx2.qiye.aliyun.com）。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\nimport isDomain from '../http/isDomain';\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR: 'MX记录的记录值为域名形式（如: abc.example.com）',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR:\r\n      'The MX record value is in the domain name format (eg: abc.example.com).',\r\n  },\r\n};\r\n\r\nconst isMX = (str: string, lang?: string): isFQDNRes => {\r\n  // 过滤全部空格\r\n  let regValue = filterStringSpace(str, true);\r\n  const error_code = errorCodes[setErrorCodeLang(lang)];\r\n  const { success } = isDomain({\r\n    str: regValue,\r\n    lang,\r\n    config: {\r\n      allow_trailing_dot: true\r\n    }\r\n  });\r\n  return {\r\n    success: success,\r\n    message: success ? '' : error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isMX;\r\n","/**\r\n * TXT  => 文本长度限制512，通常做SPF记录（反垃圾邮件）\r\n *  使用场景：如果希望对域名进行标识和说明，可以使用 TXT 记录， TXT 记录多用来做 SPF 记录（反垃圾邮件）。\r\n *  主机记录：一般是指子域名的前缀（如需为子域名为 www.dns-example.com 添加 TXT 记录， 主机记录输入 www；如需为dns-example.com添加TXT记录，主机记录输入 @）\r\n *  解析线路：默认 为必选项，未设置会导致部分用户无法解析。\r\n *  记录值：常用情况TXT 记录是用来做 SPF 反垃圾邮件的，最典型的 SPF 格式的 TXT 记录例子为“v=spf1 a mx ~all”，表示只有这个域名的 A 记录和 MX 记录中的 IP 地址有权限使用这个域名发送邮件。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * TXT记录，一般指某个主机名或域名的标识和说明。\r\n * 如：admin IN TXT \"管理员, 电话：XXXXXXXXXXX\"，mail IN TXT \"邮件主机，存放在xxx , 管理人：AAA\"，Jim IN TXT \"contact: abc@mailserver.com\"，也就是说，通过设置TXT记录内容可以使别人更方便地联系到你。TXT 记录常用的方式还有做 SPF 记录（反垃圾邮件）和SSL证书的DNS验证等。\r\n * */\r\n\r\ninterface Default_Option {\r\n  min: number;\r\n  max: number;\r\n  lang: string;\r\n}\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    TOO_LONG: 'TXT记录值长度限制 255 个字符.',\r\n  },\r\n  en: {\r\n    TOO_LONG: 'The TXT record value must be 1 to 255 characters in length.',\r\n  },\r\n};\r\n\r\nconst isTXT = (str: string, option: Partial<Default_Option> = {}): isFQDNRes => {\r\n  const min = option.min || 1;\r\n  const max = option.min || 255;\r\n  const error_code = errorCodes[setErrorCodeLang(option.lang)];\r\n  const success = !(str.length > max || str.length < min);\r\n  return {\r\n    success,\r\n    message: success ? '' : error_code.TOO_LONG,\r\n    regValue: str,\r\n  };\r\n};\r\nexport default isTXT;\r\n","/**\r\n * NS【Name Server - 域名服务器记录】  => 将子域名指定其他DNS服务器解析\r\n *  使用场景：如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。\r\n *  主机记录：一般是指子域名的前缀（如需将子域名为www.dns-example.com 的解析授权给腾讯云解析的DNS服务器进行解析管理，只需要在主机记录处填写 www 即可）。\r\n *  解析线路：默认为必填项，未设置默认线路会导致部分用户无法解析。\r\n *  记录值：记录值为要授权的 DNS 服务器域名，例如腾讯云解析的DNS服务器域名f1g1ns1.dnspod.net。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from '../http/isDomain';\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR: 'NS记录的记录值为域名形式（如: ns1.example.com）',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR:\r\n      'The NS record value is in the domain name format (eg: ns1.example.com).',\r\n  },\r\n};\r\n\r\nconst isNS = (str: string, lang?: string): isFQDNRes => {\r\n  // 过滤全部空格\r\n  let regValue = filterStringSpace(str, true);\r\n  const error_code = errorCodes[setErrorCodeLang(lang)];\r\n  const { success } = isDomain({\r\n    str: regValue,\r\n    lang,\r\n    config: {\r\n      allow_trailing_dot: true\r\n    }\r\n  });\r\n  return {\r\n    success: success,\r\n    message: success ? '' : error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isNS;\r\n","/**\r\n * CAA  =>  CA证书颁发机构授权校验\r\n *  使用场景： CAA(Certificate Authority Authorization)，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。\r\n *  域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。\r\n *  CAA记录的格式为： [flag] [tag] [value]，是由一个标志字节的[flag]和一个被称为属性的[tag]-[value]（标签-值）对组成。您可以将多个CAA字段添加到域名的DNS记录中。\r\n * ------> [flag]：无符号整数（目前仅支持0和128），用于标志认证机构。通常情况下填0，表示如果颁发证书机构无法识别本条信息，就忽略。\r\n * ------> [tag]：支持 issue、issuewild 和 iodef。\r\n * --------> issue：CA授权单个证书颁发机构发布的 任何类型 域名证书。\r\n * --------> issuewild：CA授权单个证书颁发机构发布主机名的 通配符 证书。\r\n * --------> iodef：CA可以将违规的颁发记录URL发送给某个电子邮箱。\r\n * ------> [value]： CA的域名或用于违规通知的电子邮箱。\r\n */\r\n\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport stringToArray from \"@/utils/stringToArray\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport isInRange from \"@/validator/isInRange\";\r\n\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR: 'CAA记录的记录值为字符串形式, 如：0 issue \"ca.example.com\"',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR:\r\n      'Specify your CAA Record value as a string, (eg: 0 issue \"ca.example.com\" ).',\r\n  },\r\n};\r\n\r\n// （如：0 iodef \"mailto:admin@dns-example.com\"）\r\n// （如：0 issue \"symantec.com\"）\r\nconst isCAA = (str: any, lang?: string): isFQDNRes => {\r\n  const caaValueRegex = /^\"[\\w-:./@]{1,255}\"$/;\r\n  const caaTags = ['issue', 'issuewild', 'iodef'];\r\n  // 过滤多余的空格文本\r\n  const regValue = filterStringSpace(str, true);\r\n  const values = stringToArray(regValue);\r\n  console.log(values);\r\n  const success =\r\n    values.length === 3 &&\r\n    isInRange(values[0], 0, 128) &&\r\n    caaTags.indexOf(values[1]) !== -1 &&\r\n    caaValueRegex.test(values[2]);\r\n  const error_code = errorCodes[setErrorCodeLang(lang)];\r\n  return {\r\n    success,\r\n    message: success ? '' : error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isCAA;\r\n","import filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport stringToArray from \"@/utils/stringToArray\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport isInRange from \"@/validator/isInRange\";\r\nimport isPort from \"@/validator/http/isPort\";\r\nimport isDomain from \"@/validator/http/isDomain\";\r\n\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * SRV【服务定位（SRV）资源记录】  => 记录提供特定的服务的服务器\r\n *  使用场景： SRV 记录用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。\r\n *  主机记录： 格式为 服务的名字.协议的类型。\r\n *    例如：_sip._tcp\r\n *  解析线路： 默认 为必选项，未设置默认线路会导致部分用户无法解析\r\n *  记录值： 格式为 【优先级】 【权重】 【端口】 目标地址 ，每项中间需以空格分隔。\r\n *    例如：0 5 5060 sipserver.example.com\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n\r\n * */\r\n/**\r\n * Error codes and messages.\r\n * */\r\n\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR:\r\n      'SRV记录格式为： 优先级 权重 端口 目标地址 ，每项中间需以空格分隔。例如 “0 5 5060 sipserver.example.com”。',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR:\r\n      'The format of an SRV record is: [Priority] [Weight] [Port number] [Target address]. Separate the priority, weight, port number, and target address with spaces. Example: 0 5 5060 sipserver.example.com',\r\n  },\r\n};\r\n\r\n\r\nconst isSRV = (str: string, lang?: string): isFQDNRes => {\r\n  // 过滤多余的空格文本\r\n  const regValue = filterStringSpace(str);\r\n  const values = stringToArray(regValue);\r\n  console.log(values);\r\n  const error_code = errorCodes[setErrorCodeLang(lang)];\r\n  if(values.length === 4) {\r\n    const priority = values[0];\r\n    const weight = values[1];\r\n    const port = values[2];\r\n    const domain = values[3];\r\n    console.log(`priority: ${priority}, weight: ${weight}, port: ${port}, domain: ${domain}`);\r\n    const { success } = isDomain({\r\n      str: regValue,\r\n      lang,\r\n      config: {\r\n        allow_trailing_dot: true\r\n      }\r\n    });\r\n    // console.log(isInRange(priority, 0, 65535));\r\n    // console.log(isInRange(values[1], 0, 65535));\r\n    // console.log(isPort(values[2]));\r\n    const _success =\r\n      isInRange(priority, 0, 65535) &&\r\n      isInRange(weight, 0, 65535) &&\r\n      isPort(port) &&\r\n      success;\r\n    return {\r\n      success: _success,\r\n      message: _success ? '' : error_code.FORMAT_ERROR,\r\n      regValue,\r\n    };\r\n  }\r\n  return {\r\n    success: false,\r\n    message: error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isSRV\r\n","/**\r\n * A记录【Address】 => 将域名指向一个IPV4地址\r\n *  使用场景: 添加 A 记录可实现将域名指向 IP 地址。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）。\r\n *  解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。\r\n *  记录值：记录值为 IP 地址，填写 IPv4 地址。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport { isIPv4 } from '@/validator/http/IP';\r\n\r\nimport { isFQDNRes } from \"../http/typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR: 'A记录的记录值为IPv4形式（如: 10.10.10.10）',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR: 'The A record value is in the IPv4 format (eg: 10.10.10.10).',\r\n  },\r\n};\r\n\r\nconst isA = (str: string, lang?: string): isFQDNRes => {\r\n  // 过滤全部空格\r\n  let regValue = filterStringSpace(str);\r\n  let error_code = errorCodes[setErrorCodeLang(lang)];\r\n  const success = !!regValue && isIPv4(regValue);\r\n  return {\r\n    success,\r\n    message: success ? '' : error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isA;\r\n","/**\r\n * AAAA【AAAA record】  => 将域名指向一个IPV6地址\r\n * 使用场景：当预期是实现访问者通过 IPv6 地址访问网站，可以使用 AAAA 记录实现。\r\n * 主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）\r\n * 解析线路：默认为必选项，未设置会导致部分用户无法访问；\r\n * 记录值：记录值为IP地址，填写 IPV6 地址\r\n * TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport { isIPv6 } from '@/validator/http/IP';\r\n\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR: 'AAAA记录的记录值为IPv6形式（如: ff03:0:0:0:0:0:0:c1）',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR:\r\n      'The AAAA record value is in the IPv6 format (eg: ff03:0:0:0:0:0:0:c1).',\r\n  },\r\n};\r\n\r\nconst isAAAA = (str: string, lang?: string): isFQDNRes => {\r\n  // 过滤全部空格\r\n  let regValue = filterStringSpace(str);\r\n  const error_code = errorCodes[setErrorCodeLang(lang)];\r\n  const success = !!regValue && isIPv6(regValue);\r\n  return {\r\n    success,\r\n    message: success ? '' : error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isAAAA;\r\n","/**\r\n * CNAME【别名解析 - Canonical Name】  => 将域名指向另外一个域名\r\n *  使用场景: 当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入“ www”；如需实现dns-example.com的解析，主机记录输入“@”）\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析。\r\n *  记录值：记录值为 CNAME 指向的域名，只可以填写域名。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\nimport isDomain from '../http/isDomain';\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\nimport setErrorCodeLang from \"@/utils/setErrorCodeLang\";\r\nimport { isFQDNRes } from \"@/validator/http/typings.d\";\r\n\r\n/**\r\n * Error codes and messages.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    FORMAT_ERROR: 'CNAME记录的记录值为域名形式（如: abc.example.com）',\r\n  },\r\n  en: {\r\n    FORMAT_ERROR:\r\n      'The Canonical Name value is in the domain name format (eg: abc.example.com).',\r\n  },\r\n};\r\n\r\nconst isCNAME = (str: string, lang?: string): isFQDNRes => {\r\n  // 过滤全部空格\r\n  let regValue = filterStringSpace(str, true);\r\n  const { success } = isDomain({\r\n    str: regValue,\r\n    lang,\r\n    config: {\r\n      allow_trailing_dot: true\r\n    }\r\n  });\r\n  const error_code = errorCodes[setErrorCodeLang(lang)];\r\n  return {\r\n    success: success,\r\n    message: success ? '' : error_code.FORMAT_ERROR,\r\n    regValue,\r\n  };\r\n};\r\n\r\nexport default isCNAME;\r\n","/**\r\n * 域名解析记录公共校验\r\n *\r\n * */\r\n\r\nimport isMX from \"./isMX\";\r\nimport isTXT from \"./isTXT\";\r\nimport isNS from \"./isNS\";\r\nimport isCAA from \"./isCAA\";\r\nimport isSRV from \"./isSRV\";\r\nimport isA from \"@/validator/rr/isA\";\r\nimport isAAAA from \"@/validator/rr/isAAAA\";\r\nimport isCNAME from \"@/validator/rr/isCNAME\";\r\nimport { isFQDNRes } from \"../http/typings.d\";\r\n\r\nexport const enum EnumRecordType {\r\n  A = \"A\",\r\n  AAAA = \"AAAA\",\r\n  NS = \"NS\",\r\n  MX = \"MX\",\r\n  CNAME = \"CNAME\",\r\n  CAA = \"CAA\",\r\n  SRV = \"SRV\",\r\n  TXT = \"TXT\"\r\n}\r\n\r\n/**\r\n * 域名解析记录公共校验\r\n * @param[str] 校验值\r\n * @param[type] 校验类型\r\n * */\r\nexport const isRdata = (str: any,\r\n                        type: EnumRecordType,\r\n                        lang?: string): isFQDNRes => {\r\n  switch (type.toUpperCase()) {\r\n    case EnumRecordType.A:\r\n      return isA(str, lang);\r\n    case EnumRecordType.AAAA:\r\n      return isAAAA(str, lang);\r\n    case EnumRecordType.CAA:\r\n      return isCAA(str, lang);\r\n    case EnumRecordType.CNAME:\r\n      return isCNAME(str, lang);\r\n    case EnumRecordType.MX:\r\n      return isMX(str, lang);\r\n    case EnumRecordType.NS:\r\n      return isNS(str, lang);\r\n    case EnumRecordType.SRV:\r\n      return isSRV(str, lang);\r\n    case EnumRecordType.TXT:\r\n      return isTXT(str, { lang });\r\n    default:\r\n      return { success: false, message: '未知记录类型！', regValue: str };\r\n  }\r\n};\r\n","import isFQDN from \"../http/isFQDN\";\r\n\r\n/**\r\n * 主机合法性校验\r\n * */\r\nconst isHost = (str: string) => {\r\n  const specialHosts = '@';\r\n  if(str.indexOf(specialHosts) > -1) {\r\n    return true;\r\n  }\r\n  const { success } = isFQDN(str, {\r\n    // 是否包含TLD\r\n    require_tld: true,\r\n    // 是否允许包含下划线\r\n    allow_underscores: true,\r\n    // 是否允许 . 号结尾\r\n    allow_trailing_dot: false,\r\n    // 是否允许数字TLD号结尾\r\n    allow_numeric_tld: false,\r\n    // 是否运通配符 *\r\n    allow_wildcard: false\r\n  })\r\n  return success;\r\n};\r\n\r\nexport default isHost\r\n","import { isNumber } from \"@/utils/isNumber\";\r\n\r\n/**\r\n * TTL【Time-To-Live】 => 为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *  TTL值是指全国各地的localdns服务器中缓存解析结果的时间周期。\r\n *  1 . 当各地的localdns服务器接接收到解析请求查询时，就会向权威DNS（例如云解析DNS）发起解析请求查询，获取到解析结果。\r\n *  2 . localdns会将查询到的解析结果，保存到本地一段时间。保存的这个时间周期，就是根据TTL设置而来的。在保存的这个时间周期内，如果各地localdns再接收到此域名的解析请求查询，是不会再向权威DNS发起请求查询的，而是直接将本地保存的解析结果返回给用户。\r\n *  3 . 当localdns本地缓存的时间到期后，就会清除该解析记录的缓存结果，清除后，如果各地localdns再接收到此域名的解析请求查询，则会重新向权威DNS（例如云解析DNS）发起解析请求查询，获取最新的解析结果。\r\n *\r\n *  */\r\nconst isTTL = (str: any, min = 0, max = 65535) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  const ttl = Number(str);\r\n  const minTTL = 0;\r\n  const maxTTL = 65535;\r\n\r\n  if(ttl < minTTL || ttl > maxTTL) {\r\n    return false\r\n  }\r\n\r\n  return ttl >= min && ttl <= max;\r\n};\r\n\r\nexport default isTTL\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n// is zone\r\nconst isZone = (str: string, lang?: string) => {\r\n  const rootZone = '.';\r\n  if(rootZone === str) {\r\n    return true;\r\n  }\r\n  const { success } = isDomain({\r\n    str,\r\n    lang,\r\n    config: {\r\n      allow_trailing_dot: true\r\n    }\r\n  });\r\n  return success;\r\n};\r\n\r\nexport default isZone\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n\r\n/**\r\n * 银行卡号合法性验证\r\n * @param[str] any 银行卡\r\n * description： 15位或者16位或者19位\r\n * */\r\nconst IsBankCard = (str: any) => {\r\n  // 建行16、19，农行19，工行19、交通17、民生16、兴业18、招行12、16、19\r\n  const reg = /^([1-9]{1})(\\d{11}|\\d{15}|\\d{16}|\\d{17}|\\d{18})$/;\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  return reg.test(str)\r\n}\r\n\r\nexport default IsBankCard\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 布尔值判断\r\n * @param[str]: 布尔值\r\n * @param[extend]: 是否支持拓展\r\n * @param[trueBooleans]: 拓展布尔值\r\n * */\r\nconst isBooleanTrue = (str: any, extend: Boolean, trueBooleans = ['yes', 'true', '1']) => {\r\n  const type_str = typeof str;\r\n  if(type_str === 'boolean') {\r\n    return str\r\n  }\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  if(extend) {\r\n    str = `${str}`.toLowerCase()\r\n    return trueBooleans.includes(str);\r\n  }\r\n}\r\n\r\nexport default isBooleanTrue\r\n","/**\r\n * 子节长度判断\r\n *@param[str] any 字符串\r\n *@param[option] 参数 {min: number, max:number}\r\n * */\r\nexport interface IsByteLengthOptions {\r\n  min?: number;\r\n  max: number;\r\n}\r\n\r\nexport default function isByteLength(str: any, options: IsByteLengthOptions) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  let min;\r\n  let max;\r\n  if(typeof (options) === 'object') {\r\n    min = options.min || 0;\r\n    max = options.max;\r\n  } else {\r\n    // backwards compatibility: isByteLength(str, min [, max])\r\n    min = arguments[1];\r\n    max = arguments[2];\r\n  }\r\n  const len = encodeURI(str).split(/%..|./).length - 1;\r\n  return len >= min && (typeof max === 'undefined' || len <= max);\r\n}\r\n\r\n","/**\r\n *\r\n * 手机格式校验\r\n * @param[str]: 手机号\r\n * */\r\nconst isCellPhone = function (str: any) {\r\n  try {\r\n    const reg = /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/;\r\n    return reg.test(str);\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default isCellPhone\r\n","/* eslint-disable max-len */\r\nconst creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;\r\n/* eslint-enable max-len */\r\n\r\n/**\r\n * 信用卡格式验证\r\n * @param[str] 校验字符串\r\n * */\r\nexport default function isCreditCard(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += str;\r\n  const sanitized = str.replace(/[- ]+/g, '');\r\n  if(!creditCard.test(sanitized)) {\r\n    return false;\r\n  }\r\n  let sum = 0;\r\n  let digit;\r\n  let tmpNum;\r\n  let shouldDouble;\r\n  for (let i = sanitized.length - 1; i >= 0; i--) {\r\n    digit = sanitized.substring(i, (i + 1));\r\n    tmpNum = parseInt(digit, 10);\r\n    if(shouldDouble) {\r\n      tmpNum *= 2;\r\n      if(tmpNum >= 10) {\r\n        sum += ((tmpNum % 10) + 1);\r\n      } else {\r\n        sum += tmpNum;\r\n      }\r\n    } else {\r\n      sum += tmpNum;\r\n    }\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n  return !!((sum % 10) === 0 ? sanitized : false);\r\n}\r\n","/**\r\n *\r\n * 邮箱格式正则校验\r\n * @param[str] 邮箱\r\n * */\r\nconst isEmail = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  // 用户名@主机名”\r\n  const reg = /^(?!.*?[._-]{2})[a-z0-9][a-z0-9._-]{0,62}[a-z0-9]@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]{2,63}$/i;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isEmail\r\n","\r\n/**\r\n * @names：判断数组是否为空数据\r\n * @params[data] Array\r\n * */\r\nexport const isEmptyArray = (data: any): boolean => {\r\n  return !Array.isArray(data) || !data.length\r\n};\r\n\r\n","import { filterStringSpace, isValidParamsTypes } from \"@/utils/_index\";\r\n\r\n\r\n/**\r\n * 判断字符串是否为空值\r\n * @param[str] 需要判断的值\r\n * @param[ignoreSpace] boolean 是否忽略空格\r\n * */\r\nexport const isEmptyStr = (str: any, ignoreSpace: boolean): boolean => {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  str = `${str}`;\r\n\r\n  if(!ignoreSpace) {\r\n    str = filterStringSpace(str)\r\n  }\r\n  return !(str.length === 0);\r\n}\r\n","/**\r\n * 以太坊地址校验\r\n * @param[str] 以太坊地址\r\n * */\r\nconst isEthereumAddress = (str: any) => {\r\n  const ethReg = /^(0x)[0-9a-f]{40}$/i;\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  return ethReg.test(str);\r\n}\r\nexport default isEthereumAddress\r\n","/**\r\n * @names：文本是否存在\r\n * @params[str] string\r\n * @return string\r\n * */\r\nimport { filterStringSpace } from '@/utils/_index';\r\n\r\nconst isExistString = (str: any): undefined | string => {\r\n  if(typeof str === 'string') {\r\n    return filterStringSpace(str);\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport default isExistString;\r\n","/**\r\n *\r\n * 固定电话格式校验\r\n * @param[str]: 电话\r\n * eg: (0827-7977654) || (7977654)\r\n * */\r\nconst  isFixedPhone = (str: string) => {\r\n  const reg = /^(\\d{3,4}-|\\s)?\\d{7,14}$/;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isFixedPhone\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 是否为整数判断\r\n * @param[str] 数值\r\n * @param[options] 参数\r\n *\r\n * */\r\nexport default function isInt(str: any, options?: {\r\n  allow_leading_zeroes?: Boolean,\r\n  min?: number;\r\n  max?: number;\r\n  lt?: number;\r\n  gt?: number;\r\n}) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  const int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\r\n  const intLeadingZeroes = /^[-+]?[0-9]+$/;\r\n\r\n  options = options || {};\r\n\r\n  // Get the regex to use for testing, based on whether\r\n  // leading zeroes are allowed or not.\r\n  let regex = (\r\n    options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ?\r\n      int : intLeadingZeroes\r\n  );\r\n\r\n  // Check min/max/lt/gt\r\n  let minCheckPassed = (!options.hasOwnProperty('min') || (typeof options.min !== 'undefined' && str >= options.min));\r\n  let maxCheckPassed = (!options.hasOwnProperty('max') || (typeof options.max !== 'undefined' && str <= options.max));\r\n  let ltCheckPassed = (!options.hasOwnProperty('lt') || (typeof options.lt !== 'undefined' && str < options.lt));\r\n  let gtCheckPassed = (!options.hasOwnProperty('gt') || (typeof options.gt !== 'undefined' && str > options.gt));\r\n\r\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\r\n}\r\n","import isInt from './isInt';\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 证件号码验证函数\r\n *\r\n * */\r\n\r\nconst identityCardValidators = {\r\n  PL: (str: string) => {\r\n    const weightOfDigits = {\r\n      1: 1,\r\n      2: 3,\r\n      3: 7,\r\n      4: 9,\r\n      5: 1,\r\n      6: 3,\r\n      7: 7,\r\n      8: 9,\r\n      9: 1,\r\n      10: 3,\r\n      11: 0,\r\n    };\r\n\r\n    if(str != null && str.length === 11 && isInt(str, { allow_leading_zeroes: true })) {\r\n      const digits = str.split('').slice(0, -1);\r\n      const sum = digits.reduce((acc, digit, index) =>\r\n        acc + (Number(digit) * weightOfDigits[index + 1]), 0);\r\n\r\n      const modulo = sum % 10;\r\n      const lastDigit = Number(str.charAt(str.length - 1));\r\n\r\n      if((modulo === 0 && lastDigit === 0) || lastDigit === 10 - modulo) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  ES: (str: string) => {\r\n    const DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;\r\n\r\n    const charsValue = {\r\n      X: 0,\r\n      Y: 1,\r\n      Z: 2,\r\n    };\r\n\r\n    const controlDigits = [\r\n      'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',\r\n      'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    // validate the control digit\r\n    const number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, char => charsValue[char]);\r\n\r\n    // @ts-ignore\r\n    return sanitized.endsWith(controlDigits[number % 23]);\r\n  },\r\n  FI: (str: string) => {\r\n    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated\r\n    if(str.length !== 11) {\r\n      return false;\r\n    }\r\n\r\n    if(!str.match(/^\\d{6}[\\-A\\+]\\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {\r\n      return false;\r\n    }\r\n\r\n    const checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';\r\n\r\n    const idAsNumber = (parseInt(str.slice(0, 6), 10) * 1000) + parseInt(str.slice(7, 10), 10);\r\n    const remainder = idAsNumber % 31;\r\n    const checkDigit = checkDigits[remainder];\r\n\r\n    return checkDigit === str.slice(10, 11);\r\n  },\r\n  IN: (str: string) => {\r\n    const DNI = /^[1-9]\\d{3}\\s?\\d{4}\\s?\\d{4}$/;\r\n\r\n    // multiplication table\r\n    const d = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],\r\n      [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],\r\n      [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],\r\n      [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],\r\n      [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],\r\n      [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],\r\n      [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],\r\n      [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],\r\n      [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\r\n    ];\r\n\r\n    // permutation table\r\n    const p = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],\r\n      [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],\r\n      [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],\r\n      [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],\r\n      [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],\r\n      [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],\r\n      [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    let c = 0;\r\n    let invertedArray = sanitized.replace(/\\s/g, '').split('').map(Number).reverse();\r\n\r\n    invertedArray.forEach((val, i) => {\r\n      c = d[c][p[(i % 8)][val]];\r\n    });\r\n\r\n    return c === 0;\r\n  },\r\n  IR: (str: string) => {\r\n    if(!str.match(/^\\d{10}$/)) return false;\r\n    str = (`0000${str}`).substr(str.length - 6);\r\n\r\n    if(parseInt(str.substr(3, 6), 10) === 0) return false;\r\n\r\n    const lastNumber = parseInt(str.substr(9, 1), 10);\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      sum += parseInt(str.substr(i, 1), 10) * (10 - i);\r\n    }\r\n\r\n    sum %= 11;\r\n\r\n    return (\r\n      (sum < 2 && lastNumber === sum) || (sum >= 2 && lastNumber === 11 - sum)\r\n    );\r\n  },\r\n  IT: function IT(str: string) {\r\n    if(str.length !== 9) return false;\r\n    if(str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana\r\n    return str.search(/C[A-Z]\\d{5}[A-Z]{2}/is) > -1;\r\n  },\r\n  NO: (str: string) => {\r\n    const sanitized = str.trim();\r\n    if(isNaN(Number(sanitized))) return false;\r\n    if(sanitized.length !== 11) return false;\r\n    if(sanitized === '00000000000') return false;\r\n\r\n    // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer\r\n    const f = sanitized.split('').map(Number);\r\n    let k1 = (11 - (((3 * f[0]) + (7 * f[1]) + (6 * f[2])\r\n      + (1 * f[3]) + (8 * f[4]) + (9 * f[5]) + (4 * f[6])\r\n      + (5 * f[7]) + (2 * f[8])) % 11)) % 11;\r\n    let k2 = (11 - (((5 * f[0]) + (4 * f[1]) + (3 * f[2])\r\n      + (2 * f[3]) + (7 * f[4]) + (6 * f[5]) + (5 * f[6])\r\n      + (4 * f[7]) + (3 * f[8]) + (2 * k1)) % 11)) % 11;\r\n\r\n    if(k1 !== f[9] || k2 !== f[10]) return false;\r\n    return true;\r\n  },\r\n  TH: (str: string) => {\r\n    if(!str.match(/^[1-8]\\d{12}$/)) return false;\r\n\r\n    // validate check digit\r\n    let sum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n      sum += parseInt(str[i], 10) * (13 - i);\r\n    }\r\n    return str[12] === ((11 - (sum % 11)) % 10).toString();\r\n  },\r\n  LK: (str: string) => {\r\n    const old_nic = /^[1-9]\\d{8}[vx]$/i;\r\n    const new_nic = /^[1-9]\\d{11}$/i;\r\n\r\n    if(str.length === 10 && old_nic.test(str)) return true;\r\n    else if(str.length === 12 && new_nic.test(str)) return true;\r\n    return false;\r\n  },\r\n  'he-IL': (str: string) => {\r\n    const DNI = /^\\d{9}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    const id = sanitized;\r\n\r\n    let sum = 0,\r\n      incNum;\r\n    for (let i = 0; i < id.length; i++) {\r\n      incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2\r\n      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total\r\n    }\r\n    return sum % 10 === 0;\r\n  },\r\n  'ar-LY': (str: string) => {\r\n    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2\r\n    const NIN = /^(1|2)\\d{11}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!NIN.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'ar-TN': (str: string) => {\r\n    const DNI = /^\\d{8}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'zh-CN': (str: string) => {\r\n    const provincesAndCities = [\r\n      '11', // 北京\r\n      '12', // 天津\r\n      '13', // 河北\r\n      '14', // 山西\r\n      '15', // 内蒙古\r\n      '21', // 辽宁\r\n      '22', // 吉林\r\n      '23', // 黑龙江\r\n      '31', // 上海\r\n      '32', // 江苏\r\n      '33', // 浙江\r\n      '34', // 安徽\r\n      '35', // 福建\r\n      '36', // 江西\r\n      '37', // 山东\r\n      '41', // 河南\r\n      '42', // 湖北\r\n      '43', // 湖南\r\n      '44', // 广东\r\n      '45', // 广西\r\n      '46', // 海南\r\n      '50', // 重庆\r\n      '51', // 四川\r\n      '52', // 贵州\r\n      '53', // 云南\r\n      '54', // 西藏\r\n      '61', // 陕西\r\n      '62', // 甘肃\r\n      '63', // 青海\r\n      '64', // 宁夏\r\n      '65', // 新疆\r\n      '71', // 台湾\r\n      '81', // 香港\r\n      '82', // 澳门\r\n      '91', // 国外\r\n    ];\r\n\r\n    const powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];\r\n\r\n    const parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\r\n\r\n    // @ts-ignore\r\n    const checkAddressCode = (addressCode: string) => provincesAndCities.includes(addressCode);\r\n\r\n    const checkBirthDayCode = (birDayCode: string) => {\r\n      const yyyy = parseInt(birDayCode.substring(0, 4), 10);\r\n      const mm = parseInt(birDayCode.substring(4, 6), 10);\r\n      const dd = parseInt(birDayCode.substring(6), 10);\r\n      const xdata = new Date(yyyy, mm - 1, dd);\r\n      if(xdata > new Date()) {\r\n        return false;\r\n        // eslint-disable-next-line max-len\r\n      } else if((xdata.getFullYear() === yyyy) && (xdata.getMonth() === mm - 1) && (xdata.getDate() === dd)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    const getParityBit = (idCardNo: string) => {\r\n      let id17 = idCardNo.substring(0, 17);\r\n\r\n      let power = 0;\r\n      for (let i = 0; i < 17; i++) {\r\n        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);\r\n      }\r\n\r\n      let mod = power % 11;\r\n      return parityBit[mod];\r\n    };\r\n\r\n    const checkParityBit = (idCardNo: string) => getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();\r\n\r\n\r\n    const check15IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = `19${idCardNo.substring(6, 12)}`;\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return true;\r\n    };\r\n\r\n    const check18IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{5}[1-9]\\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}(\\d|x|X)$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = idCardNo.substring(6, 14);\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return checkParityBit(idCardNo);\r\n    };\r\n\r\n    const checkIdCardNo = (idCardNo: string) => {\r\n      let check = /^\\d{15}|(\\d{17}(\\d|x|X))$/.test(idCardNo);\r\n      if(!check) return false;\r\n      if(idCardNo.length === 15) {\r\n        return check15IdCardNo(idCardNo);\r\n      }\r\n      return check18IdCardNo(idCardNo);\r\n    };\r\n    return checkIdCardNo(str);\r\n  },\r\n  'zh-TW': (str: string) => {\r\n    const ALPHABET_CODES = {\r\n      A: 10,\r\n      B: 11,\r\n      C: 12,\r\n      D: 13,\r\n      E: 14,\r\n      F: 15,\r\n      G: 16,\r\n      H: 17,\r\n      I: 34,\r\n      J: 18,\r\n      K: 19,\r\n      L: 20,\r\n      M: 21,\r\n      N: 22,\r\n      O: 35,\r\n      P: 23,\r\n      Q: 24,\r\n      R: 25,\r\n      S: 26,\r\n      T: 27,\r\n      U: 28,\r\n      V: 29,\r\n      W: 32,\r\n      X: 30,\r\n      Y: 31,\r\n      Z: 33,\r\n    };\r\n\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    if(!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;\r\n\r\n    // @ts-ignore\r\n    return Array.from(sanitized).reduce((sum, number, index) => {\r\n      if(index === 0) {\r\n        const code = ALPHABET_CODES[number];\r\n\r\n        return ((code % 10) * 9) + Math.floor(code / 10);\r\n      }\r\n\r\n      if(index === 9) {\r\n        return ((10 - (sum % 10)) - Number(number)) % 10 === 0;\r\n      }\r\n\r\n      return sum + (Number(number) * (9 - index));\r\n    }, 0);\r\n  },\r\n};\r\n\r\n/*\r\n// 身份证\r\nexport function validateIDCard(str) {\r\n  const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n  return reg.test(str)\r\n}\r\n*/\r\n\r\n/**\r\n * isIdentityCard\r\n * @param[str] any 证件号码\r\n * @param[locale] string 证件类型\r\n * */\r\nexport default function isIdentityCard(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false;\r\n  }\r\n  str = `${str}`;\r\n  if(locale in identityCardValidators) {\r\n    return identityCardValidators[locale](str);\r\n  } else if(locale === 'any') {\r\n    for (const key in identityCardValidators) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      if(identityCardValidators.hasOwnProperty(key)) {\r\n        const validator = identityCardValidators[key];\r\n        if(validator(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n\r\n/**\r\n * IMEI校验\r\n * @param[str] imei\r\n * @param[allow_hyphens] boolean 允许连字符\r\n * */\r\nexport default function isIMEI(str: any, allow_hyphens = false) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  str = `${str}`;\r\n\r\n  let imeiRegexWithoutHypens = /^[0-9]{15}$/;\r\n  let imeiRegexWithHypens = /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/;\r\n  // default regex for checking imei is the one without hyphens\r\n\r\n  let imeiRegex = imeiRegexWithoutHypens;\r\n\r\n  if(allow_hyphens) {\r\n    imeiRegex = imeiRegexWithHypens;\r\n  }\r\n\r\n\r\n  if(!imeiRegex.test(str)) {\r\n    return false;\r\n  }\r\n\r\n  str = str.replace(/-/g, '');\r\n\r\n  let sum = 0,\r\n    mul = 2,\r\n    l = 14;\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    const digit = str.substring(l - i - 1, l - i);\r\n    const tp = parseInt(digit, 10) * mul;\r\n    if(tp >= 10) {\r\n      sum += (tp % 10) + 1;\r\n    } else {\r\n      sum += tp;\r\n    }\r\n    if(mul === 1) {\r\n      mul += 1;\r\n    } else {\r\n      mul -= 1;\r\n    }\r\n  }\r\n  const chk = ((10 - (sum % 10)) % 10);\r\n  return chk === parseInt(str.substring(14, 15), 10);\r\n\r\n}\r\n","import utilToString from '../utils/utilToString';\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\nimport utilTypeOf from \"../utils/utilTypeOf\";\r\n\r\n/**\r\n * 是否包含数据判断\r\n * @param[str] 要判断的数据\r\n * @param[options] 匹配的数据\r\n * */\r\nexport default function isIn(str: any, options: any) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  let i;\r\n  let options_type = utilTypeOf(options)\r\n  if(options_type === 'array') {\r\n    const array: any[] = [];\r\n    for (i in options) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if({}.hasOwnProperty.call(options, i)) {\r\n        array[i] = utilToString(options[i]);\r\n      }\r\n    }\r\n    return array.indexOf(str) >= 0;\r\n  } else if(options_type === 'object') {\r\n    return options.hasOwnProperty(str);\r\n  } else if(options_type === 'function') {\r\n    return options.indexOf(str) >= 0;\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * 判断数据是否为 object\r\n * @param[data]\r\n * */\r\nconst isObject = (data: any) => {\r\n  return (Object.prototype.toString.call(data) === '[object Object]');\r\n};\r\n\r\nexport default isObject;\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 邮编格式验证\r\n * @param[str] 邮编\r\n * @param[locale] 邮编所属地\r\n * */\r\nexport default function isPostalCode(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  // common patterns\r\n  const threeDigit = /^\\d{3}$/;\r\n  const fourDigit = /^\\d{4}$/;\r\n  const fiveDigit = /^\\d{5}$/;\r\n  const sixDigit = /^\\d{6}$/;\r\n\r\n  const patterns = {\r\n    AD: /^AD\\d{3}$/,\r\n    AT: fourDigit,\r\n    AU: fourDigit,\r\n    AZ: /^AZ\\d{4}$/,\r\n    BE: fourDigit,\r\n    BG: fourDigit,\r\n    BR: /^\\d{5}-\\d{3}$/,\r\n    BY: /2[1-4]{1}\\d{4}$/,\r\n    CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\r\n    CH: fourDigit,\r\n    CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\r\n    CZ: /^\\d{3}\\s?\\d{2}$/,\r\n    DE: fiveDigit,\r\n    DK: fourDigit,\r\n    DO: fiveDigit,\r\n    DZ: fiveDigit,\r\n    EE: fiveDigit,\r\n    ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\r\n    FI: fiveDigit,\r\n    FR: /^\\d{2}\\s?\\d{3}$/,\r\n    GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\r\n    GR: /^\\d{3}\\s?\\d{2}$/,\r\n    HR: /^([1-5]\\d{4}$)/,\r\n    HT: /^HT\\d{4}$/,\r\n    HU: fourDigit,\r\n    ID: fiveDigit,\r\n    IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\r\n    IL: /^(\\d{5}|\\d{7})$/,\r\n    IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\r\n    IR: /\\b(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}\\b/,\r\n    IS: threeDigit,\r\n    IT: fiveDigit,\r\n    JP: /^\\d{3}\\-\\d{4}$/,\r\n    KE: fiveDigit,\r\n    KR: /^(\\d{5}|\\d{6})$/,\r\n    LI: /^(948[5-9]|949[0-7])$/,\r\n    LT: /^LT\\-\\d{5}$/,\r\n    LU: fourDigit,\r\n    LV: /^LV\\-\\d{4}$/,\r\n    LK: fiveDigit,\r\n    MX: fiveDigit,\r\n    MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\r\n    MY: fiveDigit,\r\n    NL: /^\\d{4}\\s?[a-z]{2}$/i,\r\n    NO: fourDigit,\r\n    NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\r\n    NZ: fourDigit,\r\n    PL: /^\\d{2}\\-\\d{3}$/,\r\n    PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\r\n    PT: /^\\d{4}\\-\\d{3}?$/,\r\n    RO: sixDigit,\r\n    RU: sixDigit,\r\n    SA: fiveDigit,\r\n    SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\r\n    SG: sixDigit,\r\n    SI: fourDigit,\r\n    SK: /^\\d{3}\\s?\\d{2}$/,\r\n    TH: fiveDigit,\r\n    TN: fourDigit,\r\n    TW: /^\\d{3}(\\d{2})?$/,\r\n    UA: fiveDigit,\r\n    US: /^\\d{5}(-\\d{4})?$/,\r\n    ZA: fourDigit,\r\n    ZM: fiveDigit,\r\n  };\r\n  if(locale in patterns) {\r\n    return patterns[locale].test(str);\r\n  } else if(locale === 'any') {\r\n    for (const key in patterns) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if(patterns.hasOwnProperty(key)) {\r\n        const pattern = patterns[key];\r\n        if(pattern.test(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","/**\r\n * 密码强度验证\r\n *\r\n * */\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\nconst upperCaseRegex = /^[A-Z]$/;\r\nconst lowerCaseRegex = /^[a-z]$/;\r\nconst numberRegex = /^[0-9]$/;\r\nconst symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\r\n\r\nexport interface IsStrongPasswordOptions {\r\n  minLength: number;\r\n  minLowercase: number;\r\n  minUppercase: number;\r\n  minNumbers: number;\r\n  minSymbols: number;\r\n  returnScore: boolean;\r\n  pointsPerUnique: number;\r\n  pointsPerRepeat: number;\r\n  pointsForContainingLower: number;\r\n  pointsForContainingUpper: number;\r\n  pointsForContainingNumber: number;\r\n  pointsForContainingSymbol: number;\r\n}\r\n\r\nconst defaultOptions: IsStrongPasswordOptions = {\r\n  // 最小长度\r\n  minLength: 8,\r\n  // 最少小写字母个数\r\n  minLowercase: 1,\r\n  // 最少大写字母个数\r\n  minUppercase: 1,\r\n  // 最少数字个数\r\n  minNumbers: 1,\r\n  // 最少特殊符号个数\r\n  minSymbols: 1,\r\n  // 返回密码强度评分\r\n  returnScore: false,\r\n  pointsPerUnique: 1,\r\n  pointsPerRepeat: 0.5,\r\n  pointsForContainingLower: 10,\r\n  pointsForContainingUpper: 10,\r\n  pointsForContainingNumber: 10,\r\n  pointsForContainingSymbol: 10,\r\n};\r\n\r\n/* Counts number of occurrences of each char in a string\r\n * could be moved to util/ ?\r\n*/\r\nfunction countChars(str: string) {\r\n  let result = {};\r\n  Array.from(str).forEach((char) => {\r\n    let curVal = result[char];\r\n    if(curVal) {\r\n      result[char] += 1;\r\n    } else {\r\n      result[char] = 1;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/* Return information about a password */\r\nexport interface IAnalysisType {\r\n  length: number;\r\n  uniqueChars: number;\r\n  uppercaseCount: number;\r\n  lowercaseCount: number;\r\n  numberCount: number;\r\n  symbolCount: number;\r\n}\r\n\r\nfunction analyzePassword(password: string) {\r\n  let charMap = countChars(password);\r\n  let analysis: IAnalysisType = {\r\n    length: password.length,\r\n    uniqueChars: Object.keys(charMap).length,\r\n    uppercaseCount: 0,\r\n    lowercaseCount: 0,\r\n    numberCount: 0,\r\n    symbolCount: 0,\r\n  };\r\n  Object.keys(charMap).forEach((char) => {\r\n    /* istanbul ignore else */\r\n    if(upperCaseRegex.test(char)) {\r\n      analysis.uppercaseCount += charMap[char];\r\n    } else if(lowerCaseRegex.test(char)) {\r\n      analysis.lowercaseCount += charMap[char];\r\n    } else if(numberRegex.test(char)) {\r\n      analysis.numberCount += charMap[char];\r\n    } else if(symbolRegex.test(char)) {\r\n      analysis.symbolCount += charMap[char];\r\n    }\r\n  });\r\n  return analysis;\r\n}\r\n\r\nfunction scorePassword(analysis: IAnalysisType, scoringOptions: IsStrongPasswordOptions) {\r\n  let points = 0;\r\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\r\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\r\n  if(analysis.lowercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingLower;\r\n  }\r\n  if(analysis.uppercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingUpper;\r\n  }\r\n  if(analysis.numberCount > 0) {\r\n    points += scoringOptions.pointsForContainingNumber;\r\n  }\r\n  if(analysis.symbolCount > 0) {\r\n    points += scoringOptions.pointsForContainingSymbol;\r\n  }\r\n  return points;\r\n}\r\n\r\n/**\r\n * 密码强度验证\r\n *\r\n * @param[str]  密码\r\n * @param[options]  验证参数\r\n * */\r\nexport default function isStrongPassword(str: any, options?: Partial<IsStrongPasswordOptions>) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const analysis = analyzePassword(str);\r\n  const new_options: IsStrongPasswordOptions = {\r\n    ...defaultOptions,\r\n    ...options\r\n  };\r\n  if(new_options.returnScore) {\r\n    return scorePassword(analysis, new_options);\r\n  }\r\n  return analysis.length >= new_options.minLength\r\n    && analysis.lowercaseCount >= new_options.minLowercase\r\n    && analysis.uppercaseCount >= new_options.minUppercase\r\n    && analysis.numberCount >= new_options.minNumbers\r\n    && analysis.symbolCount >= new_options.minSymbols;\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 纳税人识别码 合法性验证\r\n * @param[str] any 识别码\r\n * */\r\nconst isTaxpayerNo = (str: any) => {\r\n  const reg = /^[0-9A-Z]{15,18}$/i;\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isTaxpayerNo\r\n","/**\r\n * URL 正在校验\r\n *\r\n * */\r\nimport isFQDN from './http/isFQDN';\r\nimport { isIP, isIPv6 } from './http/IP';\r\n\r\n/*\r\noptions for isURL method\r\n\r\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\r\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\r\nprotocols - valid protocols can be modified with this option\r\nrequire_host - if set as false isURL will not check if host is present in the URL\r\nrequire_port - if set as true isURL will check if port is present in the URL\r\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\r\nvalidate_length - if set as false isURL will skip string length validation (IE maximum is 2083)\r\n\r\n*/\r\n\r\n\r\nexport type TProtocols = Array<'http' | 'https' | 'ftp'>;\r\nexport type TCheckHostMatches = Array<string | RegExp>;\r\n\r\nexport interface IIsURLDefaultUrlOptions {\r\n  protocols: TProtocols;\r\n  require_tld: boolean;\r\n  require_protocol: boolean;\r\n  require_host: boolean;\r\n  require_port: boolean;\r\n  require_valid_protocol: boolean;\r\n  allow_underscores: boolean;\r\n  allow_trailing_dot: boolean;\r\n  allow_protocol_relative_urls: boolean;\r\n  allow_fragments: boolean;\r\n  allow_query_components: boolean;\r\n  validate_length: boolean;\r\n  disallow_auth?: boolean;\r\n  host_whitelist?: TCheckHostMatches;\r\n  host_blacklist?: TCheckHostMatches;\r\n}\r\n\r\n\r\n/**\r\n * URL合法性校验\r\n * @param[url]  url\r\n * @param[options] 校验参数\r\n * */\r\nexport default function isURL(url: any, options: Partial<IIsURLDefaultUrlOptions>) {\r\n\r\n\r\n  const default_url_options: IIsURLDefaultUrlOptions = {\r\n    protocols: ['http', 'https', 'ftp'],\r\n    require_tld: true,\r\n    require_protocol: false,\r\n    require_host: true,\r\n    require_port: false,\r\n    require_valid_protocol: true,\r\n    allow_underscores: false,\r\n    allow_trailing_dot: false,\r\n    allow_protocol_relative_urls: false,\r\n    allow_fragments: true,\r\n    allow_query_components: true,\r\n    validate_length: true,\r\n  };\r\n\r\n  const wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\r\n\r\n  function isRegExp(obj: RegExp | string) {\r\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\r\n  }\r\n\r\n  function checkHost(host: string, matches: TCheckHostMatches) {\r\n    for (let i = 0; i < matches.length; i++) {\r\n      let match = matches[i];\r\n      // @ts-ignore\r\n      if(host === match || (isRegExp(match) && match.test(host))) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if(typeof url !== \"string\") {\r\n    return false\r\n  }\r\n  if(!url || /[\\s<>]/.test(url)) {\r\n    return false;\r\n  }\r\n  if(url.indexOf('mailto:') === 0) {\r\n    return false;\r\n  }\r\n  const new_options = {\r\n    ...options,\r\n    ...default_url_options\r\n  };\r\n\r\n  if(options.validate_length && url.length >= 2083) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_fragments && url.includes('#')) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_query_components && (url.includes('?') || url.includes('&'))) {\r\n    return false;\r\n  }\r\n\r\n  let protocol, auth, host, hostname, port, port_str, split, ipv6;\r\n\r\n  split = url.split('#');\r\n  url = split.shift();\r\n\r\n  split = url.split('?');\r\n  url = split.shift();\r\n\r\n  split = url.split('://');\r\n  if(split.length > 1) {\r\n    protocol = split.shift().toLowerCase();\r\n    if(new_options.require_valid_protocol && new_options.protocols.indexOf(protocol) === -1) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_protocol) {\r\n    return false;\r\n  } else if(url.substr(0, 2) === '//') {\r\n    if(!new_options.allow_protocol_relative_urls) {\r\n      return false;\r\n    }\r\n    split[0] = url.substr(2);\r\n  }\r\n  url = split.join('://');\r\n\r\n  if(url === '') {\r\n    return false;\r\n  }\r\n\r\n  split = url.split('/');\r\n  url = split.shift();\r\n\r\n  if(url === '' && !new_options.require_host) {\r\n    return true;\r\n  }\r\n\r\n  split = url.split('@');\r\n  if(split.length > 1) {\r\n    if(new_options.disallow_auth) {\r\n      return false;\r\n    }\r\n    if(split[0] === '') {\r\n      return false;\r\n    }\r\n    auth = split.shift();\r\n    if(auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\r\n      return false;\r\n    }\r\n    const [user, password] = auth.split(':');\r\n    if(user === '' && password === '') {\r\n      return false;\r\n    }\r\n  }\r\n  hostname = split.join('@');\r\n\r\n  port_str = null;\r\n  ipv6 = null;\r\n  const ipv6_match = hostname.match(wrapped_ipv6);\r\n  if(ipv6_match) {\r\n    host = '';\r\n    ipv6 = ipv6_match[1];\r\n    port_str = ipv6_match[2] || null;\r\n  } else {\r\n    split = hostname.split(':');\r\n    host = split.shift();\r\n    if(split.length) {\r\n      port_str = split.join(':');\r\n    }\r\n  }\r\n\r\n  if(port_str !== null && port_str.length > 0) {\r\n    port = parseInt(port_str, 10);\r\n    if(!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_port) {\r\n    return false;\r\n  }\r\n\r\n  if(new_options.host_whitelist) {\r\n    return checkHost(host, new_options.host_whitelist);\r\n  }\r\n  if(!isIP(host) && !isFQDN(host, new_options) && (!ipv6 || !isIPv6(ipv6))) {\r\n    return false;\r\n  }\r\n\r\n  host = host || ipv6;\r\n\r\n  return !(new_options.host_blacklist && checkHost(host, new_options.host_blacklist));\r\n\r\n\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * uuid 合法性校验\r\n * @param[str]  url\r\n * @param[version] uuid版本\r\n * */\r\nexport default function isUUID(str: any, version: any) {\r\n  const uuid = {\r\n    1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n  };\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  // @ts-ignore\r\n  const pattern = uuid[![undefined, null].includes(version) ? version : 'all'];\r\n  return !!pattern && pattern.test(str);\r\n}\r\n"],"names":["isNumber","number","allowNegative","replace","isNaN","parseFloat","numberToDecimal2","num","ceil","f","numberMultiply","Math","round","s","toString","rs","indexOf","length","numberFormat","split","e","numberAdd","num1","num2","baseNum1","baseNum2","baseNum","pow","max","numberSubtract","precision","toFixed","Number","numberDivide","baseNum3","baseNum4","arrayDataGrouping","data","groupLen","Array","isArray","undefined","dataLen","JSON","parse","stringify","group","groupData","i","push","splice","setCookie","name","objHours","str","encodeURI","date","Date","ms","setTime","getTime","toUTCString","document","cookie","getCookieValue","prefix","start","end","value","substring","decodeURI","dateFormatReg","formatDate","format","reg","test","setHours","getHours","o","getMonth","getDate","getMinutes","getSeconds","floor","getMilliseconds","RegExp","$1","getFullYear","substr","k","debounce","fn","delay","timer","clearTimeout","setTimeout","deepClone","obj","newObj","key","hasOwnProperty","getDomainTld","domain","index","slice","getDomainPeriod","tld","tld_arr","_period","escape","filterStringSpace","filterAllSpace","trim","getStrByteLength","totalLength","len","charCode","charCodeAt","console","log","getUrlParam","param","_params","window","location","search","r","match","decodeURIComponent","specialSymbolToComma","inputTextareaFormat","toLowerCase","Set","filter","item","isExistValue","returnType","_value","utilTypeOf","input","rawObject","Object","prototype","call","typeOfRegex","exec","isValidParamsTypes","types","defaultTypes","includes","setLocalStorage","localStorage","setItem","getLocalStorage","getItem","removeLocalStorage","removeItem","setSessionStorage","sessionStorage","getSessionStorage","removeSessionStorage","EnumLanguageType","setErrorCodeLang","lang","zh","en","setHtmlTitle","title","setUrlParam","keys","forEach","stringToLowerOrUpperCase","toUpper","toUpperCase","throttle","unescape","utilsSubmitForm","config","action","url","method","params","form","createElement","style","display","entries","type","appendChild","body","submit","removeChild","stringToArray","separator","utilToString","String","errorCodes","IP_SEGMENT_ERR_FORMAT","IP_SEGMENT_NOT_SUPPORT_V6","IP_SEGMENT_ERR_TYPE","IP_SEGMENT_ERR_SEGMENT","IP_SEGMENT_ERR_RANGE","IP_SEGMENT_SUCCESS","v4Seg","v4Str","IPv4Reg","v6Seg","IPv6Reg","isIPv4","isIPv6","isIP","isSameIPV4Segment","startIP","endIP","errorMessage","success","message","ipV4Split","ip","slice_index","lastIndexOf","ip_prefix","ip_suffix","start_ip","end_ip","msg_tips","DOMAIN_IS_EMPTY","DOMAIN_FORMAT_ERROR","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_WITH_HYPHEN","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_WITH_UNDERSCORES","LABEL_ENDS_WITH_UNDERSCORES","LABEL_INVALID_CHARS","TLD_WITH_NUMBER","TLD_INVALID_CHARS","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_hyphen_tld","allow_wildcard","isFQDN","options","nodes","node_len","max_node","tldReg","label","isDomain","_objectSpread","isInRange","min","val","isPort","FORMAT_ERROR","isMX","regValue","error_code","TOO_LONG","isTXT","option","isNS","isCAA","caaValueRegex","caaTags","values","isSRV","priority","weight","port","_success","isA","isAAAA","isCNAME","EnumRecordType","isRdata","A","AAAA","CAA","CNAME","MX","NS","SRV","TXT","isHost","specialHosts","isTTL","ttl","minTTL","maxTTL","isZone","rootZone","IsBankCard","isBooleanTrue","extend","trueBooleans","type_str","isByteLength","arguments","isCellPhone","err","creditCard","isCreditCard","sanitized","sum","digit","tmpNum","shouldDouble","parseInt","isEmail","isEmptyArray","isEmptyStr","ignoreSpace","isEthereumAddress","ethReg","isExistString","isFixedPhone","isInt","int","intLeadingZeroes","regex","allow_leading_zeroes","minCheckPassed","maxCheckPassed","ltCheckPassed","lt","gtCheckPassed","gt","identityCardValidators","PL","weightOfDigits","digits","reduce","acc","modulo","lastDigit","charAt","ES","DNI","charsValue","X","Y","Z","controlDigits","char","endsWith","FI","checkDigits","idAsNumber","remainder","checkDigit","IN","d","p","c","invertedArray","map","reverse","IR","lastNumber","IT","NO","k1","k2","TH","LK","old_nic","new_nic","id","incNum","NIN","provincesAndCities","powers","parityBit","checkAddressCode","addressCode","checkBirthDayCode","birDayCode","yyyy","mm","dd","xdata","getParityBit","idCardNo","id17","power","mod","checkParityBit","check15IdCardNo","check","check18IdCardNo","checkIdCardNo","ALPHABET_CODES","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","from","code","isIdentityCard","locale","validator","Error","isIMEI","allow_hyphens","imeiRegexWithoutHypens","imeiRegexWithHypens","imeiRegex","mul","l","tp","chk","isIn","options_type","array","isObject","isPostalCode","threeDigit","fourDigit","fiveDigit","sixDigit","patterns","AD","AT","AU","AZ","BE","BG","BR","BY","CA","CH","CN","CZ","DE","DK","DO","DZ","EE","FR","GB","GR","HR","HT","HU","ID","IE","IL","IS","JP","KE","KR","LI","LT","LU","LV","MT","MY","NL","NP","NZ","PR","PT","RO","RU","SA","SE","SG","SI","SK","TN","TW","UA","US","ZA","ZM","pattern","upperCaseRegex","lowerCaseRegex","numberRegex","symbolRegex","defaultOptions","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","countChars","result","curVal","analyzePassword","password","charMap","analysis","uniqueChars","uppercaseCount","lowercaseCount","numberCount","symbolCount","scorePassword","scoringOptions","points","isStrongPassword","new_options","isTaxpayerNo","isURL","default_url_options","protocols","require_protocol","require_host","require_port","require_valid_protocol","allow_protocol_relative_urls","allow_fragments","allow_query_components","validate_length","wrapped_ipv6","isRegExp","checkHost","host","matches","protocol","auth","hostname","port_str","ipv6","shift","join","disallow_auth","user","ipv6_match","host_whitelist","host_blacklist","isUUID","version","uuid","all"],"mappings":"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"}