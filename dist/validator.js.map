{"version":3,"file":"validator.js","sources":["../src/utils/isNumber.ts","../src/utils/arithmetic.ts","../src/utils/dateFormatReg.ts","../src/utils/escape.ts","../src/utils/filterStringSpace.ts","../src/utils/setErrorCodeLang.ts","../src/utils/specialSymbolToComma.ts","../src/utils/utilTypeOf.ts","../src/utils/isValidParamsTypes.ts","../src/utils/isExistValue.ts","../src/utils/utilStringToArray.ts","../src/utils/utilToString.ts","../src/validator/http/IP.ts","../src/validator/http/isFQDN.ts","../src/validator/http/isDomain.ts","../src/validator/rr/isRdata.ts","../src/validator/isInRange.ts","../src/validator/http/isPort.ts","../src/validator/isCellPhone.ts","../src/validator/isCreditCard.ts","../src/validator/isInt.ts","../src/validator/isIdentityCard.ts","../src/validator/isStrongPassword.ts","../src/validator/IsBankCard.ts","../src/utils/arrayDataGrouping.ts","../src/utils/debounce.ts","../src/utils/deepClone.ts","../src/utils/cookie.ts","../src/utils/domain.ts","../src/utils/localStorage.ts","../src/utils/sessionStorage.ts","../src/utils/getStrByteLength.ts","../src/utils/getUrlParam.ts","../src/utils/inputTextareaFormat.ts","../src/validator/isBooleanTrue.ts","../src/validator/isByteLength.ts","../src/validator/isEmail.ts","../src/utils/isEmpty.ts","../src/validator/isEthereumAddress.ts","../src/validator/isFixedPhone.ts","../src/validator/rr/isHost.ts","../src/validator/isIMEI.ts","../src/validator/isIn.ts","../src/validator/isPostalCode.ts","../src/validator/rr/isA.ts","../src/validator/rr/isAAAA.ts","../src/validator/rr/isCAA.ts","../src/validator/rr/isCNAME.ts","../src/validator/rr/isMX.ts","../src/validator/rr/isNS.ts","../src/validator/rr/isSRV.ts","../src/validator/rr/isTXT.ts","../src/validator/rr/isTTL.ts","../src/validator/isTaxpayerNo.ts","../src/validator/isURL.ts","../src/validator/isUUID.ts","../src/validator/rr/isZone.ts","../src/utils/setHtmlTitle.ts","../src/utils/setUrlParam.ts","../src/utils/throttle.ts","../src/utils/unescape.ts","../src/utils/utilsSubmitForm.ts"],"sourcesContent":["/**\r\n * 判断参数是否为数字\r\n *\r\n * @param[number]\r\n * @param[allowNegative] 是否允许为负数\r\n */\r\nexport const isNumber = (number: any, allowNegative = false) => {\r\n  /**\r\n   * isNaN([]) || isNaN('') || isNaN(true) || isNaN(false) || isNaN(null) => false\r\n   * */\r\n  if(typeof number === 'string') {\r\n    number = number.replace(/\\s+/g, '');\r\n  }\r\n  if(\r\n    isNaN(number) ||\r\n    number === '' ||\r\n    typeof number === 'object' ||\r\n    typeof number === 'boolean'\r\n  ) {\r\n    return false;\r\n  } else {\r\n    number = parseFloat(number);\r\n    if(number < 0) {\r\n      return allowNegative;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n","/** =======================================================\r\n * @names：  算术运算\r\n * @author：jisen\r\n * @time：  2022-07-04\r\n * @description：\r\n * ======================================================== */\r\nimport { isNumber } from \"./isNumber\";\r\n\r\n\r\n/**\r\n * 金额保留两位小数\r\n * @param[num]\r\n * @param[ceil] 是否向上取整， 默认四舍五入\r\n * ceil === true, 向上取整; eg: 5.051 = 5.06\r\n * ceil === false, 四舍五入; eg: 5.051 = 5.05\r\n */\r\nexport function numberToDecimal2(num: any, ceil?: boolean) {\r\n  if(!isNumber(num)) {\r\n    return num;\r\n  }\r\n  let f = parseFloat(num);\r\n  // Math.ceil(19.01*100) => 1902 js BUG\r\n  f = numberMultiply(f, 100);\r\n  if(ceil) {\r\n    f = Math.ceil(f) / 100;\r\n  } else {\r\n    f = Math.round(f) / 100;\r\n  }\r\n  let s = f.toString();\r\n  let rs = s.indexOf('.');\r\n  if(rs < 0) {\r\n    rs = s.length;\r\n    s += '.';\r\n  }\r\n  while (s.length <= rs + 2) {\r\n    s += '0';\r\n  }\r\n  return s;\r\n}\r\n\r\n/**\r\n * 计算值格式化\r\n * */\r\nconst numberFormat = (num: any) => {\r\n  try {\r\n    return num.toString().split(\".\")[1].length;\r\n  } catch (e) {\r\n    return 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 加法运算，避免数据相加小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 加数1\r\n * @param num2 加数2\r\n */\r\nexport function numberAdd(num1: any, num2: any) {\r\n  const baseNum1 = numberFormat(num1);\r\n  const baseNum2 = numberFormat(num2);\r\n  const baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));\r\n  return (numberMultiply(num1, baseNum) + numberMultiply(num2, baseNum)) / baseNum;\r\n}\r\n\r\n/**\r\n * 减法运算，避免数据相减小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 被减数\r\n * @param num2 减数\r\n */\r\nexport function numberSubtract(num1: number, num2: number) {\r\n  // 精度\r\n  let precision;\r\n  const baseNum1 = numberFormat(num1);\r\n  const baseNum2 = numberFormat(num2);\r\n  const baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));\r\n  precision = (baseNum1 >= baseNum2) ? baseNum1 : baseNum2;\r\n  return ((num1 * baseNum - num2 * baseNum) / baseNum).toFixed(precision);\r\n}\r\n\r\n/**\r\n * 乘法运算，避免数据相乘小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 被乘数\r\n * @param num2 乘数\r\n */\r\nexport function numberMultiply(num1: number, num2: number) {\r\n  let baseNum = 0;\r\n  baseNum += numberFormat(num1);\r\n  baseNum += numberFormat(num2);\r\n  return Number(num1.toString().replace(\".\", \"\")) * Number(num2.toString().replace(\".\", \"\")) / Math.pow(10, baseNum);\r\n}\r\n\r\n/**\r\n * 除法运算，避免数据相除小数点后产生多位数和计算精度损失。\r\n *\r\n * @param num1 被除数\r\n * @param num2 除数\r\n */\r\nexport function numberDivide(num1: number, num2: number) {\r\n  const baseNum1 = numberFormat(num1);\r\n  const baseNum2 = numberFormat(num2);\r\n  const baseNum3 = Number(num1.toString().replace(\".\", \"\"));\r\n  const baseNum4 = Number(num2.toString().replace(\".\", \"\"));\r\n  return (baseNum3 / baseNum4) * Math.pow(10, baseNum2 - baseNum1);\r\n}\r\n","/**\r\n * 解决IE不识别 2018-08-12的时间格式\r\n *\r\n * @param[date]: 日期\r\n *\r\n * eg: 2018-08-12 => 2018/08/12\r\n * */\r\nexport function dateFormatReg(date: any) {\r\n  if(typeof date === 'string') {\r\n    date = date.replace(/-/g, '/')\r\n  }\r\n  return date;\r\n}\r\n\r\n/**\r\n * 日期格式化.\r\n * @param[date]\r\n * @param[format] 格式\r\n */\r\nexport function formatDate(date: any, format = 'YYYY-MM-DD') {\r\n  if(!date) {\r\n    return ''\r\n  }\r\n  const reg = /cst/ig;\r\n  // 如果时间格式为 CST格式，则需要-14小时\r\n  if(typeof date === 'string' && reg.test(date)) {\r\n    date = new Date(date);\r\n    date.setHours(date.getHours() - 14);\r\n  }\r\n  date = dateFormatReg(date);\r\n  date = new Date(date);\r\n  const o = {\r\n    'M+': date.getMonth() + 1, //month\r\n    'D+': date.getDate(), //day\r\n    'd+': date.getDate(), //day\r\n    'H+': date.getHours(), //hour\r\n    'm+': date.getMinutes(), //minute\r\n    's+': date.getSeconds(), //second\r\n    'q+': Math.floor((date.getMonth() + 3) / 3), //quarter\r\n    'S': date.getMilliseconds(), //millisecond\r\n  };\r\n\r\n  if(/(Y+)/i.test(format)) {\r\n    format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\r\n  }\r\n\r\n  for (const k in o) {\r\n    if(new RegExp('(' + k + ')').test(format)) {\r\n      format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\r\n    }\r\n  }\r\n  return format;\r\n}\r\n","/**\r\n * 标签语义化\r\n *\r\n * @param[str]  str\r\n * eg: <h1> => &lt;h1&gt;\r\n *\r\n * */\r\nconst escape = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&/g, '&amp;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#x27;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\\//g, '&#x2F;')\r\n    .replace(/\\\\/g, '&#x5C;')\r\n    .replace(/`/g, '&#96;'));\r\n}\r\n\r\nexport default escape\r\n","/**\r\n * @names：普通文本过滤所有的空格\r\n * 部分 ajax 响应数据为字符串，且包含转义字符，无法转成JSON\r\n *\r\n * @params[str] string\r\n * @params[options] {filterAll: boolean, returnType: boolean}\r\n * @return string\r\n * eg: aaa  aa  => aaa aa\r\n * */\r\nconst filterStringSpace = (str: any, options?: {\r\n  filterAll?: boolean;\r\n  returnType?: boolean\r\n}) => {\r\n  if(typeof str !== 'string') {\r\n    // return str;\r\n    return ''\r\n  }\r\n  const reg = /\\\\0|\\\\u0000|\\s+/g\r\n  if(options?.filterAll) {\r\n    return str.replace(reg, '')\r\n  }\r\n  return str.replace(reg, ' ')\r\n};\r\n\r\nexport default filterStringSpace;\r\n","/**\r\n * 语言类型\r\n * */\r\nexport const enum EnumLanguageType {\r\n  en = 'en-US',\r\n  zh = 'zh-CN',\r\n}\r\n\r\n/**\r\n * 设置错误消息语言类型\r\n * */\r\nconst setErrorCodeLang = (lang: any = EnumLanguageType.zh) => {\r\n  if (lang === EnumLanguageType.en) {\r\n    return 'en';\r\n  }\r\n  return 'zh';\r\n};\r\n\r\nexport default setErrorCodeLang;\r\n","\r\n/**\r\n * @names：特殊符号转 , 英文号\r\n * @params[str] string\r\n * @return string\r\n * */\r\nexport const specialSymbolToComma = (str: any) => {\r\n  if(typeof str === \"string\") {\r\n    return str.replace(/\\r|\\s|\\n|，/g, ',')\r\n  }\r\n  return \"\"\r\n};\r\n","/**\r\n * Better way to handle type checking\r\n * null, {}, array and date are objects, which confuses\r\n */\r\n\r\nexport type EnumUtilTypeOf =\r\n  'undefined'\r\n  | 'object'\r\n  | 'array'\r\n  | 'boolean'\r\n  | 'number'\r\n  | 'string'\r\n  | 'function'\r\n  | 'symbol'\r\n  | 'bigint';\r\n\r\nconst utilTypeOf = (input: any): EnumUtilTypeOf => {\r\n  const rawObject = Object.prototype.toString.call(input).toLowerCase();\r\n  const typeOfRegex = /\\[object (.*)]/g;\r\n  // @ts-ignore\r\n  return typeOfRegex.exec(rawObject)[1];\r\n}\r\n\r\nexport default utilTypeOf\r\n\r\n\r\n\r\n\r\n","/**\r\n * 判断函数参数是否为有效数据类型\r\n * @param[str] any 参数\r\n * @param[types] [any] 支持参数类型, 默认支持 ['string', 'number']\r\n * */\r\nimport utilTypeOf, { EnumUtilTypeOf } from \"./utilTypeOf\";\r\n\r\nexport type ValidParamsDefaultTypes = Array<EnumUtilTypeOf>;\r\n\r\nconst isValidParamsTypes = (str: any, types?: ValidParamsDefaultTypes) => {\r\n  let defaultTypes: ValidParamsDefaultTypes = ['string', 'number'];\r\n  if(utilTypeOf(types) !== 'array') {\r\n    types = defaultTypes;\r\n  }\r\n  return (types && types.includes(utilTypeOf(str)));\r\n}\r\n\r\nexport default isValidParamsTypes;\r\n","\r\n/**\r\n * 判断数据是否存在\r\n * @param[value] 需要判断的数据\r\n * @param[returnType] 返回类型，默认返回 boolean\r\n * @return boolean || string\r\n */\r\nexport const isExistValue = (value: any, returnType = 'boolean') => {\r\n  let _value = '';\r\n  if(value === 0 || value === false || value) {\r\n    _value = value;\r\n  } else {\r\n    // null undefined ''\r\n    _value = '-';\r\n  }\r\n  // console.log(_value);\r\n  return (returnType === 'boolean') ? (_value !== '-') : _value\r\n};\r\n","/**\r\n * 字符串 转 数组\r\n * String to Array\r\n * @param[str] 需要拆分的数据\r\n * @param[separator] 拆分标识符，默认 ,\r\n * */\r\nconst utilStringToArray = (str: any, separator?: string) => {\r\n  separator = separator || ','\r\n  if (typeof str === 'string') {\r\n    str = str.trim();\r\n    separator = separator || ',';\r\n    return str.split(separator || /\\s+/);\r\n  } else if (Array.isArray(str)) {\r\n    return str\r\n  } else if (typeof str === 'number' || typeof str === \"boolean\") {\r\n    return [str]\r\n  }\r\n  return [];\r\n};\r\n\r\nexport default utilStringToArray;\r\n","/**\r\n * 字符串格式判断\r\n * */\r\nconst utilToString = (input: any) => {\r\n  if(typeof input === 'object' && input !== null) {\r\n    if(typeof input.toString === 'function') {\r\n      input = input.toString();\r\n    } else {\r\n      input = '[object Object]';\r\n    }\r\n  } else if(input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {\r\n    input = '';\r\n  }\r\n  return String(input);\r\n}\r\n\r\nexport default utilToString\r\n","'use strict';\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\r\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp('^(' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\r\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n  ')(%[0-9a-zA-Z-.:]{1,})?$');\r\n\r\n/**\r\n * IPV4验证\r\n * */\r\nexport const isIPv4 = (s: string): boolean => {\r\n  return IPv4Reg.test(s);\r\n}\r\n\r\n/**\r\n * IPV6验证\r\n * */\r\nexport const isIPv6 = (s: string): boolean => {\r\n  return IPv6Reg.test(s);\r\n}\r\n/**\r\n * IPV4 & IPV6验证\r\n * */\r\nexport const isIP = (s: string): number => {\r\n  if(isIPv4(s)) return 4;\r\n  if(isIPv6(s)) return 6;\r\n  return 0;\r\n}\r\n\r\n\r\n","import setErrorCodeLang from '../../utils/setErrorCodeLang';\r\n\r\nimport { IsFQDNConfig, isFQDNRes } from './typings.d';\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\n\r\n/**\r\n * 域名格式校验 - 错误提示消息.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    DOMAIN_IS_EMPTY: '校验内容为空',\r\n    DOMAIN_FORMAT_ERROR: '域名格式错误',\r\n    DOMAIN_TOO_SHORT: '域名长度不能小于 1 个字符.',\r\n    DOMAIN_TOO_LONG: '域名长度不能超过 255 个字符.',\r\n    LABEL_STARTS_WITH_DASH: '域名标签不能以 . 开头.',\r\n    LABEL_ENDS_WITH_DASH: '域名标签不能以 . 结尾.',\r\n    LABEL_WITH_HYPHEN: '域名标签不能以 - 开头或结尾.',\r\n    LABEL_TOO_LONG: '域名标签的长度最多为 63 个字符.',\r\n    LABEL_TOO_SHORT: '域名标签应至少为 1 个字符长.',\r\n    LABEL_WITH_UNDERSCORES: '域名标签不能包含 _ ',\r\n    LABEL_ENDS_WITH_UNDERSCORES: '域名标签不能以 _ 结尾.',\r\n    LABEL_INVALID_CHARS:\r\n      '域名标签只能包含a-z、A-Z、0-9、-、_、.、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD不能包含数字.',\r\n    TLD_INVALID_CHARS: 'TLD格式错误.',\r\n  },\r\n  en: {\r\n    DOMAIN_IS_EMPTY: 'Check content is empty',\r\n    DOMAIN_FORMAT_ERROR: 'Domain name format error',\r\n    DOMAIN_TOO_SHORT: 'Domain name too short.',\r\n    DOMAIN_TOO_LONG:\r\n      'Domain name too long. It should be no more than 255 chars.',\r\n    LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\r\n    LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\r\n    LABEL_WITH_HYPHEN: 'Domain labels cannot start or end with -.',\r\n    LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\r\n    LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\r\n    LABEL_WITH_UNDERSCORES: 'Domain labels cannot contain _',\r\n    LABEL_ENDS_WITH_UNDERSCORES: 'Domain labels can not end with _',\r\n    LABEL_INVALID_CHARS:\r\n      'Domain name label can only contain a-z、A-Z、0-9、-、_、.、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD cannot contain numbers',\r\n    TLD_INVALID_CHARS: 'TLD format error',\r\n  },\r\n};\r\n\r\n/**\r\n * 域名格式校验 - 默认配置参数\r\n *\r\n * */\r\nconst default_fqdn_options = {\r\n  // 是否包含TLD\r\n  require_tld: true,\r\n  // 是否允许包含下划线\r\n  allow_underscores: true,\r\n  // 是否允许 . 号结尾\r\n  allow_trailing_dot: false,\r\n  // 是否允许纯数字TLD\r\n  allow_numeric_tld: false,\r\n  // 是否允许配符 *\r\n  allow_wildcard: false,\r\n};\r\n\r\n/**\r\n * 域名格式校验\r\n * FQDN：(Fully Qualified Domain Name)全限定域名：同时带有主机名和域名的名称。（通过符号“.”）\r\n * 例如：主机名是bigserver,域名是mycompany.com,那么FQDN就是bigserver.mycompany.com。 [1]\r\n * str: m.zdns.cn || zdns.cn. || h.m.zdns.cn.\r\n * */\r\nexport default function isFQDN(\r\n  str: any,\r\n  options: Partial<IsFQDNConfig> = {},\r\n  lang?: string,\r\n): isFQDNRes {\r\n  let errorMessage = errorCodes[setErrorCodeLang(lang)];\r\n  if(typeof str !== 'string') {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n    };\r\n  }\r\n  str = filterStringSpace(str, {\r\n    filterAll: true\r\n  });\r\n  options = {\r\n    ...default_fqdn_options,\r\n    ...options,\r\n  };\r\n  console.log(options);\r\n\r\n  if(!str) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_IS_EMPTY,\r\n    };\r\n  }\r\n\r\n  const len = str.length;\r\n  if(len > 255) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_LONG,\r\n    };\r\n  }\r\n\r\n  /* Remove the optional trailing dot before checking validity */\r\n  if(options.allow_trailing_dot && str[len - 1] === '.') {\r\n    str = str.substring(0, len - 1);\r\n  }\r\n\r\n  /* Remove the optional wildcard before checking validity */\r\n  if(options.allow_wildcard && str.indexOf('*.') === 0) {\r\n    str = str.substring(2);\r\n  }\r\n\r\n  const nodes = str.split('.');\r\n  console.log(nodes);\r\n  const node_len = nodes.length;\r\n  const max_node = 127;\r\n  if(options.require_tld) {\r\n    // disallow fqdns without tld\r\n    if(node_len < 2) {\r\n      // 域名格式错误  zdns.cn\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    if(node_len > max_node) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    const tld = nodes[node_len - 1];\r\n    // reject numeric TLDs\r\n    if(!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_WITH_NUMBER,\r\n      };\r\n    }\r\n\r\n    if(\r\n      !/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(\r\n        tld,\r\n      )\r\n    ) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_INVALID_CHARS,\r\n      };\r\n    }\r\n  } else {\r\n    if(node_len > max_node - 1) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n  }\r\n  for (let i = 0; i < node_len; i++) {\r\n    const label = nodes[i];\r\n    console.log(label);\r\n    if(label.length > 63) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_TOO_LONG,\r\n      };\r\n    }\r\n    // \\u4E00-\\u9FA5 \\u00a1-\\uffff\r\n    if(!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow full-width chars\r\n    if(/[\\uff01-\\uff5e]/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow node starting or ending with hyphen\r\n    if(/^-|-$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_HYPHEN,\r\n      };\r\n    }\r\n\r\n    if(!options.allow_underscores && /_/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n\r\n    // disallow node ending with _\r\n    if(/_$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_ENDS_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    success: true,\r\n    message: '',\r\n  };\r\n}\r\n","import isFQDN from './isFQDN'\r\nimport {isFQDNRes} from \"./typings.d\";\r\n\r\n/**\r\n * 域名合法性校验\r\n * */\r\nconst isDomain = (str: string, lang?: string): isFQDNRes => {\r\n    return isFQDN(str, {\r\n        require_tld: true,\r\n        // 是否允许包含下划线\r\n        allow_underscores: true,\r\n        // 是否允许 . 号结尾\r\n        allow_trailing_dot: false,\r\n        // 是否允许数字TLD号结尾\r\n        allow_numeric_tld: false,\r\n        // 是否运通配符 *\r\n        allow_wildcard: false\r\n    }, lang);\r\n};\r\nexport default isDomain\r\n","/**\r\n * 域名解析记录公共校验\r\n *\r\n * */\r\n\r\nimport isMX from \"./isMX\";\r\nimport isTXT from \"./isTXT\";\r\nimport isNS from \"./isNS\";\r\nimport isCAA from \"./isCAA\";\r\nimport isSRV from \"./isSRV\";\r\nimport isA from \"@/validator/rr/isA\";\r\nimport isAAAA from \"@/validator/rr/isAAAA\";\r\nimport isCNAME from \"@/validator/rr/isCNAME\";\r\n\r\nexport const enum EnumRecordType {\r\n  A = \"A\",\r\n  AAAA = \"AAAA\",\r\n  NS = \"NS\",\r\n  MX = \"MX\",\r\n  CNAME = \"CNAME\",\r\n  CAA = \"CAA\",\r\n  SRV = \"SRV\",\r\n  TXT = \"TXT\"\r\n}\r\n\r\n/**\r\n * 域名解析记录公共校验\r\n * @param[str] 校验值\r\n * @param[type] 校验类型\r\n * */\r\nexport const isRdata = (str: any, type: EnumRecordType.A) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  switch (type.toUpperCase()) {\r\n    case EnumRecordType.A:\r\n      return isA(str);\r\n    case EnumRecordType.AAAA:\r\n      return isAAAA(str);\r\n    case EnumRecordType.CAA:\r\n      return isCAA(str);\r\n    case EnumRecordType.CNAME:\r\n      return isCNAME(str);\r\n    case EnumRecordType.MX:\r\n      return isMX(str);\r\n    case EnumRecordType.NS:\r\n      return isNS(str);\r\n    case EnumRecordType.SRV:\r\n      return isSRV(str);\r\n    case EnumRecordType.TXT:\r\n      return isTXT(str);\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n","import {isNumber} from \"../utils/isNumber\";\r\n\r\n/**\r\n * 数字取值范围校验\r\n * @param[str] 数值\r\n * @param[min] 最小值\r\n * @param[max] 最大值\r\n * */\r\nconst isInRange = (str: any, min: number, max: number) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  const val = Number(str);\r\n  return val >= min && val <= max;\r\n};\r\n\r\nexport default isInRange\r\n","import isInRange from \"../isInRange\";\r\n\r\n/**\r\n * 端口号校验\r\n * */\r\nconst isPort = (str: any) => {\r\n  return isInRange(str, 1, 65535);\r\n};\r\n\r\nexport default isPort;\r\n","/**\r\n *\r\n * 手机格式校验\r\n * @param[str]: 手机号\r\n * */\r\nconst isCellPhone = function (str: any) {\r\n  try {\r\n    const reg = /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/;\r\n    return reg.test(str);\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default isCellPhone\r\n","/* eslint-disable max-len */\r\nconst creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;\r\n/* eslint-enable max-len */\r\n\r\n/**\r\n * 信用卡格式验证\r\n * @param[str] 校验字符串\r\n * */\r\nexport default function isCreditCard(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += str;\r\n  const sanitized = str.replace(/[- ]+/g, '');\r\n  if(!creditCard.test(sanitized)) {\r\n    return false;\r\n  }\r\n  let sum = 0;\r\n  let digit;\r\n  let tmpNum;\r\n  let shouldDouble;\r\n  for (let i = sanitized.length - 1; i >= 0; i--) {\r\n    digit = sanitized.substring(i, (i + 1));\r\n    tmpNum = parseInt(digit, 10);\r\n    if(shouldDouble) {\r\n      tmpNum *= 2;\r\n      if(tmpNum >= 10) {\r\n        sum += ((tmpNum % 10) + 1);\r\n      } else {\r\n        sum += tmpNum;\r\n      }\r\n    } else {\r\n      sum += tmpNum;\r\n    }\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n  return !!((sum % 10) === 0 ? sanitized : false);\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 是否为整数判断\r\n * @param[str] 数值\r\n * @param[options] 参数\r\n *\r\n * */\r\nexport default function isInt(str: any, options?: {\r\n  allow_leading_zeroes?: Boolean,\r\n  min?: number;\r\n  max?: number;\r\n  lt?: number;\r\n  gt?: number;\r\n}) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  const int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\r\n  const intLeadingZeroes = /^[-+]?[0-9]+$/;\r\n\r\n  options = options || {};\r\n\r\n  // Get the regex to use for testing, based on whether\r\n  // leading zeroes are allowed or not.\r\n  let regex = (\r\n    options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ?\r\n      int : intLeadingZeroes\r\n  );\r\n\r\n  // Check min/max/lt/gt\r\n  let minCheckPassed = (!options.hasOwnProperty('min') || (typeof options.min !== 'undefined' && str >= options.min));\r\n  let maxCheckPassed = (!options.hasOwnProperty('max') || (typeof options.max !== 'undefined' && str <= options.max));\r\n  let ltCheckPassed = (!options.hasOwnProperty('lt') || (typeof options.lt !== 'undefined' && str < options.lt));\r\n  let gtCheckPassed = (!options.hasOwnProperty('gt') || (typeof options.gt !== 'undefined' && str > options.gt));\r\n\r\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\r\n}\r\n","import isInt from './isInt';\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 证件号码验证函数\r\n *\r\n * */\r\n\r\nconst identityCardValidators = {\r\n  PL: (str: string) => {\r\n    const weightOfDigits = {\r\n      1: 1,\r\n      2: 3,\r\n      3: 7,\r\n      4: 9,\r\n      5: 1,\r\n      6: 3,\r\n      7: 7,\r\n      8: 9,\r\n      9: 1,\r\n      10: 3,\r\n      11: 0,\r\n    };\r\n\r\n    if(str != null && str.length === 11 && isInt(str, { allow_leading_zeroes: true })) {\r\n      const digits = str.split('').slice(0, -1);\r\n      const sum = digits.reduce((acc, digit, index) =>\r\n        acc + (Number(digit) * weightOfDigits[index + 1]), 0);\r\n\r\n      const modulo = sum % 10;\r\n      const lastDigit = Number(str.charAt(str.length - 1));\r\n\r\n      if((modulo === 0 && lastDigit === 0) || lastDigit === 10 - modulo) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  ES: (str: string) => {\r\n    const DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;\r\n\r\n    const charsValue = {\r\n      X: 0,\r\n      Y: 1,\r\n      Z: 2,\r\n    };\r\n\r\n    const controlDigits = [\r\n      'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',\r\n      'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    // validate the control digit\r\n    const number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, char => charsValue[char]);\r\n\r\n    // @ts-ignore\r\n    return sanitized.endsWith(controlDigits[number % 23]);\r\n  },\r\n  FI: (str: string) => {\r\n    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated\r\n    if(str.length !== 11) {\r\n      return false;\r\n    }\r\n\r\n    if(!str.match(/^\\d{6}[\\-A\\+]\\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {\r\n      return false;\r\n    }\r\n\r\n    const checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';\r\n\r\n    const idAsNumber = (parseInt(str.slice(0, 6), 10) * 1000) + parseInt(str.slice(7, 10), 10);\r\n    const remainder = idAsNumber % 31;\r\n    const checkDigit = checkDigits[remainder];\r\n\r\n    return checkDigit === str.slice(10, 11);\r\n  },\r\n  IN: (str: string) => {\r\n    const DNI = /^[1-9]\\d{3}\\s?\\d{4}\\s?\\d{4}$/;\r\n\r\n    // multiplication table\r\n    const d = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],\r\n      [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],\r\n      [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],\r\n      [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],\r\n      [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],\r\n      [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],\r\n      [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],\r\n      [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],\r\n      [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\r\n    ];\r\n\r\n    // permutation table\r\n    const p = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],\r\n      [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],\r\n      [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],\r\n      [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],\r\n      [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],\r\n      [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],\r\n      [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    let c = 0;\r\n    let invertedArray = sanitized.replace(/\\s/g, '').split('').map(Number).reverse();\r\n\r\n    invertedArray.forEach((val, i) => {\r\n      c = d[c][p[(i % 8)][val]];\r\n    });\r\n\r\n    return c === 0;\r\n  },\r\n  IR: (str: string) => {\r\n    if(!str.match(/^\\d{10}$/)) return false;\r\n    str = (`0000${str}`).substr(str.length - 6);\r\n\r\n    if(parseInt(str.substr(3, 6), 10) === 0) return false;\r\n\r\n    const lastNumber = parseInt(str.substr(9, 1), 10);\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      sum += parseInt(str.substr(i, 1), 10) * (10 - i);\r\n    }\r\n\r\n    sum %= 11;\r\n\r\n    return (\r\n      (sum < 2 && lastNumber === sum) || (sum >= 2 && lastNumber === 11 - sum)\r\n    );\r\n  },\r\n  IT: function IT(str: string) {\r\n    if(str.length !== 9) return false;\r\n    if(str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana\r\n    return str.search(/C[A-Z]\\d{5}[A-Z]{2}/is) > -1;\r\n  },\r\n  NO: (str: string) => {\r\n    const sanitized = str.trim();\r\n    if(isNaN(Number(sanitized))) return false;\r\n    if(sanitized.length !== 11) return false;\r\n    if(sanitized === '00000000000') return false;\r\n\r\n    // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer\r\n    const f = sanitized.split('').map(Number);\r\n    let k1 = (11 - (((3 * f[0]) + (7 * f[1]) + (6 * f[2])\r\n      + (1 * f[3]) + (8 * f[4]) + (9 * f[5]) + (4 * f[6])\r\n      + (5 * f[7]) + (2 * f[8])) % 11)) % 11;\r\n    let k2 = (11 - (((5 * f[0]) + (4 * f[1]) + (3 * f[2])\r\n      + (2 * f[3]) + (7 * f[4]) + (6 * f[5]) + (5 * f[6])\r\n      + (4 * f[7]) + (3 * f[8]) + (2 * k1)) % 11)) % 11;\r\n\r\n    if(k1 !== f[9] || k2 !== f[10]) return false;\r\n    return true;\r\n  },\r\n  TH: (str: string) => {\r\n    if(!str.match(/^[1-8]\\d{12}$/)) return false;\r\n\r\n    // validate check digit\r\n    let sum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n      sum += parseInt(str[i], 10) * (13 - i);\r\n    }\r\n    return str[12] === ((11 - (sum % 11)) % 10).toString();\r\n  },\r\n  LK: (str: string) => {\r\n    const old_nic = /^[1-9]\\d{8}[vx]$/i;\r\n    const new_nic = /^[1-9]\\d{11}$/i;\r\n\r\n    if(str.length === 10 && old_nic.test(str)) return true;\r\n    else if(str.length === 12 && new_nic.test(str)) return true;\r\n    return false;\r\n  },\r\n  'he-IL': (str: string) => {\r\n    const DNI = /^\\d{9}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    const id = sanitized;\r\n\r\n    let sum = 0,\r\n      incNum;\r\n    for (let i = 0; i < id.length; i++) {\r\n      incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2\r\n      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total\r\n    }\r\n    return sum % 10 === 0;\r\n  },\r\n  'ar-LY': (str: string) => {\r\n    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2\r\n    const NIN = /^(1|2)\\d{11}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!NIN.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'ar-TN': (str: string) => {\r\n    const DNI = /^\\d{8}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'zh-CN': (str: string) => {\r\n    const provincesAndCities = [\r\n      '11', // 北京\r\n      '12', // 天津\r\n      '13', // 河北\r\n      '14', // 山西\r\n      '15', // 内蒙古\r\n      '21', // 辽宁\r\n      '22', // 吉林\r\n      '23', // 黑龙江\r\n      '31', // 上海\r\n      '32', // 江苏\r\n      '33', // 浙江\r\n      '34', // 安徽\r\n      '35', // 福建\r\n      '36', // 江西\r\n      '37', // 山东\r\n      '41', // 河南\r\n      '42', // 湖北\r\n      '43', // 湖南\r\n      '44', // 广东\r\n      '45', // 广西\r\n      '46', // 海南\r\n      '50', // 重庆\r\n      '51', // 四川\r\n      '52', // 贵州\r\n      '53', // 云南\r\n      '54', // 西藏\r\n      '61', // 陕西\r\n      '62', // 甘肃\r\n      '63', // 青海\r\n      '64', // 宁夏\r\n      '65', // 新疆\r\n      '71', // 台湾\r\n      '81', // 香港\r\n      '82', // 澳门\r\n      '91', // 国外\r\n    ];\r\n\r\n    const powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];\r\n\r\n    const parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\r\n\r\n    // @ts-ignore\r\n    const checkAddressCode = (addressCode: string) => provincesAndCities.includes(addressCode);\r\n\r\n    const checkBirthDayCode = (birDayCode: string) => {\r\n      const yyyy = parseInt(birDayCode.substring(0, 4), 10);\r\n      const mm = parseInt(birDayCode.substring(4, 6), 10);\r\n      const dd = parseInt(birDayCode.substring(6), 10);\r\n      const xdata = new Date(yyyy, mm - 1, dd);\r\n      if(xdata > new Date()) {\r\n        return false;\r\n        // eslint-disable-next-line max-len\r\n      } else if((xdata.getFullYear() === yyyy) && (xdata.getMonth() === mm - 1) && (xdata.getDate() === dd)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    const getParityBit = (idCardNo: string) => {\r\n      let id17 = idCardNo.substring(0, 17);\r\n\r\n      let power = 0;\r\n      for (let i = 0; i < 17; i++) {\r\n        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);\r\n      }\r\n\r\n      let mod = power % 11;\r\n      return parityBit[mod];\r\n    };\r\n\r\n    const checkParityBit = (idCardNo: string) => getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();\r\n\r\n\r\n    const check15IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = `19${idCardNo.substring(6, 12)}`;\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return true;\r\n    };\r\n\r\n    const check18IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{5}[1-9]\\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}(\\d|x|X)$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = idCardNo.substring(6, 14);\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return checkParityBit(idCardNo);\r\n    };\r\n\r\n    const checkIdCardNo = (idCardNo: string) => {\r\n      let check = /^\\d{15}|(\\d{17}(\\d|x|X))$/.test(idCardNo);\r\n      if(!check) return false;\r\n      if(idCardNo.length === 15) {\r\n        return check15IdCardNo(idCardNo);\r\n      }\r\n      return check18IdCardNo(idCardNo);\r\n    };\r\n    return checkIdCardNo(str);\r\n  },\r\n  'zh-TW': (str: string) => {\r\n    const ALPHABET_CODES = {\r\n      A: 10,\r\n      B: 11,\r\n      C: 12,\r\n      D: 13,\r\n      E: 14,\r\n      F: 15,\r\n      G: 16,\r\n      H: 17,\r\n      I: 34,\r\n      J: 18,\r\n      K: 19,\r\n      L: 20,\r\n      M: 21,\r\n      N: 22,\r\n      O: 35,\r\n      P: 23,\r\n      Q: 24,\r\n      R: 25,\r\n      S: 26,\r\n      T: 27,\r\n      U: 28,\r\n      V: 29,\r\n      W: 32,\r\n      X: 30,\r\n      Y: 31,\r\n      Z: 33,\r\n    };\r\n\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    if(!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;\r\n\r\n    // @ts-ignore\r\n    return Array.from(sanitized).reduce((sum, number, index) => {\r\n      if(index === 0) {\r\n        const code = ALPHABET_CODES[number];\r\n\r\n        return ((code % 10) * 9) + Math.floor(code / 10);\r\n      }\r\n\r\n      if(index === 9) {\r\n        return ((10 - (sum % 10)) - Number(number)) % 10 === 0;\r\n      }\r\n\r\n      return sum + (Number(number) * (9 - index));\r\n    }, 0);\r\n  },\r\n};\r\n\r\n/*\r\n// 身份证\r\nexport function validateIDCard(str) {\r\n  const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n  return reg.test(str)\r\n}\r\n*/\r\n\r\n/**\r\n * isIdentityCard\r\n * @param[str] any 证件号码\r\n * @param[locale] string 证件类型\r\n * */\r\nexport default function isIdentityCard(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false;\r\n  }\r\n  str = `${str}`;\r\n  if(locale in identityCardValidators) {\r\n    return identityCardValidators[locale](str);\r\n  } else if(locale === 'any') {\r\n    for (const key in identityCardValidators) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      if(identityCardValidators.hasOwnProperty(key)) {\r\n        const validator = identityCardValidators[key];\r\n        if(validator(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","/**\r\n * 密码强度验证\r\n *\r\n * */\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\nconst upperCaseRegex = /^[A-Z]$/;\r\nconst lowerCaseRegex = /^[a-z]$/;\r\nconst numberRegex = /^[0-9]$/;\r\nconst symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\r\n\r\nexport interface IsStrongPasswordOptions {\r\n  minLength: number;\r\n  minLowercase: number;\r\n  minUppercase: number;\r\n  minNumbers: number;\r\n  minSymbols: number;\r\n  returnScore: boolean;\r\n  pointsPerUnique: number;\r\n  pointsPerRepeat: number;\r\n  pointsForContainingLower: number;\r\n  pointsForContainingUpper: number;\r\n  pointsForContainingNumber: number;\r\n  pointsForContainingSymbol: number;\r\n}\r\n\r\nconst defaultOptions: IsStrongPasswordOptions = {\r\n  // 最小长度\r\n  minLength: 8,\r\n  // 最少小写字母个数\r\n  minLowercase: 1,\r\n  // 最少大写字母个数\r\n  minUppercase: 1,\r\n  // 最少数字个数\r\n  minNumbers: 1,\r\n  // 最少特殊符号个数\r\n  minSymbols: 1,\r\n  // 返回密码强度评分\r\n  returnScore: false,\r\n  pointsPerUnique: 1,\r\n  pointsPerRepeat: 0.5,\r\n  pointsForContainingLower: 10,\r\n  pointsForContainingUpper: 10,\r\n  pointsForContainingNumber: 10,\r\n  pointsForContainingSymbol: 10,\r\n};\r\n\r\n/* Counts number of occurrences of each char in a string\r\n * could be moved to util/ ?\r\n*/\r\nfunction countChars(str: string) {\r\n  let result = {};\r\n  Array.from(str).forEach((char) => {\r\n    let curVal = result[char];\r\n    if(curVal) {\r\n      result[char] += 1;\r\n    } else {\r\n      result[char] = 1;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/* Return information about a password */\r\nexport interface IAnalysisType {\r\n  length: number;\r\n  uniqueChars: number;\r\n  uppercaseCount: number;\r\n  lowercaseCount: number;\r\n  numberCount: number;\r\n  symbolCount: number;\r\n}\r\n\r\nfunction analyzePassword(password: string) {\r\n  let charMap = countChars(password);\r\n  let analysis: IAnalysisType = {\r\n    length: password.length,\r\n    uniqueChars: Object.keys(charMap).length,\r\n    uppercaseCount: 0,\r\n    lowercaseCount: 0,\r\n    numberCount: 0,\r\n    symbolCount: 0,\r\n  };\r\n  Object.keys(charMap).forEach((char) => {\r\n    /* istanbul ignore else */\r\n    if(upperCaseRegex.test(char)) {\r\n      analysis.uppercaseCount += charMap[char];\r\n    } else if(lowerCaseRegex.test(char)) {\r\n      analysis.lowercaseCount += charMap[char];\r\n    } else if(numberRegex.test(char)) {\r\n      analysis.numberCount += charMap[char];\r\n    } else if(symbolRegex.test(char)) {\r\n      analysis.symbolCount += charMap[char];\r\n    }\r\n  });\r\n  return analysis;\r\n}\r\n\r\nfunction scorePassword(analysis: IAnalysisType, scoringOptions: IsStrongPasswordOptions) {\r\n  let points = 0;\r\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\r\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\r\n  if(analysis.lowercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingLower;\r\n  }\r\n  if(analysis.uppercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingUpper;\r\n  }\r\n  if(analysis.numberCount > 0) {\r\n    points += scoringOptions.pointsForContainingNumber;\r\n  }\r\n  if(analysis.symbolCount > 0) {\r\n    points += scoringOptions.pointsForContainingSymbol;\r\n  }\r\n  return points;\r\n}\r\n\r\n/**\r\n * 密码强度验证\r\n *\r\n * @param[str]  密码\r\n * @param[options]  验证参数\r\n * */\r\nexport default function isStrongPassword(str: any, options?: Partial<IsStrongPasswordOptions>) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const analysis = analyzePassword(str);\r\n  const new_options: IsStrongPasswordOptions = {\r\n    ...defaultOptions,\r\n    ...options\r\n  };\r\n  if(new_options.returnScore) {\r\n    return scorePassword(analysis, new_options);\r\n  }\r\n  return analysis.length >= new_options.minLength\r\n    && analysis.lowercaseCount >= new_options.minLowercase\r\n    && analysis.uppercaseCount >= new_options.minUppercase\r\n    && analysis.numberCount >= new_options.minNumbers\r\n    && analysis.symbolCount >= new_options.minSymbols;\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n\r\n/**\r\n * 银行卡号合法性验证\r\n * @param[str] any 银行卡\r\n * description： 15位或者16位或者19位\r\n * */\r\nconst IsBankCard = (str: any) => {\r\n  // 建行16、19，农行19，工行19、交通17、民生16、兴业18、招行12、16、19\r\n  const reg = /^([1-9]{1})(\\d{11}|\\d{15}|\\d{16}|\\d{17}|\\d{18})$/;\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  return reg.test(str)\r\n}\r\n\r\nexport default IsBankCard\r\n","/**\r\n * @names：数组分组提交数据\r\n * @params[data] 数据\r\n * @params[groupLen] 组员\r\n * */\r\nexport const arrayDataGrouping = (data = [], groupLen = 10) => {\r\n  if(!Array.isArray(data) || !data.length) {\r\n    return undefined\r\n  }\r\n  // 数据长度\r\n  let dataLen = data.length;\r\n  if(dataLen <= groupLen) {\r\n    return [data]\r\n  }\r\n  data = JSON.parse(JSON.stringify(data));\r\n  // 当前数据可分组数\r\n  let group = Math.ceil(dataLen / groupLen);\r\n  let groupData = [];\r\n  for (let i = 1; i < group; i++) {\r\n    groupData.push(data.splice(0, groupLen))\r\n  }\r\n  groupData.push(data);\r\n  return groupData;\r\n};\r\n","\r\n/**\r\n * name：函数防抖\r\n * description：函数触发后，如果函数还没执行完成，则打断执行，重新执行\r\n * @params[fn]  回调函数\r\n * @params[delay]  定时器延时\r\n */\r\nexport const debounce = (fn = () => {\r\n}, delay = 200) => {\r\n  let timer: any = null;\r\n  return () => {\r\n    // 再次触发时，立即重新执行\r\n    // if (timer) {\r\n    clearTimeout(timer);\r\n    timer = null;\r\n    // }\r\n    timer = setTimeout(fn, delay);\r\n\r\n  }\r\n};\r\n","\r\n/**\r\n * 对象深度克隆\r\n *\r\n * @param[obj] 要克隆的对象\r\n */\r\nexport function deepClone(obj: any[] | { [propName: string]: any }) {\r\n  let newObj = Array.isArray(obj) ? [] : {};\r\n  if(obj && typeof obj === \"object\") {\r\n    for (let key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        newObj[key] = (obj && typeof obj[key] === 'object') ? deepClone(obj[key]) : obj[key];\r\n      }\r\n    }\r\n  }\r\n  return newObj\r\n}\r\n","\r\n/**\r\n * 储存 cookie 值\r\n * @param[name] cookie 关键字\r\n * @param[data] cookie 值\r\n * @param[objHours] 储存时间\r\n * @return boolean  储存成功与否\r\n */\r\nexport const setCookie = (name:string, data: any, objHours: number) => {\r\n  if(!name || !data) {\r\n    return false\r\n  }\r\n  if(typeof data === \"object\") {\r\n    data = JSON.stringify(data)\r\n  }\r\n  // 编码\r\n  let str = name + \"=\" + encodeURI(data);\r\n  // 为0时不设定过期时间，浏览器关闭时cookie自动消失\r\n  if(objHours > 0) {\r\n    const date = new Date();\r\n    const ms = objHours * 3600 * 1000;\r\n    date.setTime(date.getTime() + ms);\r\n    str += \"; expires=\" + date.toUTCString();\r\n  }\r\n  document.cookie = str;\r\n  return  true\r\n}\r\n\r\n\r\n/**\r\n * 获取 cookie 值\r\n * @param[name] cookie 关键字\r\n * @return any  获取到的值\r\n */\r\nexport const getCookieValue = (name: string)=> {\r\n  if(!name) return false;\r\n  let prefix = name + \"=\";\r\n  let start = document.cookie.indexOf(prefix);\r\n\r\n  if(start === -1) {\r\n    return null;\r\n  }\r\n\r\n  let end = document.cookie.indexOf(\";\", start + prefix.length);\r\n  if(end === -1) {\r\n    end = document.cookie.length;\r\n  }\r\n\r\n  let value = document.cookie.substring(start + prefix.length, end);\r\n  value = decodeURI(value);\r\n  try {\r\n    return JSON.parse(value)\r\n  } catch (e) {\r\n    return value\r\n  }\r\n}\r\n","/** =======================================================\r\n * @names：  域名相关公共方法\r\n * @author：jisen\r\n * @time：  2022-07-04\r\n * @description：域名相关公共方法\r\n * ======================================================== */\r\n/**\r\n *  获取【域名】的TLD\r\n *  abc.com => com\r\n *  abc.com.cn =>cn\r\n *  blog.zdns.com.cn => zdns.com.cn\r\n * */\r\nexport function getDomainTld(domain: any) {\r\n  if(typeof domain !== 'string') {\r\n    return ''\r\n  }\r\n  let index = domain.indexOf('.')\r\n  if(index > -1) {\r\n    return domain.slice(index + 1);\r\n  }\r\n  return ''\r\n}\r\n\r\n/**\r\n * 域名可注册年限判断\r\n * .co 为五年\r\n * 其它十年\r\n * @params[tld] 顶级域 com|co|net\r\n * */\r\nexport function getDomainPeriod(tld: any): number {\r\n  if(typeof tld !== 'string') {\r\n    return 10\r\n  }\r\n  // 注册时间为5年的顶级域\r\n  const tld_arr = ['co'];\r\n\r\n  let _period = 10;\r\n  if(tld_arr.indexOf(tld) > -1) {\r\n    _period = 5;\r\n  }\r\n  return _period;\r\n}\r\n","/**\r\n * 存储 localStorage\r\n * @param[name] storage 关键字\r\n * @param[data] storage 值\r\n * @return boolean  储存成功与否\r\n */\r\nexport const setLocalStorage = (name: string, data: any) => {\r\n  if(!name) return false;\r\n  if(typeof data !== 'string') {\r\n    data = JSON.stringify(data)\r\n  }\r\n  window.localStorage.setItem(name, data);\r\n  return true\r\n}\r\n\r\n/**\r\n * 获取localStorage\r\n * @param[name] storage 关键字\r\n * @return any  获取到的值\r\n */\r\nexport const getLocalStorage = (name: string) => {\r\n  if(!name) return false;\r\n  const value = window.localStorage.getItem(name);\r\n  try {\r\n    return JSON.parse(<string>value)\r\n  } catch (e) {\r\n    return value\r\n  }\r\n}\r\n\r\n/**\r\n * 删除localStorage\r\n * @param[name] storage 关键字\r\n * @return boolean 删除成功与否\r\n */\r\nexport const removeLocalStorage = (name: string) => {\r\n  if(!name) return false;\r\n  window.localStorage.removeItem(name);\r\n  return true\r\n}\r\n","/**\r\n * 存储 sessionStorage\r\n * @param[name] session关键字\r\n * @param[data] session值\r\n * @return boolean  储存成功与否\r\n */\r\nexport const setSessionStorage = (name: string, data: any) => {\r\n  if(!name) return false;\r\n  if(typeof data !== 'string') {\r\n    data = JSON.stringify(data)\r\n  }\r\n  window.sessionStorage.setItem(name, data);\r\n  return true\r\n}\r\n\r\n/**\r\n * 获取 sessionStorage\r\n * @param[name] session关键字\r\n * @return any  获取到的值\r\n */\r\nexport const getSessionStorage = (name: string) => {\r\n  if(!name) return false;\r\n  const value = window.sessionStorage.getItem(name);\r\n  try {\r\n    return JSON.parse(<string>value)\r\n  } catch (e) {\r\n    return value\r\n  }\r\n  // return value ? JSON.parse(value) : value\r\n}\r\n\r\n/**\r\n * 删除 sessionStorage\r\n * @param[name] session关键字\r\n * @return boolean 删除成功与否\r\n */\r\nexport const removeSessionStorage = (name: string) => {\r\n  if(!name) return false;\r\n  window.sessionStorage.removeItem(name);\r\n  return true\r\n}\r\n","/**\r\n *  计算字符串长度\r\n *  将字符串转Unicode计算 一个中文 = 3个子节\r\n *\r\n * @param[str] 字符串\r\n */\r\nexport function getStrByteLength(str: string) {\r\n  let totalLength = 0;\r\n  for (let i = 0, len = str.length; i < len; i++) {\r\n    const charCode = str.charCodeAt(i);\r\n    if (charCode < 0x007f) {\r\n      totalLength += 1;\r\n    } else if ((0x0080 <= charCode) && (charCode <= 0x07ff)) {\r\n      totalLength += 2;\r\n    } else if ((0x0800 <= charCode) && (charCode <= 0xffff)) {\r\n      totalLength += 3;\r\n    }\r\n  }\r\n  console.log(\"信息长度为: \" + totalLength + \" 字节\");\r\n  return totalLength;\r\n}\r\n","/**\r\n * 获取url中的参数\r\n *\r\n * @param[name] 参数名\r\n * @param[param] 参数  'name=xx&age=124'\r\n */\r\nexport function getUrlParam(name: string, param: string) {\r\n  //构造一个含有目标参数的正则表达式对象\r\n  let reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\r\n  //匹配目标参数\r\n  let _params = param || window.location.search.substring(1);\r\n  let r = _params.match(reg);\r\n  //返回参数值\r\n  if(r !== null) return decodeURIComponent(r[2]);\r\n  return null;\r\n}\r\n","import { specialSymbolToComma } from \"./specialSymbolToComma\";\r\n\r\n/**\r\n * @names：textarea 输入内容格式化\r\n * @params[str] string\r\n * @return [] Array\r\n * */\r\nexport const inputTextareaFormat = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return []\r\n  }\r\n  // 去除首尾空格\r\n  str = str.trim();\r\n  // 大写转小写\r\n  str = str.toLowerCase();\r\n  // 去除多余的空格\r\n  str = str.replace(/\\s+|\\n+/g, ' ');\r\n  // 特殊符号转 ,\r\n  str = specialSymbolToComma(str);\r\n  // 去重\r\n  str = [...new Set(str.split(','))];\r\n  return str.filter((item:string) => item !== '');\r\n};\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 布尔值判断\r\n * @param[str]: 布尔值\r\n * @param[extend]: 是否支持拓展\r\n * @param[trueBooleans]: 拓展布尔值\r\n * */\r\nconst isBooleanTrue = (str: any, extend: Boolean, trueBooleans = ['yes', 'true', '1']) => {\r\n  const type_str = typeof str;\r\n  if(type_str === 'boolean') {\r\n    return str\r\n  }\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  if(extend) {\r\n    str = `${str}`.toLowerCase()\r\n    return trueBooleans.includes(str);\r\n  }\r\n}\r\n\r\nexport default isBooleanTrue\r\n","/**\r\n * 子节长度判断\r\n *@param[str] any 字符串\r\n *@param[option] 参数 {min: number, max:number}\r\n * */\r\nexport interface IsByteLengthOptions {\r\n  min?: number;\r\n  max: number;\r\n}\r\n\r\nexport default function isByteLength(str: any, options: IsByteLengthOptions) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  let min;\r\n  let max;\r\n  if(typeof (options) === 'object') {\r\n    min = options.min || 0;\r\n    max = options.max;\r\n  } else {\r\n    // backwards compatibility: isByteLength(str, min [, max])\r\n    min = arguments[1];\r\n    max = arguments[2];\r\n  }\r\n  const len = encodeURI(str).split(/%..|./).length - 1;\r\n  return len >= min && (typeof max === 'undefined' || len <= max);\r\n}\r\n\r\n","/**\r\n *\r\n * 邮箱格式正则校验\r\n * @param[str] 邮箱\r\n * */\r\nconst isEmail = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  // 用户名@主机名”\r\n  const reg = /^(?!.*?[._-]{2})[a-z0-9][a-z0-9._-]{0,62}[a-z0-9]@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]{2,63}$/i;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isEmail\r\n","import isValidParamsTypes from \"./isValidParamsTypes\";\r\nimport filterStringSpace from \"./filterStringSpace\";\r\n\r\n\r\n/**\r\n * 判断字符串是否为空值\r\n * @param[str] 需要判断的值\r\n * @param[ignoreSpace] boolean 是否忽略空格\r\n * */\r\nexport const isEmptyStr = (str: any, ignoreSpace: boolean): boolean => {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  str = `${str}`;\r\n\r\n  if(!ignoreSpace) {\r\n    str = filterStringSpace(str)\r\n  }\r\n  return !(str.length === 0);\r\n}\r\n\r\n\r\n/**\r\n * @names：判断数组是否为空数据\r\n * @params[data] Array\r\n * */\r\nexport const isEmptyArray = (data: any): boolean => {\r\n  return !Array.isArray(data) || !data.length\r\n};\r\n\r\n","/**\r\n * 以太坊地址校验\r\n * @param[str] 以太坊地址\r\n * */\r\nconst isEthereumAddress = (str: any) => {\r\n  const ethReg = /^(0x)[0-9a-f]{40}$/i;\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  return ethReg.test(str);\r\n}\r\nexport default isEthereumAddress\r\n","/**\r\n *\r\n * 固定电话格式校验\r\n * @param[str]: 电话\r\n * eg: (0827-7977654) || (7977654)\r\n * */\r\nconst  isFixedPhone = (str: string) => {\r\n  const reg = /^(\\d{3,4}-|\\s)?\\d{7,14}$/;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isFixedPhone\r\n","import isFQDN from \"../http/isFQDN\";\r\n\r\n/**\r\n * 主机合法性校验\r\n * */\r\nconst isHost = (str: string) => {\r\n  const specialHosts = '@';\r\n  return (\r\n    str.indexOf(specialHosts) > -1 ||\r\n    isFQDN(str, {\r\n      // 是否包含TLD\r\n      require_tld: true,\r\n      // 是否允许包含下划线\r\n      allow_underscores: true,\r\n      // 是否允许 . 号结尾\r\n      allow_trailing_dot: false,\r\n      // 是否允许数字TLD号结尾\r\n      allow_numeric_tld: false,\r\n      // 是否运通配符 *\r\n      allow_wildcard: false\r\n    })\r\n  );\r\n};\r\n\r\nexport default isHost\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n\r\n/**\r\n * IMEI校验\r\n * @param[str] imei\r\n * @param[allow_hyphens] boolean 允许连字符\r\n * */\r\nexport default function isIMEI(str: any, allow_hyphens = false) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  str = `${str}`;\r\n\r\n  let imeiRegexWithoutHypens = /^[0-9]{15}$/;\r\n  let imeiRegexWithHypens = /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/;\r\n  // default regex for checking imei is the one without hyphens\r\n\r\n  let imeiRegex = imeiRegexWithoutHypens;\r\n\r\n  if(allow_hyphens) {\r\n    imeiRegex = imeiRegexWithHypens;\r\n  }\r\n\r\n\r\n  if(!imeiRegex.test(str)) {\r\n    return false;\r\n  }\r\n\r\n  str = str.replace(/-/g, '');\r\n\r\n  let sum = 0,\r\n    mul = 2,\r\n    l = 14;\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    const digit = str.substring(l - i - 1, l - i);\r\n    const tp = parseInt(digit, 10) * mul;\r\n    if(tp >= 10) {\r\n      sum += (tp % 10) + 1;\r\n    } else {\r\n      sum += tp;\r\n    }\r\n    if(mul === 1) {\r\n      mul += 1;\r\n    } else {\r\n      mul -= 1;\r\n    }\r\n  }\r\n  const chk = ((10 - (sum % 10)) % 10);\r\n  return chk === parseInt(str.substring(14, 15), 10);\r\n\r\n}\r\n","import utilToString from '../utils/utilToString';\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\nimport utilTypeOf from \"../utils/utilTypeOf\";\r\n\r\n/**\r\n * 是否包含数据判断\r\n * @param[str] 要判断的数据\r\n * @param[options] 匹配的数据\r\n * */\r\nexport default function isIn(str: any, options: any) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  let i;\r\n  let options_type = utilTypeOf(options)\r\n  if(options_type === 'array') {\r\n    const array: any[] = [];\r\n    for (i in options) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if({}.hasOwnProperty.call(options, i)) {\r\n        array[i] = utilToString(options[i]);\r\n      }\r\n    }\r\n    return array.indexOf(str) >= 0;\r\n  } else if(options_type === 'object') {\r\n    return options.hasOwnProperty(str);\r\n  } else if(options_type === 'function') {\r\n    return options.indexOf(str) >= 0;\r\n  }\r\n  return false;\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 邮编格式验证\r\n * @param[str] 邮编\r\n * @param[locale] 邮编所属地\r\n * */\r\nexport default function isPostalCode(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  // common patterns\r\n  const threeDigit = /^\\d{3}$/;\r\n  const fourDigit = /^\\d{4}$/;\r\n  const fiveDigit = /^\\d{5}$/;\r\n  const sixDigit = /^\\d{6}$/;\r\n\r\n  const patterns = {\r\n    AD: /^AD\\d{3}$/,\r\n    AT: fourDigit,\r\n    AU: fourDigit,\r\n    AZ: /^AZ\\d{4}$/,\r\n    BE: fourDigit,\r\n    BG: fourDigit,\r\n    BR: /^\\d{5}-\\d{3}$/,\r\n    BY: /2[1-4]{1}\\d{4}$/,\r\n    CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\r\n    CH: fourDigit,\r\n    CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\r\n    CZ: /^\\d{3}\\s?\\d{2}$/,\r\n    DE: fiveDigit,\r\n    DK: fourDigit,\r\n    DO: fiveDigit,\r\n    DZ: fiveDigit,\r\n    EE: fiveDigit,\r\n    ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\r\n    FI: fiveDigit,\r\n    FR: /^\\d{2}\\s?\\d{3}$/,\r\n    GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\r\n    GR: /^\\d{3}\\s?\\d{2}$/,\r\n    HR: /^([1-5]\\d{4}$)/,\r\n    HT: /^HT\\d{4}$/,\r\n    HU: fourDigit,\r\n    ID: fiveDigit,\r\n    IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\r\n    IL: /^(\\d{5}|\\d{7})$/,\r\n    IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\r\n    IR: /\\b(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}\\b/,\r\n    IS: threeDigit,\r\n    IT: fiveDigit,\r\n    JP: /^\\d{3}\\-\\d{4}$/,\r\n    KE: fiveDigit,\r\n    KR: /^(\\d{5}|\\d{6})$/,\r\n    LI: /^(948[5-9]|949[0-7])$/,\r\n    LT: /^LT\\-\\d{5}$/,\r\n    LU: fourDigit,\r\n    LV: /^LV\\-\\d{4}$/,\r\n    LK: fiveDigit,\r\n    MX: fiveDigit,\r\n    MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\r\n    MY: fiveDigit,\r\n    NL: /^\\d{4}\\s?[a-z]{2}$/i,\r\n    NO: fourDigit,\r\n    NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\r\n    NZ: fourDigit,\r\n    PL: /^\\d{2}\\-\\d{3}$/,\r\n    PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\r\n    PT: /^\\d{4}\\-\\d{3}?$/,\r\n    RO: sixDigit,\r\n    RU: sixDigit,\r\n    SA: fiveDigit,\r\n    SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\r\n    SG: sixDigit,\r\n    SI: fourDigit,\r\n    SK: /^\\d{3}\\s?\\d{2}$/,\r\n    TH: fiveDigit,\r\n    TN: fourDigit,\r\n    TW: /^\\d{3}(\\d{2})?$/,\r\n    UA: fiveDigit,\r\n    US: /^\\d{5}(-\\d{4})?$/,\r\n    ZA: fourDigit,\r\n    ZM: fiveDigit,\r\n  };\r\n  if(locale in patterns) {\r\n    return patterns[locale].test(str);\r\n  } else if(locale === 'any') {\r\n    for (const key in patterns) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if(patterns.hasOwnProperty(key)) {\r\n        const pattern = patterns[key];\r\n        if(pattern.test(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","/**\r\n * A记录【Address】 => 将域名指向一个IPV4地址\r\n *  使用场景: 添加 A 记录可实现将域名指向 IP 地址。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）。\r\n *  解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。\r\n *  记录值：记录值为 IP 地址，填写 IPv4 地址。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport { isIPv4 } from \"../http/IP\";\r\n\r\nconst isA = (str: string) => {\r\n  return isIPv4(str);\r\n\r\n};\r\nexport default isA\r\n","/**\r\n * AAAA【AAAA record】  => 将域名指向一个IPV6地址\r\n * 使用场景：当预期是实现访问者通过 IPv6 地址访问网站，可以使用 AAAA 记录实现。\r\n * 主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）\r\n * 解析线路：默认为必选项，未设置会导致部分用户无法访问；\r\n * 记录值：记录值为IP地址，填写 IPV6 地址\r\n * TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport { isIPv6 } from \"../http/IP\";\r\n\r\nconst isAAAA = (str: string) => {\r\n  return isIPv6(str);\r\n\r\n};\r\nexport default isAAAA\r\n","/**\r\n * CAA  =>  CA证书颁发机构授权校验\r\n *  使用场景： CAA(Certificate Authority Authorization)，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。\r\n *  域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。\r\n *  CAA记录的格式为： [flag] [tag] [value]，是由一个标志字节的[flag]和一个被称为属性的[tag]-[value]（标签-值）对组成。您可以将多个CAA字段添加到域名的DNS记录中。\r\n * ------> [flag]：无符号整数（目前仅支持0和128），用于标志认证机构。通常情况下填0，表示如果颁发证书机构无法识别本条信息，就忽略。\r\n * ------> [tag]：支持 issue、issuewild 和 iodef。\r\n * --------> issue：CA授权单个证书颁发机构发布的 任何类型 域名证书。\r\n * --------> issuewild：CA授权单个证书颁发机构发布主机名的 通配符 证书。\r\n * --------> iodef：CA可以将违规的颁发记录URL发送给某个电子邮箱。\r\n * ------> [value]： CA的域名或用于违规通知的电子邮箱。\r\n */\r\nimport isInRange from \"../isInRange\";\r\nimport utilStringToArray from \"../../utils/utilStringToArray\";\r\n\r\n// （如：0 iodef \"mailto:admin@dns-example.com\"）\r\n// （如：0 issue \"symantec.com\"）\r\nconst isCAA = (str: any) => {\r\n  const caaValueRegex = /^\"[\\w-:./@]{1,255}\"$/;\r\n  const caaTags = ['issue', 'issuewild', 'iodef'];\r\n  const values = utilStringToArray(str);\r\n  return (\r\n    values.length === 3 &&\r\n    isInRange(values[0], 0, 255) &&\r\n    caaTags.indexOf(values[1]) !== -1 &&\r\n    caaValueRegex.test(values[2])\r\n  );\r\n};\r\nexport default isCAA\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n/**\r\n * CNAME【别名解析 - Canonical Name】  => 将域名指向另外一个域名\r\n *  使用场景: 当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入“ www”；如需实现dns-example.com的解析，主机记录输入“@”）\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析。\r\n *  记录值：记录值为 CNAME 指向的域名，只可以填写域名。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\nconst isCNAME = (str: string) => {\r\n  return isDomain(str)\r\n}\r\n\r\nexport default isCNAME;\r\n","/**\r\n * MX【邮件交换记录 - Mail Exchanger】  => 将域名指向邮件服务器地址\r\n *  使用场景：设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为mail exchanger，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给“vincen@example.com”时，系统将对“example.com”进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。\r\n *  主机记录：一般是指子域名的前缀，（要做xxx@dns-example.com的邮箱，所以主机记录输入“ @ ”；要做xxx@mail.dns-example.com，如果主机记录填 mail）。\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析，邮件无法收取；\r\n *  记录值：输入内容通过联系邮箱注册商提供。例如阿里云邮提供的需要配置的解析记录值是 mx1.qiye.aliyun.com；\r\n *  MX优先级：输入内容通过联系邮箱注册商提供，MX 优先级的数值越低，优先级别就越高（如下图，邮件会先尝试发送到 MX 优先级为 5 的mx1.qiye.aliyun.com，如果尝试失败，才会发送到 MX 优先级为10 的mx2.qiye.aliyun.com）。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from '../http/isDomain'\r\n\r\nconst isMX = (str: string) => {\r\n  if(!str) {\r\n    return false\r\n  }\r\n\r\n  return isDomain(str)\r\n\r\n};\r\nexport default isMX;\r\n","/**\r\n * NS【Name Server - 域名服务器记录】  => 将子域名指定其他DNS服务器解析\r\n *  使用场景：如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。\r\n *  主机记录：一般是指子域名的前缀（如需将子域名为www.dns-example.com 的解析授权给腾讯云解析的DNS服务器进行解析管理，只需要在主机记录处填写 www 即可）。\r\n *  解析线路：默认为必填项，未设置默认线路会导致部分用户无法解析。\r\n *  记录值：记录值为要授权的 DNS 服务器域名，例如腾讯云解析的DNS服务器域名f1g1ns1.dnspod.net。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from \"../http/isDomain\";\r\n\r\n\r\nconst isNS = (str: string) => {\r\n  return isDomain(str)\r\n}\r\n\r\nexport default isNS\r\n","import isDomain from \"../http/isDomain\";\r\nimport isPort from \"../http/isPort\"\r\nimport utilStringToArray from \"../../utils/utilStringToArray\";\r\nimport isInRange from \"../isInRange\";\r\n\r\n\r\n/**\r\n * SRV【服务定位（SRV）资源记录】  => 记录提供特定的服务的服务器\r\n *  使用场景： SRV 记录用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。\r\n *  主机记录： 格式为 服务的名字.协议的类型。\r\n *    例如：_sip._tcp\r\n *  解析线路： 默认 为必选项，未设置默认线路会导致部分用户无法解析\r\n *  记录值： 格式为 【优先级】 【权重】 【端口】 目标地址 ，每项中间需以空格分隔。\r\n *    例如：0 5 5060 sipserver.example.com\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n\r\n * */\r\nconst isSRV = (str: string) => {\r\n  const values = utilStringToArray(str);\r\n  return (\r\n    values.length === 4 &&\r\n    isInRange(values[0], 0, 65535) &&\r\n    isInRange(values[1], 0, 65535) &&\r\n    isPort(values[2]) &&\r\n    isDomain(values[3])\r\n  );\r\n};\r\n\r\nexport default isSRV\r\n","/**\r\n * TXT  => 文本长度限制512，通常做SPF记录（反垃圾邮件）\r\n *  使用场景：如果希望对域名进行标识和说明，可以使用 TXT 记录， TXT 记录多用来做 SPF 记录（反垃圾邮件）。\r\n *  主机记录：一般是指子域名的前缀（如需为子域名为 www.dns-example.com 添加 TXT 记录， 主机记录输入 www；如需为dns-example.com添加TXT记录，主机记录输入 @）\r\n *  解析线路：默认 为必选项，未设置会导致部分用户无法解析。\r\n *  记录值：常用情况TXT 记录是用来做 SPF 反垃圾邮件的，最典型的 SPF 格式的 TXT 记录例子为“v=spf1 a mx ~all”，表示只有这个域名的 A 记录和 MX 记录中的 IP 地址有权限使用这个域名发送邮件。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\n/**\r\n * TXT记录，一般指某个主机名或域名的标识和说明。如：admin IN TXT \"管理员, 电话：XXXXXXXXXXX\"，mail IN TXT \"邮件主机，存放在xxx , 管理人：AAA\"，Jim IN TXT \"contact: abc@mailserver.com\"，也就是说，通过设置TXT记录内容可以使别人更方便地联系到你。TXT 记录常用的方式还有做 SPF 记录（反垃圾邮件）和SSL证书的DNS验证等。\r\n * */\r\n\r\nconst isTXT = (str: string) => {\r\n  return str.length > 255;\r\n}\r\n\r\nexport default isTXT\r\n","import { isNumber } from \"@/utils/isNumber\";\r\n\r\n/**\r\n * TTL【Time-To-Live】 => 为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *  TTL值是指全国各地的localdns服务器中缓存解析结果的时间周期。\r\n *  1 . 当各地的localdns服务器接接收到解析请求查询时，就会向权威DNS（例如云解析DNS）发起解析请求查询，获取到解析结果。\r\n *  2 . localdns会将查询到的解析结果，保存到本地一段时间。保存的这个时间周期，就是根据TTL设置而来的。在保存的这个时间周期内，如果各地localdns再接收到此域名的解析请求查询，是不会再向权威DNS发起请求查询的，而是直接将本地保存的解析结果返回给用户。\r\n *  3 . 当localdns本地缓存的时间到期后，就会清除该解析记录的缓存结果，清除后，如果各地localdns再接收到此域名的解析请求查询，则会重新向权威DNS（例如云解析DNS）发起解析请求查询，获取最新的解析结果。\r\n *\r\n *  */\r\nconst isTTL = (str: string | number, maxTTL: 65535) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  if(isNumber(str)) {\r\n    let ttl = Number(str);\r\n    return ttl > 0 && ttl <= maxTTL;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default isTTL\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 纳税人识别码 合法性验证\r\n * @param[str] any 识别码\r\n * */\r\nconst isTaxpayerNo = (str: any) => {\r\n  const reg = /^[0-9A-Z]{15,18}$/i;\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isTaxpayerNo\r\n","/**\r\n * URL 正在校验\r\n *\r\n * */\r\nimport isFQDN from './http/isFQDN';\r\nimport { isIP, isIPv6 } from './http/IP';\r\n\r\n/*\r\noptions for isURL method\r\n\r\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\r\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\r\nprotocols - valid protocols can be modified with this option\r\nrequire_host - if set as false isURL will not check if host is present in the URL\r\nrequire_port - if set as true isURL will check if port is present in the URL\r\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\r\nvalidate_length - if set as false isURL will skip string length validation (IE maximum is 2083)\r\n\r\n*/\r\n\r\n\r\nexport type TProtocols = Array<'http' | 'https' | 'ftp'>;\r\nexport type TCheckHostMatches = Array<string | RegExp>;\r\n\r\nexport interface IIsURLDefaultUrlOptions {\r\n  protocols: TProtocols;\r\n  require_tld: boolean;\r\n  require_protocol: boolean;\r\n  require_host: boolean;\r\n  require_port: boolean;\r\n  require_valid_protocol: boolean;\r\n  allow_underscores: boolean;\r\n  allow_trailing_dot: boolean;\r\n  allow_protocol_relative_urls: boolean;\r\n  allow_fragments: boolean;\r\n  allow_query_components: boolean;\r\n  validate_length: boolean;\r\n  disallow_auth?: boolean;\r\n  host_whitelist?: TCheckHostMatches;\r\n  host_blacklist?: TCheckHostMatches;\r\n}\r\n\r\n\r\n/**\r\n * URL合法性校验\r\n * @param[url]  url\r\n * @param[options] 校验参数\r\n * */\r\nexport default function isURL(url: any, options: Partial<IIsURLDefaultUrlOptions>) {\r\n\r\n\r\n  const default_url_options: IIsURLDefaultUrlOptions = {\r\n    protocols: ['http', 'https', 'ftp'],\r\n    require_tld: true,\r\n    require_protocol: false,\r\n    require_host: true,\r\n    require_port: false,\r\n    require_valid_protocol: true,\r\n    allow_underscores: false,\r\n    allow_trailing_dot: false,\r\n    allow_protocol_relative_urls: false,\r\n    allow_fragments: true,\r\n    allow_query_components: true,\r\n    validate_length: true,\r\n  };\r\n\r\n  const wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\r\n\r\n  function isRegExp(obj: RegExp | string) {\r\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\r\n  }\r\n\r\n  function checkHost(host: string, matches: TCheckHostMatches) {\r\n    for (let i = 0; i < matches.length; i++) {\r\n      let match = matches[i];\r\n      // @ts-ignore\r\n      if(host === match || (isRegExp(match) && match.test(host))) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if(typeof url !== \"string\") {\r\n    return false\r\n  }\r\n  if(!url || /[\\s<>]/.test(url)) {\r\n    return false;\r\n  }\r\n  if(url.indexOf('mailto:') === 0) {\r\n    return false;\r\n  }\r\n  const new_options = {\r\n    ...options,\r\n    ...default_url_options\r\n  };\r\n\r\n  if(options.validate_length && url.length >= 2083) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_fragments && url.includes('#')) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_query_components && (url.includes('?') || url.includes('&'))) {\r\n    return false;\r\n  }\r\n\r\n  let protocol, auth, host, hostname, port, port_str, split, ipv6;\r\n\r\n  split = url.split('#');\r\n  url = split.shift();\r\n\r\n  split = url.split('?');\r\n  url = split.shift();\r\n\r\n  split = url.split('://');\r\n  if(split.length > 1) {\r\n    protocol = split.shift().toLowerCase();\r\n    if(new_options.require_valid_protocol && new_options.protocols.indexOf(protocol) === -1) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_protocol) {\r\n    return false;\r\n  } else if(url.substr(0, 2) === '//') {\r\n    if(!new_options.allow_protocol_relative_urls) {\r\n      return false;\r\n    }\r\n    split[0] = url.substr(2);\r\n  }\r\n  url = split.join('://');\r\n\r\n  if(url === '') {\r\n    return false;\r\n  }\r\n\r\n  split = url.split('/');\r\n  url = split.shift();\r\n\r\n  if(url === '' && !new_options.require_host) {\r\n    return true;\r\n  }\r\n\r\n  split = url.split('@');\r\n  if(split.length > 1) {\r\n    if(new_options.disallow_auth) {\r\n      return false;\r\n    }\r\n    if(split[0] === '') {\r\n      return false;\r\n    }\r\n    auth = split.shift();\r\n    if(auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\r\n      return false;\r\n    }\r\n    const [user, password] = auth.split(':');\r\n    if(user === '' && password === '') {\r\n      return false;\r\n    }\r\n  }\r\n  hostname = split.join('@');\r\n\r\n  port_str = null;\r\n  ipv6 = null;\r\n  const ipv6_match = hostname.match(wrapped_ipv6);\r\n  if(ipv6_match) {\r\n    host = '';\r\n    ipv6 = ipv6_match[1];\r\n    port_str = ipv6_match[2] || null;\r\n  } else {\r\n    split = hostname.split(':');\r\n    host = split.shift();\r\n    if(split.length) {\r\n      port_str = split.join(':');\r\n    }\r\n  }\r\n\r\n  if(port_str !== null && port_str.length > 0) {\r\n    port = parseInt(port_str, 10);\r\n    if(!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_port) {\r\n    return false;\r\n  }\r\n\r\n  if(new_options.host_whitelist) {\r\n    return checkHost(host, new_options.host_whitelist);\r\n  }\r\n  if(!isIP(host) && !isFQDN(host, new_options) && (!ipv6 || !isIPv6(ipv6))) {\r\n    return false;\r\n  }\r\n\r\n  host = host || ipv6;\r\n\r\n  return !(new_options.host_blacklist && checkHost(host, new_options.host_blacklist));\r\n\r\n\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * uuid 合法性校验\r\n * @param[str]  url\r\n * @param[version] uuid版本\r\n * */\r\nexport default function isUUID(str: any, version: any) {\r\n  const uuid = {\r\n    1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n  };\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  // @ts-ignore\r\n  const pattern = uuid[![undefined, null].includes(version) ? version : 'all'];\r\n  return !!pattern && pattern.test(str);\r\n}\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n// is zone\r\nconst isZone = (str: string) => {\r\n  const rootZone = '.';\r\n  return rootZone === str || isDomain(str);\r\n};\r\n\r\nexport default isZone\r\n","\r\n/**\r\n * 设置页面标题\r\n *\r\n * @param[title] 标题\r\n */\r\nexport function setHtmlTitle(title: string) {\r\n  document.title = title;\r\n}\r\n","import { isExistValue } from \"./isExistValue\";\r\n\r\n/**\r\n * 配置url参数\r\n *\r\n * @param[data] 参数\r\n */\r\nexport function setUrlParam(data: string) {\r\n  if(Object.prototype.toString.call(data) !== '[object Object]') {\r\n    return undefined\r\n  }\r\n  let keys = Object.keys(data);\r\n  let str = '';\r\n  keys.forEach(key => {\r\n    const value = data[key];\r\n    if(isExistValue(value)) {\r\n      if(str) {\r\n        str += '&'\r\n      }\r\n      str += `${key}=${value}`\r\n    }\r\n  });\r\n  return encodeURI(str);\r\n}\r\n","\r\n\r\n\r\n\r\n/**\r\n * name：函数节流\r\n * description：函数触发后,如果函数还在执行中，就不再执行，\r\n * @params[fn]  回调函数\r\n * @params[delay]  定时器延时\r\n */\r\nexport const throttle = (fn = () => {\r\n}, delay = 200) => {\r\n  let timer: any = null;\r\n  return () => {\r\n    // 函数在执行中，无论触发几次都不执行。\r\n    if(timer) return;\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      fn && fn();\r\n      timer = null;\r\n    }, delay);\r\n  }\r\n};\r\n","/**\r\n * 标签语义化编译\r\n * @param[str]  str\r\n * eg: &lt;h1&gt; => <h1>\r\n * */\r\nexport default function unescape(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  return (str.replace(/&quot;/g, '\"')\r\n    .replace(/&#x27;/g, \"'\")\r\n    .replace(/&lt;/g, '<')\r\n    .replace(/&gt;/g, '>')\r\n    .replace(/&#x2F;/g, '/')\r\n    .replace(/&#x5C;/g, '\\\\')\r\n    .replace(/&#96;/g, '`')\r\n    .replace(/&amp;/g, '&'));\r\n  // &amp; replacement has to be the last one to prevent\r\n  // bugs with intermediate strings containing escape sequences\r\n  // See: https://github.com/validatorjs/validator.js/issues/1827\r\n}\r\n","\r\n\r\n/**\r\n * @names：模拟表单提交数据\r\n * @params[config] Object\r\n * */\r\nexport const utilsSubmitForm = (config: {\r\n  url: string;\r\n  method: string;\r\n  params: { [propName: string]: any };\r\n}) => {\r\n  config = config || {};\r\n  const action = config.url;\r\n  const method = config.method || 'POST';\r\n  const params = config.params || {};\r\n  const form = document.createElement('form');\r\n\r\n  form.style.display = 'none';\r\n  form.method = method;\r\n  form.action = action;\r\n  // form.target = '_blank';\r\n\r\n  for (let [key, value] of Object.entries(params)) {\r\n    const input: HTMLInputElement = document.createElement('input');\r\n    input.type = 'hidden';\r\n    input.name = key;\r\n    input.value = value;\r\n    form.appendChild(input);\r\n  }\r\n  /*for (let i = 0, j = params.length; i < j; i++) {\r\n    let input = document.createElement('input');\r\n    let item = params[i];\r\n    let key = item.key;\r\n    let value = item.value;\r\n    input.type = 'hidden';\r\n    input.name = key;\r\n    input.value = value;\r\n    form.appendChild(input);\r\n  }*/\r\n  document.body.appendChild(form);\r\n  form.submit();\r\n  document.body.removeChild(form);\r\n};\r\n"],"names":["isNumber","number","allowNegative","replace","isNaN","_typeof","parseFloat","numberFormat","num","toString","split","length","e","numberMultiply","num1","num2","baseNum","Number","Math","pow","dateFormatReg","date","filterStringSpace","str","options","reg","filterAll","EnumLanguageType","specialSymbolToComma","utilTypeOf","input","rawObject","Object","prototype","call","toLowerCase","exec","isValidParamsTypes","types","includes","isExistValue","value","returnType","_value","setErrorCodeLang","lang","arguments","undefined","zh","en","utilStringToArray","separator","trim","Array","isArray","utilToString","String","v4Seg","v4Str","concat","IPv4Reg","RegExp","v6Seg","IPv6Reg","isIPv4","s","test","isIPv6","isIP","errorCodes","DOMAIN_IS_EMPTY","DOMAIN_FORMAT_ERROR","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_WITH_HYPHEN","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_WITH_UNDERSCORES","LABEL_ENDS_WITH_UNDERSCORES","LABEL_INVALID_CHARS","TLD_WITH_NUMBER","TLD_INVALID_CHARS","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","isFQDN","errorMessage","success","message","len","substring","indexOf","nodes","node_len","max_node","tld","i","label","isDomain","EnumRecordType","isInRange","min","max","val","isPort","exports","creditCard","isInt","regex","hasOwnProperty","allow_leading_zeroes","minCheckPassed","maxCheckPassed","ltCheckPassed","lt","gtCheckPassed","gt","identityCardValidators","PL","weightOfDigits","modulo","slice","reduce","acc","digit","index","lastDigit","charAt","ES","charsValue","X","Y","Z","sanitized","toUpperCase","char","endsWith","FI","match","parseInt","IN","d","p","c","map","reverse","forEach","IR","substr","lastNumber","sum","IT","search","NO","f","k1","k2","TH","LK","incNum","id","idCardNo","provincesAndCities","powers","parityBit","checkAddressCode","addressCode","checkBirthDayCode","birDayCode","yyyy","mm","dd","xdata","Date","getFullYear","getMonth","getDate","checkParityBit","id17","power","getParityBit","check","check15IdCardNo","check18IdCardNo","ALPHABET_CODES","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","from","code","floor","upperCaseRegex","lowerCaseRegex","numberRegex","symbolRegex","defaultOptions","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","analyzePassword","password","result","charMap","analysis","uniqueChars","keys","uppercaseCount","lowercaseCount","numberCount","symbolCount","data","groupLen","dataLen","JSON","parse","stringify","group","ceil","groupData","push","splice","fn","delay","timer","clearTimeout","setTimeout","deepClone","obj","newObj","key","format","setHours","getHours","o","getMinutes","getSeconds","getMilliseconds","k","$1","name","prefix","start","document","cookie","end","decodeURI","_period","domain","window","localStorage","getItem","sessionStorage","totalLength","charCode","charCodeAt","param","r","location","decodeURIComponent","_toConsumableArray","Set","filter","item","extend","trueBooleans","type_str","encodeURI","err","tmpNum","shouldDouble","ignoreSpace","allow_hyphens","imeiRegexWithoutHypens","imeiRegexWithHypens","imeiRegex","mul","l","tp","chk","locale","validator","Error","options_type","array","fourDigit","fiveDigit","sixDigit","patterns","AD","AT","AU","AZ","BE","BG","BR","BY","CA","CH","CN","CZ","DE","DK","DO","DZ","EE","FR","GB","GR","HR","HT","HU","ID","IE","IL","IS","JP","KE","KR","LI","LT","LU","LV","MX","MT","MY","NL","NP","NZ","PR","PT","RO","RU","SA","SE","SG","SI","SK","TN","TW","UA","US","ZA","ZM","type","isA","AAAA","isAAAA","CAA","values","isCAA","CNAME","isCNAME","isMX","NS","isNS","SRV","isSRV","TXT","isTXT","new_options","_objectSpread","scoringOptions","points","scorePassword","maxTTL","ttl","url","checkHost","host","matches","protocol","auth","hostname","port","port_str","ipv6","protocols","require_protocol","require_host","require_port","require_valid_protocol","allow_protocol_relative_urls","allow_fragments","allow_query_components","validate_length","shift","join","disallow_auth","_auth$split2","_slicedToArray","user","ipv6_match","host_whitelist","host_blacklist","version","pattern","all","baseNum1","baseNum2","toFixed","round","rs","removeItem","objHours","ms","setTime","getTime","toUTCString","title","setItem","config","action","method","params","form","createElement","style","display","_i","_Object$entries","entries","_Object$entries$_i","appendChild","body","submit","removeChild"],"mappings":";;;;;;;;k2FAMaA,EAAW,SAACC,GAAuC,IAA1BC,0DAOpC,MAHqB,iBAAXD,IACRA,EAASA,EAAOE,QAAQ,OAAQ,MAGhCC,MAAMH,IACK,KAAXA,GACkB,WAAlBI,EAAOJ,IACW,kBAAXA,OAIPA,EAASK,WAAWL,IACR,IACHC,EAKb,ECeA,IAAMK,EAAe,SAACC,GACpB,IACE,OAAOA,EAAIC,WAAWC,MAAM,KAAK,GAAGC,MAGtC,CAFE,MAAOC,GACP,OAAO,CACT,CACF,EAsCO,SAASC,EAAeC,EAAcC,GAC3C,IAAIC,EAAU,EAGd,OAFAA,GAAWT,EAAaO,GACxBE,GAAWT,EAAaQ,GACjBE,OAAOH,EAAKL,WAAWN,QAAQ,IAAK,KAAOc,OAAOF,EAAKN,WAAWN,QAAQ,IAAK,KAAOe,KAAKC,IAAI,GAAIH,EAC5G,CCrFO,SAASI,EAAcC,GAI5B,MAHmB,iBAATA,IACRA,EAAOA,EAAKlB,QAAQ,KAAM,MAErBkB,CACT,CCLA,ICEMC,EAAoB,SAACC,EAAUC,GAInC,GAAkB,iBAARD,EAER,MAAO,GAET,IAAME,EAAM,mBACZ,OAAGD,SAAAA,EAASE,UACHH,EAAIpB,QAAQsB,EAAK,IAEnBF,EAAIpB,QAAQsB,EAAK,IAC1B,MCnBkBE,ECGLC,EAAuB,SAACL,GACnC,MAAkB,iBAARA,EACDA,EAAIpB,QAAQ,cAAe,KAE7B,EACT,ECKM0B,EAAa,SAACC,GAClB,IAAMC,EAAYC,OAAOC,UAAUxB,SAASyB,KAAKJ,GAAOK,cAGxD,MAFoB,kBAEDC,KAAKL,GAAW,EACrC,ECZMM,EAAqB,SAACd,EAAUe,GAKpC,MAHyB,UAAtBT,EAAWS,KACZA,EAF0C,CAAC,SAAU,WAI/CA,GAASA,EAAMC,SAASV,EAAWN,GAC7C,ECRaiB,EAAe,SAACC,GAAuC,IAA3BC,yDAAa,UAChDC,EAAS,GAQb,OANEA,EADW,IAAVF,IAAyB,IAAVA,GAAmBA,EAC1BA,EAGA,IAGY,YAAfC,EAAwC,MAAXC,EAAkBA,CACzD,GJTA,SALkBhB,GAAAA,EAAgB,GAAA,QAAhBA,EAAgB,GAAA,OAAhBA,CAKlB,CALkBA,IAAAA,EAAgB,CAAA,IAQlC,IAAMiB,EAAmB,WAAqC,IAApCC,EAASC,UAAAnC,OAAA,QAAAoC,IAAAD,UAAA,GAAAA,UAAA,GAAGnB,EAAiBqB,GACrD,OAAIH,IAASlB,EAAiBsB,GACrB,KAEF,IACT,MKVMC,EAAoB,SAAC3B,EAAU4B,GAEnC,OADAA,EAAYA,GAAa,IACN,iBAAR5B,GAET4B,EAAYA,GAAa,KADzB5B,EAAMA,EAAI6B,QAEC1C,MAAMyC,GAAa,QACrBE,MAAMC,QAAQ/B,GAChBA,EACiB,iBAARA,GAAmC,kBAARA,EACpC,CAACA,GAEH,EACT,ECfMgC,EAAe,SAACzB,GAUpB,MAToB,WAAjBzB,EAAOyB,IAAgC,OAAVA,EAE5BA,EAD2B,mBAAnBA,EAAMrB,SACNqB,EAAMrB,WAEN,mBAEFqB,SAAmD1B,MAAM0B,KAAWA,EAAMnB,UAClFmB,EAAQ,IAEH0B,OAAO1B,EAChB,ECXM2B,EAAQ,uDACRC,EAAK,IAAAC,OAAOF,EAAK,WAAAE,OAAUF,GAC3BG,EAAU,IAAIC,OAAM,IAAAF,OAAKD,EAAS,MAGlCI,EAAQ,uBACRC,EAAU,IAAIF,OAAO,KAAI,MAAAF,OACvBG,EAAK,YAAAH,OAAWG,EAAK,QACrBA,MAAAA,OAAAA,qBAAgBJ,EAAK,MAAAC,OAAKG,EAAK,QAC/BA,MAAAA,OAAAA,EAAiBJ,aAAAA,OAAAA,gBAAWI,EAAK,cACjCA,MAAAA,OAAAA,uBAAkBA,EAAK,WAAAH,OAAUD,EAAK,OAAAC,OAAMG,EAAiB,cAAA,MAAAH,OAC7DG,EAAK,cAAAH,OAAaG,EAAK,WAAAH,OAAUD,EAAK,OAAAC,OAAMG,EAAiB,cAAA,MAAAH,OAC7DG,EAAK,cAAAH,OAAaG,EAAK,WAAAH,OAAUD,EAAK,OAAAC,OAAMG,EAAiB,cAAA,MAAAH,OAC7DG,EAAK,cAAAH,OAAaG,EAAK,WAAAH,OAAUD,EAAK,OAAAC,OAAMG,EAAiB,cAAA,YAAAH,OACvDG,EAAK,WAAAH,OAAUD,EAAaI,SAAAA,OAAAA,EAAiB,cACzD,4BAKWE,EAAS,SAACC,GACrB,OAAOL,EAAQM,KAAKD,EACtB,EAKaE,EAAS,SAACF,GACrB,OAAOF,EAAQG,KAAKD,EACtB,EAIaG,EAAO,SAACH,GACnB,OAAGD,EAAOC,GAAW,EAClBE,EAAOF,GAAW,EACd,CACT,EChCMI,EAAa,CACjBrB,GAAI,CACFsB,gBAAiB,SACjBC,oBAAqB,SACrBC,iBAAkB,kBAClBC,gBAAiB,oBACjBC,uBAAwB,gBACxBC,qBAAsB,gBACtBC,kBAAmB,mBACnBC,eAAgB,qBAChBC,gBAAiB,mBACjBC,uBAAwB,cACxBC,4BAA6B,gBAC7BC,oBACE,kCACFC,gBAAiB,aACjBC,kBAAmB,YAErBlC,GAAI,CACFqB,gBAAiB,yBACjBC,oBAAqB,2BACrBC,iBAAkB,yBAClBC,gBACE,6DACFC,uBAAwB,+CACxBC,qBAAsB,6CACtBC,kBAAmB,4CACnBC,eAAgB,qDAChBC,gBAAiB,yDACjBC,uBAAwB,iCACxBC,4BAA6B,mCAC7BC,oBACE,6DACFC,gBAAiB,6BACjBC,kBAAmB,qBAQjBC,EAAuB,CAE3BC,aAAa,EAEbC,mBAAmB,EAEnBC,oBAAoB,EAEpBC,mBAAmB,EAEnBC,gBAAgB,GASH,SAASC,EACtBnE,GAGW,IAFXC,EAAiCsB,UAAAnC,OAAA,QAAAoC,IAAAD,UAAA,GAAAA,UAAA,GAAA,CAAA,EACjCD,EAAaC,UAAAnC,OAAA,EAAAmC,UAAA,QAAAC,EAET4C,EAAetB,EAAWzB,EAAiBC,IAC/C,GAAkB,iBAARtB,EACR,MAAO,CACLqE,SAAS,EACTC,QAASF,EAAapB,qBAY1B,GATAhD,EAAMD,EAAkBC,EAAK,CAC3BG,WAAW,IAEbF,EACK4D,EAAAA,EAAAA,CAAAA,EAAAA,GACA5D,IAIDD,EACF,MAAO,CACLqE,SAAS,EACTC,QAASF,EAAarB,iBAI1B,IAAMwB,EAAMvE,EAAIZ,OAChB,GAAGmF,EAAM,IACP,MAAO,CACLF,SAAS,EACTC,QAASF,EAAalB,iBAKvBjD,EAAQ+D,oBAAuC,MAAjBhE,EAAIuE,EAAM,KACzCvE,EAAMA,EAAIwE,UAAU,EAAGD,EAAM,IAI5BtE,EAAQiE,gBAAwC,IAAtBlE,EAAIyE,QAAQ,QACvCzE,EAAMA,EAAIwE,UAAU,IAGtB,IAAME,EAAQ1E,EAAIb,MAAM,KAElBwF,EAAWD,EAAMtF,OACjBwF,EAAW,IACjB,GAAG3E,EAAQ6D,YAAa,CAEtB,GAAGa,EAAW,EAEZ,MAAO,CACLN,SAAS,EACTC,QAASF,EAAapB,qBAI1B,GAAG2B,EAAWC,EACZ,MAAO,CACLP,SAAS,EACTC,QAASF,EAAapB,qBAI1B,IAAM6B,EAAMH,EAAMC,EAAW,GAE7B,IAAI1E,EAAQgE,mBAAqB,QAAQtB,KAAKkC,GAC5C,MAAO,CACLR,SAAS,EACTC,QAASF,EAAaT,iBAI1B,IACG,qFAAqFhB,KACpFkC,GAGF,MAAO,CACLR,SAAS,EACTC,QAASF,EAAaR,kBAG5B,MACE,GAAGe,EAAWC,EAAW,EACvB,MAAO,CACLP,SAAS,EACTC,QAASF,EAAapB,qBAI5B,IAAK,IAAI8B,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CACjC,IAAMC,EAAQL,EAAMI,GAEpB,GAAGC,EAAM3F,OAAS,GAChB,MAAO,CACLiF,SAAS,EACTC,QAASF,EAAad,gBAI1B,IAAI,8BAA8BX,KAAKoC,GACrC,MAAO,CACLV,SAAS,EACTC,QAASF,EAAaV,qBAK1B,GAAG,kBAAkBf,KAAKoC,GACxB,MAAO,CACLV,SAAS,EACTC,QAASF,EAAaV,qBAK1B,GAAG,QAAQf,KAAKoC,GACd,MAAO,CACLV,SAAS,EACTC,QAASF,EAAaf,mBAI1B,IAAIpD,EAAQ8D,mBAAqB,IAAIpB,KAAKoC,GACxC,MAAO,CACLV,SAAS,EACTC,QAASF,EAAaZ,wBAK1B,GAAG,KAAKb,KAAKoC,GACX,MAAO,CACLV,SAAS,EACTC,QAASF,EAAaX,4BAG5B,CACA,MAAO,CACLY,SAAS,EACTC,QAAS,GAEb,CCjNMU,ICQYC,EDRZD,EAAW,SAAChF,EAAasB,GAC3B,OAAO6C,EAAOnE,EAAK,CACf8D,aAAa,EAEbC,mBAAmB,EAEnBC,oBAAoB,EAEpBC,mBAAmB,EAEnBC,gBAAgB,GACjB5C,EACP,EEVM4D,EAAY,SAAClF,EAAUmF,EAAaC,GACxC,IAAI3G,EAASuB,GACX,OAAO,EAGT,IAAMqF,EAAM3F,OAAOM,GACnB,OAAOqF,GAAOF,GAAOE,GAAOD,CAC9B,ECVME,EAAS,SAACtF,GACd,OAAOkF,EAAUlF,EAAK,EAAG,MAC3B,EFOgCuF,EAAAN,oBAAA,GAAdA,EAAAA,mBAAAA,EAAAA,eAAc,CAAA,IAAA,EAAA,IAAdA,EAAc,KAAA,OAAdA,EAAc,GAAA,KAAdA,EAAc,GAAA,KAAdA,EAAc,MAAA,QAAdA,EAAc,IAAA,MAAdA,EAAc,IAAA,MAAdA,EAAc,IAAA,MGThC,ICJMO,EAAa,+PCOJ,SAASC,EAAMzF,EAAUC,GAOtC,IAAIa,EAAmBd,GACrB,OAAO,EAGT,IAOI0F,GAJJzF,EAAUA,GAAW,IAKX0F,eAAe,0BAA4B1F,EAAQ2F,qBARjD,+BACa,gBAYrBC,GAAmB5F,EAAQ0F,eAAe,aAAkC,IAAhB1F,EAAQkF,KAAuBnF,GAAOC,EAAQkF,IAC1GW,GAAmB7F,EAAQ0F,eAAe,aAAkC,IAAhB1F,EAAQmF,KAAuBpF,GAAOC,EAAQmF,IAC1GW,GAAkB9F,EAAQ0F,eAAe,YAAgC,IAAf1F,EAAQ+F,IAAsBhG,EAAMC,EAAQ+F,GACtGC,GAAkBhG,EAAQ0F,eAAe,YAAgC,IAAf1F,EAAQiG,IAAsBlG,EAAMC,EAAQiG,GAE1G,OAAOR,EAAM/C,KAAK3C,IAAQ6F,GAAkBC,GAAkBC,GAAiBE,CACjF,CC9BA,IAAME,EAAyB,CAC7BC,GAAI,SAACpG,GACH,IAAMqG,EAAiB,CACrB,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,GAAI,EACJ,GAAI,GAGN,GAAU,MAAPrG,GAA8B,KAAfA,EAAIZ,QAAiBqG,EAAMzF,EAAK,CAAE4F,sBAAsB,IAAS,CACjF,IAIMU,EAJStG,EAAIb,MAAM,IAAIoH,MAAM,GAAI,GACpBC,QAAO,SAACC,EAAKC,EAAOC,GAAK,OAC1CF,EAAO/G,OAAOgH,GAASL,EAAeM,EAAQ,EAAG,GAAE,GAEhC,GACfC,EAAYlH,OAAOM,EAAI6G,OAAO7G,EAAIZ,OAAS,IAEjD,GAAe,IAAXkH,GAA8B,IAAdM,GAAoBA,IAAc,GAAKN,EACzD,OAAO,CAEX,CAEA,OAAO,CACR,EACDQ,GAAI,SAAC9G,GACH,IAEM+G,EAAa,CACjBC,EAAG,EACHC,EAAG,EACHC,EAAG,GASCC,EAAYnH,EAAI6B,OAAOuF,cAG7B,IAjBY,8CAiBJzE,KAAKwE,GACX,OAAO,EAIT,IAAMzI,EAASyI,EAAUZ,MAAM,GAAI,GAAG3H,QAAQ,YAAY,SAAAyI,GAAI,OAAIN,EAAWM,MAG7E,OAAOF,EAAUG,SAjBK,CACpB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACvD,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAeZ5I,EAAS,IAClD,EACD6I,GAAI,SAACvH,GAEH,GAAkB,KAAfA,EAAIZ,OACL,OAAO,EAGT,IAAIY,EAAIwH,MAAM,oDACZ,OAAO,EAST,MANoB,mCAEgC,IAAhCC,SAASzH,EAAIuG,MAAM,EAAG,GAAI,IAAckB,SAASzH,EAAIuG,MAAM,EAAG,IAAK,KACxD,MAGTvG,EAAIuG,MAAM,GAAI,GACrC,EACDmB,GAAI,SAAC1H,GACH,IAGM2H,EAAI,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxBC,EAAI,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxBT,EAAYnH,EAAI6B,OAGtB,IAhCY,+BAgCJc,KAAKwE,GACX,OAAO,EAET,IAAIU,EAAI,EAOR,OANoBV,EAAUvI,QAAQ,MAAO,IAAIO,MAAM,IAAI2I,IAAIpI,QAAQqI,UAEzDC,SAAQ,SAAC3C,EAAKP,GAC1B+C,EAAIF,EAAEE,GAAGD,EAAG9C,EAAI,GAAIO,GACtB,IAEa,IAANwC,CACR,EACDI,GAAI,SAACjI,GACH,IAAIA,EAAIwH,MAAM,YAAa,OAAO,EAGlC,GAFAxH,EAAM,OAAQA,OAAAA,GAAOkI,OAAOlI,EAAIZ,OAAS,GAEH,IAAnCqI,SAASzH,EAAIkI,OAAO,EAAG,GAAI,IAAW,OAAO,EAKhD,IAHA,IAAMC,EAAaV,SAASzH,EAAIkI,OAAO,EAAG,GAAI,IAC1CE,EAAM,EAEDtD,EAAI,EAAGA,EAAI,EAAGA,IACrBsD,GAAOX,SAASzH,EAAIkI,OAAOpD,EAAG,GAAI,KAAO,GAAKA,GAKhD,OAFAsD,GAAO,IAGE,GAAKD,IAAeC,GAASA,GAAO,GAAKD,IAAe,GAAKC,CAEvE,EACDC,GAAI,SAAYrI,GACd,OAAkB,IAAfA,EAAIZ,SACI,cAARY,GACIA,EAAIsI,OAAO,yBAA4B,EAC/C,EACDC,GAAI,SAACvI,GACH,IAAMmH,EAAYnH,EAAI6B,OACtB,GAAGhD,MAAMa,OAAOyH,IAAa,OAAO,EACpC,GAAwB,KAArBA,EAAU/H,OAAe,OAAO,EACnC,GAAiB,gBAAd+H,EAA6B,OAAO,EAGvC,IAAMqB,EAAIrB,EAAUhI,MAAM,IAAI2I,IAAIpI,QAC9B+I,GAAM,IAAQ,EAAID,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAC7C,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAC7C,EAAIA,EAAE,GAAO,EAAIA,EAAE,IAAO,IAAO,GAClCE,GAAM,IAAQ,EAAIF,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAC7C,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAC7C,EAAIA,EAAE,GAAO,EAAIA,EAAE,GAAO,EAAIC,GAAO,IAAO,GAEjD,OAAGA,IAAOD,EAAE,IAAME,IAAOF,EAAE,GAE5B,EACDG,GAAI,SAAC3I,GACH,IAAIA,EAAIwH,MAAM,iBAAkB,OAAO,EAIvC,IADA,IAAIY,EAAM,EACDtD,EAAI,EAAGA,EAAI,GAAIA,IACtBsD,GAAOX,SAASzH,EAAI8E,GAAI,KAAO,GAAKA,GAEtC,OAAO9E,EAAI,QAAU,GAAMoI,EAAM,IAAO,IAAIlJ,UAC7C,EACD0J,GAAI,SAAC5I,GAIH,QAAkB,KAAfA,EAAIZ,SAHS,oBAGgBuD,KAAK3C,OACd,KAAfA,EAAIZ,SAHI,iBAGqBuD,KAAK3C,GAE3C,EACD,QAAS,SAACA,GACR,IAGMmH,EAAYnH,EAAI6B,OAGtB,IANY,UAMJc,KAAKwE,GACX,OAAO,EAOT,IAJA,IAGE0B,EAHIC,EAAK3B,EAEPiB,EAAM,EAEDtD,EAAI,EAAGA,EAAIgE,EAAG1J,OAAQ0F,IAE7BsD,IADAS,EAASnJ,OAAOoJ,EAAGhE,KAAQA,EAAI,EAAK,IACpB,EAAI+D,EAAS,EAAIA,EAEnC,OAAOT,EAAM,IAAO,CACrB,EACD,QAAS,SAACpI,GAER,IAGMmH,EAAYnH,EAAI6B,OAGtB,QANY,gBAMJc,KAAKwE,EAId,EACD,QAAS,SAACnH,GACR,IAGMmH,EAAYnH,EAAI6B,OAGtB,QANY,UAMJc,KAAKwE,EAId,EACD,QAAS,SAACnH,GACR,IAkGuB+I,EAlGjBC,EAAqB,CACzB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGIC,EAAS,CAAC,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAE5FC,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG/DC,EAAmB,SAACC,GAAmB,OAAKJ,EAAmBhI,SAASoI,EAAY,EAEpFC,EAAoB,SAACC,GACzB,IAAMC,EAAO9B,SAAS6B,EAAW9E,UAAU,EAAG,GAAI,IAC5CgF,EAAK/B,SAAS6B,EAAW9E,UAAU,EAAG,GAAI,IAC1CiF,EAAKhC,SAAS6B,EAAW9E,UAAU,GAAI,IACvCkF,EAAQ,IAAIC,KAAKJ,EAAMC,EAAK,EAAGC,GACrC,QAAGC,EAAQ,IAAIC,QAGJD,EAAME,gBAAkBL,GAAUG,EAAMG,aAAeL,EAAK,GAAOE,EAAMI,YAAcL,IAkB9FM,EAAiB,SAAChB,GAAgB,OAZnB,SAACA,GAIpB,IAHA,IAAIiB,EAAOjB,EAASvE,UAAU,EAAG,IAE7ByF,EAAQ,EACHnF,EAAI,EAAGA,EAAI,GAAIA,IACtBmF,GAASxC,SAASuC,EAAKnD,OAAO/B,GAAI,IAAM2C,SAASwB,EAAOnE,GAAI,IAI9D,OAAOoE,EADGe,EAAQ,IAIyBC,CAAanB,KAAcA,EAASlC,OAAO,IAAIO,aAAa,EAmCzG,QAPc,4BAA4BzE,KADnBoG,EAQF/I,KALI,KAApB+I,EAAS3J,OA3BU,SAAC2J,GACvB,IAAIoB,EAAQ,uEAAuExH,KAAKoG,GACxF,IAAIoB,EAAO,OAAO,EAClB,IAAIf,EAAcL,EAASvE,UAAU,EAAG,GAExC,KADA2F,EAAQhB,EAAiBC,IACd,OAAO,EAClB,IAAIE,EAAkBP,KAAAA,OAAAA,EAASvE,UAAU,EAAG,KAE5C,SADA2F,EAAQd,EAAkBC,IAqBjBc,CAAgBrB,GAhBH,SAACA,GACvB,IAAIoB,EAAQ,yFAAyFxH,KAAKoG,GAC1G,IAAIoB,EAAO,OAAO,EAClB,IAAIf,EAAcL,EAASvE,UAAU,EAAG,GAExC,KADA2F,EAAQhB,EAAiBC,IACd,OAAO,EAClB,IAAIE,EAAaP,EAASvE,UAAU,EAAG,IAEvC,SADA2F,EAAQd,EAAkBC,KAEnBS,EAAehB,GASfsB,CAAgBtB,GAG1B,EACD,QAAS,SAAC/I,GACR,IAAMsK,EAAiB,CACrBC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACH7E,EAAG,GACHC,EAAG,GACHC,EAAG,IAGCC,EAAYnH,EAAI6B,OAAOuF,cAE7B,QAAI,kBAAkBzE,KAAKwE,IAGpBrF,MAAMgK,KAAK3E,GAAWX,QAAO,SAAC4B,EAAK1J,EAAQiI,GAChD,GAAa,IAAVA,EAAa,CACd,IAAMoF,EAAOzB,EAAe5L,GAE5B,OAASqN,EAAO,GAAM,EAAKpM,KAAKqM,MAAMD,EAAO,GAC/C,CAEA,OAAa,IAAVpF,GACQ,GAAMyB,EAAM,GAAO1I,OAAOhB,IAAW,IAAO,EAGhD0J,EAAO1I,OAAOhB,IAAW,EAAIiI,EACrC,GAAE,EACL,GCnYF,IAAMsF,EAAiB,UACjBC,EAAiB,UACjBC,EAAc,UACdC,EAAc,0CAiBdC,EAA0C,CAE9CC,UAAW,EAEXC,aAAc,EAEdC,aAAc,EAEdC,WAAY,EAEZC,WAAY,EAEZC,aAAa,EACbC,gBAAiB,EACjBC,gBAAiB,GACjBC,yBAA0B,GAC1BC,yBAA0B,GAC1BC,0BAA2B,GAC3BC,0BAA2B,IA6B7B,SAASC,EAAgBC,GACvB,IAxBkBnN,EACdoN,EAuBAC,GAxBcrN,EAwBOmN,EAvBrBC,EAAS,CAAA,EACbtL,MAAMgK,KAAK9L,GAAKgI,SAAQ,SAACX,GACV+F,EAAO/F,GAElB+F,EAAO/F,IAAS,EAEhB+F,EAAO/F,GAAQ,CAEnB,IACO+F,GAeHE,EAA0B,CAC5BlO,OAAQ+N,EAAS/N,OACjBmO,YAAa9M,OAAO+M,KAAKH,GAASjO,OAClCqO,eAAgB,EAChBC,eAAgB,EAChBC,YAAa,EACbC,YAAa,GAcf,OAZAnN,OAAO+M,KAAKH,GAASrF,SAAQ,SAACX,GAEzB4E,EAAetJ,KAAK0E,GACrBiG,EAASG,gBAAkBJ,EAAQhG,GAC3B6E,EAAevJ,KAAK0E,GAC5BiG,EAASI,gBAAkBL,EAAQhG,GAC3B8E,EAAYxJ,KAAK0E,GACzBiG,EAASK,aAAeN,EAAQhG,GACxB+E,EAAYzJ,KAAK0E,KACzBiG,EAASM,aAAeP,EAAQhG,GAEpC,IACOiG,CACT,cCxFmB,SAACtN,GAGlB,QAAIc,EAAmBd,IADX,mDAID2C,KAAK3C,EAClB,sBCViC,WAA8B,IAA7B6N,yDAAO,GAAIC,yDAAW,GACtD,GAAIhM,MAAMC,QAAQ8L,IAAUA,EAAKzO,OAAjC,CAIA,IAAI2O,EAAUF,EAAKzO,OACnB,GAAG2O,GAAWD,EACZ,MAAO,CAACD,GAEVA,EAAOG,KAAKC,MAAMD,KAAKE,UAAUL,IAIjC,IAFA,IAAIM,EAAQxO,KAAKyO,KAAKL,EAAUD,GAC5BO,EAAY,GACPvJ,EAAI,EAAGA,EAAIqJ,EAAOrJ,IACzBuJ,EAAUC,KAAKT,EAAKU,OAAO,EAAGT,IAGhC,OADAO,EAAUC,KAAKT,GACRQ,CAdP,CAeF,+BChBwB,WACL,IADMG,EAAEjN,UAAAnC,OAAA,QAAAoC,IAAAD,UAAA,GAAAA,UAAA,GAAG,WAAM,EACjCkN,yDAAQ,IACLC,EAAa,KACjB,OAAO,WAGLC,aAAaD,GACbA,EAAQ,KAERA,EAAQE,WAAWJ,EAAIC,GAG3B,cCbO,SAASI,EAAUC,GACxB,IAAIC,EAASjN,MAAMC,QAAQ+M,GAAO,GAAK,GACvC,GAAGA,GAAsB,WAAfhQ,EAAOgQ,GACf,IAAK,IAAIE,KAAOF,EACXA,EAAInJ,eAAeqJ,KACpBD,EAAOC,GAAQF,GAA2B,WAApBhQ,EAAOgQ,EAAIE,IAAqBH,EAAUC,EAAIE,IAAQF,EAAIE,IAItF,OAAOD,CACT,WvBTe,SAAC/O,GACd,MAAkB,iBAARA,GAGFA,EAAIpB,QAAQ,KAAM,SACvBA,QAAQ,KAAM,UACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,MAAO,UACfA,QAAQ,MAAO,UACfA,QAAQ,KAAM,QACnB,qCDAO,SAAoBkB,GAAkC,IAAvBmP,yDAAS,aAC7C,IAAInP,EACF,MAAO,GAET,IAAMI,EAAM,QAEO,iBAATJ,GAAqBI,EAAIyC,KAAK7C,KACtCA,EAAO,IAAI6J,KAAK7J,IACXoP,SAASpP,EAAKqP,WAAa,IAElCrP,EAAOD,EAAcC,GAErB,IAAMsP,EAAI,CACR,MAFFtP,EAAO,IAAI6J,KAAK7J,IAEH+J,WAAa,EACxB,KAAM/J,EAAKgK,UACX,KAAMhK,EAAKgK,UACX,KAAMhK,EAAKqP,WACX,KAAMrP,EAAKuP,aACX,KAAMvP,EAAKwP,aACX,KAAM3P,KAAKqM,OAAOlM,EAAK+J,WAAa,GAAK,GACzC4B,EAAK3L,EAAKyP,mBAOZ,IAAK,IAAMC,IAJR,QAAQ7M,KAAKsM,KACdA,EAASA,EAAOrQ,QAAQ0D,OAAOmN,IAAK3P,EAAK8J,cAAgB,IAAI1B,OAAO,EAAI5F,OAAOmN,GAAGrQ,UAGpEgQ,EACX,IAAI9M,OAAO,IAAMkN,EAAI,KAAK7M,KAAKsM,KAChCA,EAASA,EAAOrQ,QAAQ0D,OAAOmN,GAAyB,IAArBnN,OAAOmN,GAAGrQ,OAAegQ,EAAEI,IAAM,KAAOJ,EAAEI,IAAItH,QAAQ,GAAKkH,EAAEI,IAAIpQ,UAGxG,OAAO6P,CACT,mByBlB8B,SAACS,GAC7B,IAAIA,EAAM,OAAO,EACjB,IAAIC,EAASD,EAAO,IAChBE,EAAQC,SAASC,OAAOrL,QAAQkL,GAEpC,IAAc,IAAXC,EACD,OAAO,KAGT,IAAIG,EAAMF,SAASC,OAAOrL,QAAQ,IAAKmL,EAAQD,EAAOvQ,SAC1C,IAAT2Q,IACDA,EAAMF,SAASC,OAAO1Q,QAGxB,IAAI8B,EAAQ2O,SAASC,OAAOtL,UAAUoL,EAAQD,EAAOvQ,OAAQ2Q,GAC7D7O,EAAQ8O,UAAU9O,GAClB,IACE,OAAO8M,KAAKC,MAAM/M,EAGpB,CAFE,MAAO7B,GACP,OAAO6B,CACT,CACF,oBC1BO,SAAyB2D,GAC9B,GAAkB,iBAARA,EACR,OAAO,GAGT,IAEIoL,EAAU,GAId,MANgB,CAAC,MAGNxL,QAAQI,IAAQ,IACzBoL,EAAU,GAELA,CACT,iBA7BO,SAAsBC,GAC3B,GAAqB,iBAAXA,EACR,MAAO,GAET,IAAIvJ,EAAQuJ,EAAOzL,QAAQ,KAC3B,OAAGkC,GAAS,EACHuJ,EAAO3J,MAAMI,EAAQ,GAEvB,EACT,oBCD+B,SAAC+I,GAC9B,IAAIA,EAAM,OAAO,EACjB,IAAMxO,EAAQiP,OAAOC,aAAaC,QAAQX,GAC1C,IACE,OAAO1B,KAAKC,MAAc/M,EAG5B,CAFE,MAAO7B,GACP,OAAO6B,CACT,CACF,sBCRiC,SAACwO,GAChC,IAAIA,EAAM,OAAO,EACjB,IAAMxO,EAAQiP,OAAOG,eAAeD,QAAQX,GAC5C,IACE,OAAO1B,KAAKC,MAAc/M,EAG5B,CAFE,MAAO7B,GACP,OAAO6B,CACT,CAEF,qBCvBO,SAA0BlB,GAE/B,IADA,IAAIuQ,EAAc,EACTzL,EAAI,EAAGP,EAAMvE,EAAIZ,OAAQ0F,EAAIP,EAAKO,IAAK,CAC9C,IAAM0L,EAAWxQ,EAAIyQ,WAAW3L,GAC5B0L,EAAW,IACbD,GAAe,EACL,KAAUC,GAAcA,GAAY,KAC9CD,GAAe,EACL,MAAUC,GAAcA,GAAY,QAC9CD,GAAe,EAEnB,CAEA,OAAOA,CACT,gBCdO,SAAqBb,EAAcgB,GAExC,IAAIxQ,EAAM,IAAIoC,OAAO,QAAUoN,EAAO,iBAGlCiB,GADUD,GAASP,OAAOS,SAAStI,OAAO9D,UAAU,IACxCgD,MAAMtH,GAEtB,OAAS,OAANyQ,EAAmBE,mBAAmBF,EAAE,IACpC,IACT,wBCRmC,SAAC3Q,GAClC,MAAkB,iBAARA,EACD,IAOTA,GAFAA,GAFAA,EAAMA,EAAI6B,QAEAjB,eAEAhC,QAAQ,WAAY,KAE9BoB,EAAMK,EAAqBL,IAE3BA,EAAG8Q,EAAO,IAAIC,IAAI/Q,EAAIb,MAAM,QACjB6R,QAAO,SAACC,GAAW,MAAc,KAATA,KACrC,kBCdsB,SAACjR,EAAUkR,GAAyD,IAAxCC,yDAAe,CAAC,MAAO,OAAQ,KACzEC,IAAkBpR,GACxB,MAAgB,YAAboR,EACMpR,IAGLc,EAAmBd,KAIpBkR,GACDlR,EAAM,GAAAoC,OAAGpC,GAAMY,cACRuQ,EAAanQ,SAAShB,SAF/B,EAIF,iBCZe,SAAsBA,EAAUC,GAC7C,GAAkB,iBAARD,EACR,OAAO,EAGT,IAAImF,EACAC,EAFJpF,GAAO,GAGiB,WAArBlB,EAAQmB,IACTkF,EAAMlF,EAAQkF,KAAO,EACrBC,EAAMnF,EAAQmF,MAGdD,EAAM5D,UAAU,GAChB6D,EAAM7D,UAAU,IAElB,IAAMgD,EAAM8M,UAAUrR,GAAKb,MAAM,SAASC,OAAS,EACnD,OAAOmF,GAAOY,SAAuB,IAARC,GAAuBb,GAAOa,EAC7D,gBjBtBoB,SAAUpF,GAC5B,IAEE,MADY,oGACD2C,KAAK3C,EAGlB,CAFE,MAAOsR,GACP,OAAO,CACT,CACF,iBCJe,SAAsBtR,GACnC,GAAkB,iBAARA,EACR,OAAO,EAGT,IAAMmH,GADNnH,GAAOA,GACepB,QAAQ,SAAU,IACxC,IAAI4G,EAAW7C,KAAKwE,GAClB,OAAO,EAMT,IAJA,IACIT,EACA6K,EACAC,EAHApJ,EAAM,EAIDtD,EAAIqC,EAAU/H,OAAS,EAAG0F,GAAK,EAAGA,IACzC4B,EAAQS,EAAU3C,UAAUM,EAAIA,EAAI,GACpCyM,EAAS9J,SAASf,EAAO,IAIrB0B,GAHDoJ,IACDD,GAAU,IACG,GACFA,EAAS,GAAM,EAKnBA,EAETC,GAAgBA,EAElB,QAAWpJ,EAAM,IAAQ,IAAIjB,EAC/B,yBiBhCgB,SAACnH,GACf,GAAkB,iBAARA,EACR,OAAO,EAIT,MADY,0GACD2C,KAAK3C,EAClB,iBCe4B,SAAC6N,GAC3B,OAAQ/L,MAAMC,QAAQ8L,KAAUA,EAAKzO,MACvC,eApB0B,SAACY,EAAUyR,GACnC,QAAI3Q,EAAmBd,KAIvBA,EAAG,GAAAoC,OAAMpC,GAELyR,IACFzR,EAAMD,EAAkBC,MAEF,IAAfA,EAAIZ,QACf,sBChB0B,SAACY,GAEzB,MAAkB,iBAARA,GADK,sBAKD2C,KADd3C,GAAO,GAET,6CCLsB,SAACA,GAErB,MADY,2BACD2C,KAAK3C,EAClB,WCJe,SAACA,GAEd,OACEA,EAAIyE,QAFe,MAEU,GAC7BN,EAAOnE,EAAK,CAEV8D,aAAa,EAEbC,mBAAmB,EAEnBC,oBAAoB,EAEpBC,mBAAmB,EAEnBC,gBAAgB,GAGtB,WCde,SAAgBlE,GAAiC,IAAvB0R,0DACvC,IAAI5Q,EAAmBd,GACrB,OAAO,EAETA,EAAG,GAAAoC,OAAMpC,GAET,IAAI2R,EAAyB,cACzBC,EAAsB,4BAGtBC,EAAYF,EAOhB,GALGD,IACDG,EAAYD,IAIVC,EAAUlP,KAAK3C,GACjB,OAAO,EAGTA,EAAMA,EAAIpB,QAAQ,KAAM,IAMxB,IAJA,IAAIwJ,EAAM,EACR0J,EAAM,EACNC,EAAI,GAEGjN,EAAI,EAAGA,EAAIiN,EAAGjN,IAAK,CAC1B,IAAM4B,EAAQ1G,EAAIwE,UAAUuN,EAAIjN,EAAI,EAAGiN,EAAIjN,GACrCkN,EAAKvK,SAASf,EAAO,IAAMoL,EAE/B1J,GADC4J,GAAM,GACCA,EAAK,GAAM,EAEZA,EAEE,IAARF,EACDA,GAAO,EAEPA,GAAO,CAEX,CACA,IAAMG,GAAQ,GAAM7J,EAAM,IAAO,GACjC,OAAO6J,IAAQxK,SAASzH,EAAIwE,UAAU,GAAI,IAAK,GAEjD,kDpBqWe,SAAwBxE,EAAUkS,GAC/C,IAAIpR,EAAmBd,GACrB,OAAO,EAGT,GADAA,EAAG,GAAAoC,OAAMpC,GACNkS,KAAU/L,EACX,OAAOA,EAAuB+L,GAAQlS,GACjC,GAAc,QAAXkS,EAAkB,CAC1B,IAAK,IAAMlD,KAAO7I,EAAwB,CAExC,GAAGA,EAAuBR,eAAeqJ,GAEvC,IAAGmD,EADehM,EAAuB6I,IAC5BhP,GACX,OAAO,CAGb,CACA,OAAO,CACT,CACA,MAAM,IAAIoS,MAAyBF,mBAAAA,OAAAA,EAAU,KAC/C,SqBpae,SAAclS,EAAUC,GACrC,IAAIa,EAAmBd,GACrB,OAAO,EAET,IAAI8E,EACAuN,EAAe/R,EAAWL,GAC9B,GAAoB,UAAjBoS,EAA0B,CAC3B,IAAMC,EAAe,GACrB,IAAKxN,KAAK7E,GAGL,CAAE,GAAC0F,eAAehF,KAAKV,EAAS6E,KACjCwN,EAAMxN,GAAK9C,EAAa/B,EAAQ6E,KAGpC,OAAOwN,EAAM7N,QAAQzE,IAAQ,CAC/B,CAAO,MAAoB,WAAjBqS,EACDpS,EAAQ0F,eAAe3F,GACL,aAAjBqS,GACDpS,EAAQwE,QAAQzE,IAAQ,CAGnC,iECxBe,SAAsBA,EAAUkS,GAC7C,IAAIpR,EAAmBd,GACrB,OAAO,EAIT,IACMuS,EAAY,UACZC,EAAY,UACZC,EAAW,UAEXC,EAAW,CACfC,GAAI,YACJC,GAAIL,EACJM,GAAIN,EACJO,GAAI,YACJC,GAAIR,EACJS,GAAIT,EACJU,GAAI,gBACJC,GAAI,kBACJC,GAAI,2EACJC,GAAIb,EACJc,GAAI,oFACJC,GAAI,kBACJC,GAAIf,EACJgB,GAAIjB,EACJkB,GAAIjB,EACJkB,GAAIlB,EACJmB,GAAInB,EACJ1L,GAAI,mCACJS,GAAIiL,EACJoB,GAAI,kBACJC,GAAI,sDACJC,GAAI,kBACJC,GAAI,iBACJC,GAAI,YACJC,GAAI1B,EACJ2B,GAAI1B,EACJ2B,GAAI,uCACJC,GAAI,kBACJ1M,GAAI,wDACJO,GAAI,+CACJoM,GApCiB,UAqCjBhM,GAAImK,EACJ8B,GAAI,iBACJC,GAAI/B,EACJgC,GAAI,kBACJC,GAAI,wBACJC,GAAI,cACJC,GAAIpC,EACJqC,GAAI,cACJhM,GAAI4J,EACJqC,GAAIrC,EACJsC,GAAI,4BACJC,GAAIvC,EACJwC,GAAI,sBACJzM,GAAIgK,EACJ0C,GAAI,kDACJC,GAAI3C,EACJnM,GAAI,iBACJ+O,GAAI,6BACJC,GAAI,kBACJC,GAAI5C,EACJ6C,GAAI7C,EACJ8C,GAAI/C,EACJgD,GAAI,uBACJC,GAAIhD,EACJiD,GAAInD,EACJoD,GAAI,kBACJhN,GAAI6J,EACJoD,GAAIrD,EACJsD,GAAI,kBACJC,GAAItD,EACJuD,GAAI,mBACJC,GAAIzD,EACJ0D,GAAIzD,GAEN,GAAGN,KAAUQ,EACX,OAAOA,EAASR,GAAQvP,KAAK3C,GACxB,GAAc,QAAXkS,EAAkB,CAC1B,IAAK,IAAMlD,KAAO0D,EAAU,CAG1B,GAAGA,EAAS/M,eAAeqJ,GAEzB,GADgB0D,EAAS1D,GACdrM,KAAK3C,GACd,OAAO,CAGb,CACA,OAAO,CACT,CACA,MAAM,IAAIoS,MAAyBF,mBAAAA,OAAAA,EAAU,KAC/C,Y5BtEuB,SAAClS,EAAUkW,GAChC,GAAkB,iBAARlW,EACR,OAAO,EAET,OAAQkW,EAAK9O,eACX,KAAKnC,EAAcA,eAACsF,EAClB,O6BzBM,SAACvK,GACX,OAAOyC,EAAOzC,EAEhB,C7BsBamW,CAAInW,GACb,KAAKiF,EAAcA,eAACmR,KAClB,O8B3BS,SAACpW,GACd,OAAO4C,EAAO5C,EAEhB,C9BwBaqW,CAAOrW,GAChB,KAAKiF,EAAcA,eAACqR,IAClB,O+BvBQ,SAACtW,GACb,IAEMuW,EAAS5U,EAAkB3B,GACjC,OACoB,IAAlBuW,EAAOnX,QACP8F,EAAUqR,EAAO,GAAI,EAAG,OACQ,IALlB,CAAC,QAAS,YAAa,SAK7B9R,QAAQ8R,EAAO,KANH,uBAON5T,KAAK4T,EAAO,GAE9B,C/BaaC,CAAMxW,GACf,KAAKiF,EAAcA,eAACwR,MAClB,OgC9BU,SAACzW,GACf,OAAOgF,EAAShF,EAClB,ChC4Ba0W,CAAQ1W,GACjB,KAAKiF,EAAcA,eAAC4P,GAClB,OiChCO,SAAC7U,GACZ,QAAIA,GAIGgF,EAAShF,EAElB,CjCyBa2W,CAAK3W,GACd,KAAKiF,EAAcA,eAAC2R,GAClB,OkClCO,SAAC5W,GACZ,OAAOgF,EAAShF,EAClB,ClCgCa6W,CAAK7W,GACd,KAAKiF,EAAcA,eAAC6R,IAClB,OmC/BQ,SAAC9W,GACb,IAAMuW,EAAS5U,EAAkB3B,GACjC,OACoB,IAAlBuW,EAAOnX,QACP8F,EAAUqR,EAAO,GAAI,EAAG,QACxBrR,EAAUqR,EAAO,GAAI,EAAG,QACxBjR,EAAOiR,EAAO,KACdvR,EAASuR,EAAO,GAEpB,CnCsBaQ,CAAM/W,GACf,KAAKiF,EAAcA,eAAC+R,IAClB,OoCpCQ,SAAChX,GACb,OAAOA,EAAIZ,OAAS,GACtB,CpCkCa6X,CAAMjX,GACf,QACE,OAAO,EAEb,qBOqEe,SAA0BA,EAAUC,GACjD,IAAIa,EAAmBd,GACrB,OAAO,EAET,IAAMsN,EAAWJ,EAAgBlN,GAC3BkX,EAAoCC,EAAAA,EAAA,CAAA,EACrC9K,GACApM,GAEL,OAAGiX,EAAYvK,YAlCjB,SAAuBW,EAAyB8J,GAC9C,IAAIC,EAAS,EAeb,OAdAA,GAAU/J,EAASC,YAAc6J,EAAexK,gBAChDyK,IAAW/J,EAASlO,OAASkO,EAASC,aAAe6J,EAAevK,gBACjES,EAASI,eAAiB,IAC3B2J,GAAUD,EAAetK,0BAExBQ,EAASG,eAAiB,IAC3B4J,GAAUD,EAAerK,0BAExBO,EAASK,YAAc,IACxB0J,GAAUD,EAAepK,2BAExBM,EAASM,YAAc,IACxByJ,GAAUD,EAAenK,2BAEpBoK,CACT,CAkBWC,CAAchK,EAAU4J,GAE1B5J,EAASlO,QAAU8X,EAAY5K,WACjCgB,EAASI,gBAAkBwJ,EAAY3K,cACvCe,EAASG,gBAAkByJ,EAAY1K,cACvCc,EAASK,aAAeuJ,EAAYzK,YACpCa,EAASM,aAAesJ,EAAYxK,UAC3C,U8BlIc,SAAC1M,EAAsBuX,GACnC,IAAI9Y,EAASuB,GACX,OAAO,EAGT,GAAGvB,EAASuB,GAAM,CAChB,IAAIwX,EAAM9X,OAAOM,GACjB,OAAOwX,EAAM,GAAKA,GAAOD,CAC3B,CACA,OAAO,CACT,iBCdqB,SAACvX,GAEpB,QAAIc,EAAmBd,IADX,qBAID2C,KAAK3C,EAClB,UCoCe,SAAeyX,EAAUxX,GAwBtC,SAASyX,EAAUC,EAAcC,GAC/B,IAAK,IAAI9S,EAAI,EAAGA,EAAI8S,EAAQxY,OAAQ0F,IAAK,CACvC,IAAI0C,EAAQoQ,EAAQ9S,GAEpB,GAAG6S,IAASnQ,IAREsH,EAQiBtH,EAPc,oBAAxC/G,OAAOC,UAAUxB,SAASyB,KAAKmO,IAOKtH,EAAM7E,KAAKgV,IAClD,OAAO,CAEX,CAXF,IAAkB7I,EAYhB,OAAO,CACT,CAEA,GAAkB,iBAAR2I,EACR,OAAO,EAET,IAAIA,GAAO,SAAS9U,KAAK8U,GACvB,OAAO,EAET,GAA8B,IAA3BA,EAAIhT,QAAQ,WACb,OAAO,EAET,IAiBIoT,EAAUC,EAAMH,EAAMI,EAAUC,EAAMC,EAAU9Y,EAAO+Y,EAjBrDhB,EAAWC,EAAAA,EAAA,CAAA,EACZlX,GA1CgD,CACnDkY,UAAW,CAAC,OAAQ,QAAS,OAC7BrU,aAAa,EACbsU,kBAAkB,EAClBC,cAAc,EACdC,cAAc,EACdC,wBAAwB,EACxBxU,mBAAmB,EACnBC,oBAAoB,EACpBwU,8BAA8B,EAC9BC,iBAAiB,EACjBC,wBAAwB,EACxBC,iBAAiB,IAkCnB,GAAG1Y,EAAQ0Y,iBAAmBlB,EAAIrY,QAAU,KAC1C,OAAO,EAGT,IAAIa,EAAQwY,iBAAmBhB,EAAIzW,SAAS,KAC1C,OAAO,EAGT,IAAIf,EAAQyY,yBAA2BjB,EAAIzW,SAAS,MAAQyW,EAAIzW,SAAS,MACvE,OAAO,EAYT,GAPA7B,EAAQsY,EAAItY,MAAM,KAClBsY,EAAMtY,EAAMyZ,QAEZzZ,EAAQsY,EAAItY,MAAM,KAClBsY,EAAMtY,EAAMyZ,SAEZzZ,EAAQsY,EAAItY,MAAM,QACTC,OAAS,GAEhB,GADAyY,EAAW1Y,EAAMyZ,QAAQhY,cACtBsW,EAAYqB,yBAAuE,IAA7CrB,EAAYiB,UAAU1T,QAAQoT,GACrE,OAAO,MAEJ,IAAGX,EAAYkB,iBACpB,OAAO,EACF,GAAwB,OAArBX,EAAIvP,OAAO,EAAG,GAAa,CACnC,IAAIgP,EAAYsB,6BACd,OAAO,EAETrZ,EAAM,GAAKsY,EAAIvP,OAAO,EACxB,EAGA,GAAW,MAFXuP,EAAMtY,EAAM0Z,KAAK,QAGf,OAAO,EAMT,GAHA1Z,EAAQsY,EAAItY,MAAM,KAGP,MAFXsY,EAAMtY,EAAMyZ,WAEM1B,EAAYmB,aAC5B,OAAO,EAIT,IADAlZ,EAAQsY,EAAItY,MAAM,MACTC,OAAS,EAAG,CACnB,GAAG8X,EAAY4B,cACb,OAAO,EAET,GAAgB,KAAb3Z,EAAM,GACP,OAAO,EAGT,IADA2Y,EAAO3Y,EAAMyZ,SACLnU,QAAQ,MAAQ,GAAKqT,EAAK3Y,MAAM,KAAKC,OAAS,EACpD,OAAO,EAET,IAAwC2Z,EAAAC,EAAflB,EAAK3Y,MAAM,KAAI,GAAjC8Z,EAAIF,EAAA,GAAE5L,EAAQ4L,EAAA,GACrB,GAAY,KAATE,GAA4B,KAAb9L,EAChB,OAAO,CAEX,CAGA8K,EAAW,KACXC,EAAO,KACP,IAAMgB,GAJNnB,EAAW5Y,EAAM0Z,KAAK,MAIMrR,MAnGP,gCAgHrB,GAZG0R,GACDvB,EAAO,GACPO,EAAOgB,EAAW,GAClBjB,EAAWiB,EAAW,IAAM,OAG5BvB,GADAxY,EAAQ4Y,EAAS5Y,MAAM,MACVyZ,QACVzZ,EAAMC,SACP6Y,EAAW9Y,EAAM0Z,KAAK,OAIV,OAAbZ,GAAqBA,EAAS7Y,OAAS,GAExC,GADA4Y,EAAOvQ,SAASwQ,EAAU,KACtB,WAAWtV,KAAKsV,IAAaD,GAAQ,GAAKA,EAAO,MACnD,OAAO,OAEJ,GAAGd,EAAYoB,aACpB,OAAO,EAGT,OAAGpB,EAAYiC,eACNzB,EAAUC,EAAMT,EAAYiC,mBAEjCtW,EAAK8U,IAAUxT,EAAOwT,EAAMT,IAAkBgB,GAAStV,EAAOsV,MAIlEP,EAAOA,GAAQO,IAENhB,EAAYkC,gBAAkB1B,EAAUC,EAAMT,EAAYkC,iBAGrE,WChMe,SAAgBpZ,EAAUqZ,GAUvC,IAAIvY,EAAmBd,GACrB,OAAO,EAGT,IAAMsZ,EAbO,CACX,EAAG,mEACH,EAAG,mEACH,EAAG,mEACH,EAAG,yEACH,EAAG,yEACHC,IAAK,mEAOe,MAAC/X,EAAW,MAAMR,SAASqY,GAAqB,MAAVA,GAC5D,QAASC,GAAWA,EAAQ3W,KAAK3C,EACnC,kCCpBe,SAACA,GAEd,MADiB,MACGA,GAAOgF,EAAShF,EACtC,cvDoDO,SAAmBT,EAAWC,GACnC,IAAMga,EAAWxa,EAAaO,GACxBka,EAAWza,EAAaQ,GACxBC,EAAUE,KAAKC,IAAI,GAAID,KAAKyF,IAAIoU,EAAUC,IAChD,OAAQna,EAAeC,EAAME,GAAWH,EAAeE,EAAMC,IAAYA,CAC3E,iBAqCO,SAAsBF,EAAcC,GACzC,IAAMga,EAAWxa,EAAaO,GACxBka,EAAWza,EAAaQ,GAG9B,OAFiBE,OAAOH,EAAKL,WAAWN,QAAQ,IAAK,KACpCc,OAAOF,EAAKN,WAAWN,QAAQ,IAAK,KACtBe,KAAKC,IAAI,GAAI6Z,EAAWD,EACzD,sCAnCO,SAAwBja,EAAcC,GAE3C,IACMga,EAAWxa,EAAaO,GACxBka,EAAWza,EAAaQ,GACxBC,EAAUE,KAAKC,IAAI,GAAID,KAAKyF,IAAIoU,EAAUC,IAEhD,QAASla,EAAOE,EAAUD,EAAOC,GAAWA,GAASia,QADxCF,GAAYC,EAAYD,EAAWC,EAElD,qBA/DO,SAA0Bxa,EAAUmP,GACzC,IAAI3P,EAASQ,GACX,OAAOA,EAET,IAAIuJ,EAAIzJ,WAAWE,GAEnBuJ,EAAIlJ,EAAekJ,EAAG,KAMtB,IAAI9F,GAJF8F,EADC4F,EACGzO,KAAKyO,KAAK5F,GAAK,IAEf7I,KAAKga,MAAMnR,GAAK,KAEZtJ,WACN0a,EAAKlX,EAAE+B,QAAQ,KAKnB,IAJGmV,EAAK,IACNA,EAAKlX,EAAEtD,OACPsD,GAAK,KAEAA,EAAEtD,QAAUwa,EAAK,GACtBlX,GAAK,IAEP,OAAOA,CACT,uB4BHkC,SAACgN,GACjC,QAAIA,IACJS,OAAOC,aAAayJ,WAAWnK,IACxB,EACT,yBCHoC,SAACA,GACnC,QAAIA,IACJS,OAAOG,eAAeuJ,WAAWnK,IAC1B,EACT,cHhCyB,SAACA,EAAa7B,EAAWiM,GAChD,IAAIpK,IAAS7B,EACX,OAAO,EAEU,WAAhB/O,EAAO+O,KACRA,EAAOG,KAAKE,UAAUL,IAGxB,IAAI7N,EAAM0P,EAAO,IAAM2B,UAAUxD,GAEjC,GAAGiM,EAAW,EAAG,CACf,IAAMha,EAAO,IAAI6J,KACXoQ,EAAgB,KAAXD,EAAkB,IAC7Bha,EAAKka,QAAQla,EAAKma,UAAYF,GAC9B/Z,GAAO,aAAeF,EAAKoa,aAC7B,CAEA,OADArK,SAASC,OAAS9P,GACV,CACV,sC8BpBO,SAAsBma,GAC3BtK,SAASsK,MAAQA,CACnB,oB5BF+B,SAACzK,EAAc7B,GAC5C,QAAI6B,IACe,iBAAT7B,IACRA,EAAOG,KAAKE,UAAUL,IAExBsC,OAAOC,aAAagK,QAAQ1K,EAAM7B,IAC3B,EACT,sBCPiC,SAAC6B,EAAc7B,GAC9C,QAAI6B,IACe,iBAAT7B,IACRA,EAAOG,KAAKE,UAAUL,IAExBsC,OAAOG,eAAe8J,QAAQ1K,EAAM7B,IAC7B,EACT,gB4BNO,SAAqBA,GAC1B,GAA4C,oBAAzCpN,OAAOC,UAAUxB,SAASyB,KAAKkN,GAAlC,CAGA,IAAIL,EAAO/M,OAAO+M,KAAKK,GACnB7N,EAAM,GAUV,OATAwN,EAAKxF,SAAQ,SAAAgH,GACX,IAAM9N,EAAQ2M,EAAKmB,GAChB/N,EAAaC,KACXlB,IACDA,GAAO,KAETA,GAAUgP,GAAAA,OAAAA,EAAO9N,KAAAA,OAAAA,GAErB,IACOmQ,UAAUrR,EAZjB,CAaF,sCCbwB,WACL,IADMwO,EAAEjN,UAAAnC,OAAA,QAAAoC,IAAAD,UAAA,GAAAA,UAAA,GAAG,WAAM,EACjCkN,yDAAQ,IACLC,EAAa,KACjB,OAAO,WAEFA,IACHC,aAAaD,GACbA,EAAQE,YAAW,WACjBJ,GAAMA,IACNE,EAAQ,IACT,GAAED,IAEP,aCjBe,SAAkBzO,GAC/B,MAAkB,iBAARA,GAGFA,EAAIpB,QAAQ,UAAW,KAC5BA,QAAQ,UAAW,KACnBA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KACjBA,QAAQ,UAAW,KACnBA,QAAQ,UAAW,MACnBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,IAIvB,0ECd+B,SAACyb,GAM9B,IAAMC,GADND,EAASA,GAAU,IACG5C,IAChB8C,EAASF,EAAOE,QAAU,OAC1BC,EAASH,EAAOG,QAAU,GAC1BC,EAAO5K,SAAS6K,cAAc,QAEpCD,EAAKE,MAAMC,QAAU,OACrBH,EAAKF,OAASA,EACdE,EAAKH,OAASA,EAGd,IAAA,IAAAO,EAAA,EAAAC,EAAyBra,OAAOsa,QAAQP,GAASK,EAAAC,EAAA1b,OAAAyb,IAAA,CAA5C,IAAAG,EAAAhC,EAAA8B,EAAAD,GAAA,GAAK7L,EAAGgM,EAAA,GAAE9Z,EAAK8Z,EAAA,GACZza,EAA0BsP,SAAS6K,cAAc,SACvDna,EAAM2V,KAAO,SACb3V,EAAMmP,KAAOV,EACbzO,EAAMW,MAAQA,EACduZ,EAAKQ,YAAY1a,EACnB,CAWAsP,SAASqL,KAAKD,YAAYR,GAC1BA,EAAKU,SACLtL,SAASqL,KAAKE,YAAYX,EAC5B"}