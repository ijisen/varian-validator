{"version":3,"file":"validator.js","sources":["../src/validator/http/IP.ts","../src/utils/setErrorCodeLang.ts","../src/utils/filterStringSpace.ts","../src/validator/http/isFQDN.ts","../src/validator/http/isDomain.ts","../src/utils/isNumber.ts","../src/validator/isInRange.ts","../src/validator/http/isPort.ts","../src/validator/rr/isMX.ts","../src/validator/rr/isTXT.ts","../src/validator/rr/isNS.ts","../src/utils/utilStringToArray.ts","../src/validator/rr/isCAA.ts","../src/validator/rr/isSRV.ts","../src/validator/rr/isA.ts","../src/validator/rr/isAAAA.ts","../src/validator/rr/isCNAME.ts","../src/validator/rr/isRdata.ts","../src/validator/rr/isHost.ts","../src/validator/rr/isTTL.ts","../src/validator/rr/isZone.ts","../src/utils/utilTypeOf.ts","../src/utils/isValidParamsTypes.ts","../src/validator/IsBankCard.ts","../src/validator/isBooleanTrue.ts","../src/validator/isByteLength.ts","../src/validator/isCellPhone.ts","../src/validator/isCreditCard.ts","../src/validator/isEmail.ts","../src/validator/isEthereumAddress.ts","../src/validator/isFixedPhone.ts","../src/validator/isInt.ts","../src/validator/isIdentityCard.ts","../src/validator/isIMEI.ts","../src/utils/utilToString.ts","../src/validator/isIn.ts","../src/validator/isPostalCode.ts","../src/validator/isStrongPassword.ts","../src/validator/isTaxpayerNo.ts","../src/validator/isURL.ts","../src/validator/isUUID.ts"],"sourcesContent":["'use strict';\r\n\r\n// IPv4 Segment\r\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\r\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\r\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\r\n\r\n// IPv6 Segment\r\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\r\nconst IPv6Reg = new RegExp('^(' +\r\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\r\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\r\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\r\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\r\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\r\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\r\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\r\n  ')(%[0-9a-zA-Z-.:]{1,})?$');\r\n\r\n/**\r\n * IPV4验证\r\n * */\r\nexport const isIPv4 = (s: string): boolean => {\r\n  return IPv4Reg.test(s);\r\n}\r\n\r\n/**\r\n * IPV6验证\r\n * */\r\nexport const isIPv6 = (s: string): boolean => {\r\n  return IPv6Reg.test(s);\r\n}\r\n/**\r\n * IPV4 & IPV6验证\r\n * */\r\nexport const isIP = (s: string): number => {\r\n  if(isIPv4(s)) return 4;\r\n  if(isIPv6(s)) return 6;\r\n  return 0;\r\n}\r\n\r\n\r\n","/**\r\n * 语言类型\r\n * */\r\nexport const enum EnumLanguageType {\r\n  en = 'en-US',\r\n  zh = 'zh-CN',\r\n}\r\n\r\n/**\r\n * 设置错误消息语言类型\r\n * */\r\nconst setErrorCodeLang = (lang: any = EnumLanguageType.zh) => {\r\n  if (lang === EnumLanguageType.en) {\r\n    return 'en';\r\n  }\r\n  return 'zh';\r\n};\r\n\r\nexport default setErrorCodeLang;\r\n","/**\r\n * @names：普通文本过滤所有的空格\r\n * 部分 ajax 响应数据为字符串，且包含转义字符，无法转成JSON\r\n *\r\n * @params[str] string\r\n * @params[options] {filterAll: boolean, returnType: boolean}\r\n * @return string\r\n * eg: aaa  aa  => aaa aa\r\n * */\r\nconst filterStringSpace = (str: any, options?: {\r\n  filterAll?: boolean;\r\n  returnType?: boolean\r\n}) => {\r\n  if(typeof str !== 'string') {\r\n    // return str;\r\n    return ''\r\n  }\r\n  const reg = /\\\\0|\\\\u0000|\\s+/g\r\n  // return str.replace(/\\s+/g, '');\r\n  if(options?.filterAll) {\r\n    return str.replace(reg, '')\r\n  }\r\n  return str.replace(reg, ' ')\r\n};\r\n\r\nexport default filterStringSpace;\r\n","import setErrorCodeLang from '../../utils/setErrorCodeLang';\r\n\r\nimport { IsFQDNConfig, isFQDNRes } from './typings.d';\r\nimport filterStringSpace from \"@/utils/filterStringSpace\";\r\n\r\n/**\r\n * 域名格式校验 - 错误提示消息.\r\n * */\r\nconst errorCodes = {\r\n  zh: {\r\n    DOMAIN_IS_EMPTY: '校验内容为空',\r\n    DOMAIN_FORMAT_ERROR: '域名格式错误',\r\n    DOMAIN_TOO_SHORT: '域名长度不能小于 1 个字符.',\r\n    DOMAIN_TOO_LONG: '域名长度不能超过 255 个字符.',\r\n    LABEL_STARTS_WITH_DASH: '域名标签不能以 . 开头.',\r\n    LABEL_ENDS_WITH_DASH: '域名标签不能以 . 结尾.',\r\n    LABEL_WITH_HYPHEN: '域名标签不能以 - 开头或结尾.',\r\n    LABEL_TOO_LONG: '域名标签的长度最多为 63 个字符.',\r\n    LABEL_TOO_SHORT: '域名标签应至少为 1 个字符长.',\r\n    LABEL_WITH_UNDERSCORES: '域名标签不能包含 _ ',\r\n    LABEL_ENDS_WITH_UNDERSCORES: '域名标签不能以 _ 结尾.',\r\n    LABEL_INVALID_CHARS:\r\n      '域名标签只能包含a-z、A-Z、0-9、-、_、.、*、@、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD不能包含数字.',\r\n    TLD_INVALID_CHARS: 'TLD格式错误.',\r\n  },\r\n  en: {\r\n    DOMAIN_IS_EMPTY: 'Check content is empty',\r\n    DOMAIN_FORMAT_ERROR: 'Domain name format error',\r\n    DOMAIN_TOO_SHORT: 'Domain name too short.',\r\n    DOMAIN_TOO_LONG:\r\n      'Domain name too long. It should be no more than 255 chars.',\r\n    LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\r\n    LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\r\n    LABEL_WITH_HYPHEN: 'Domain labels cannot start or end with -.',\r\n    LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\r\n    LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\r\n    LABEL_WITH_UNDERSCORES: 'Domain labels cannot contain _',\r\n    LABEL_ENDS_WITH_UNDERSCORES: 'Domain labels can not end with _',\r\n    LABEL_INVALID_CHARS:\r\n      'Domain name label can only contain a-z、A-Z、0-9、-、_、.、*、@、中文汉字.',\r\n    TLD_WITH_NUMBER: 'TLD cannot contain numbers',\r\n    TLD_INVALID_CHARS: 'TLD format error',\r\n  },\r\n};\r\n\r\n/**\r\n * 域名格式校验 - 默认配置参数\r\n *\r\n * */\r\nconst default_fqdn_options = {\r\n  // 是否包含TLD\r\n  require_tld: true,\r\n  // 是否允许包含下划线\r\n  allow_underscores: true,\r\n  // 是否允许 . 号结尾\r\n  allow_trailing_dot: false,\r\n  // 是否允许纯数字TLD\r\n  allow_numeric_tld: false,\r\n  // 是否允许配符 *\r\n  allow_wildcard: false,\r\n};\r\n\r\n/**\r\n * 域名格式校验\r\n * FQDN：(Fully Qualified Domain Name)全限定域名：同时带有主机名和域名的名称。（通过符号“.”）\r\n * 例如：主机名是bigserver,域名是mycompany.com,那么FQDN就是bigserver.mycompany.com。 [1]\r\n * str: m.zdns.cn || zdns.cn. || h.m.zdns.cn.\r\n * */\r\nexport default function isFQDN(\r\n  str: any,\r\n  options: Partial<IsFQDNConfig> = {},\r\n  lang?: string,\r\n): isFQDNRes {\r\n  let errorMessage = errorCodes[setErrorCodeLang(lang)];\r\n  if(typeof str !== 'string') {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n    };\r\n  }\r\n  str = filterStringSpace(str, {\r\n    filterAll: true\r\n  });\r\n  options = {\r\n    ...default_fqdn_options,\r\n    ...options,\r\n  };\r\n  console.log(options);\r\n\r\n  if(!str) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_IS_EMPTY,\r\n    };\r\n  }\r\n\r\n  const len = str.length;\r\n  if(len > 255) {\r\n    return {\r\n      success: false,\r\n      message: errorMessage.DOMAIN_TOO_LONG,\r\n    };\r\n  }\r\n\r\n  /* Remove the optional trailing dot before checking validity */\r\n  if(options.allow_trailing_dot && str[len - 1] === '.') {\r\n    str = str.substring(0, len - 1);\r\n  }\r\n\r\n  /* Remove the optional wildcard before checking validity */\r\n  if(options.allow_wildcard && str.indexOf('*.') === 0) {\r\n    str = str.substring(2);\r\n  }\r\n\r\n  const nodes = str.split('.');\r\n  console.log(nodes);\r\n  const node_len = nodes.length;\r\n  const max_node = 127;\r\n  if(options.require_tld) {\r\n    // disallow fqdns without tld\r\n    if(node_len < 2) {\r\n      // 域名格式错误  zdns.cn\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    if(node_len > max_node) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n\r\n    const tld = nodes[node_len - 1];\r\n    // reject numeric TLDs\r\n    if(!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_WITH_NUMBER,\r\n      };\r\n    }\r\n\r\n    if(\r\n      !/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(\r\n        tld,\r\n      )\r\n    ) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.TLD_INVALID_CHARS,\r\n      };\r\n    }\r\n  } else {\r\n    if(node_len > max_node - 1) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.DOMAIN_FORMAT_ERROR,\r\n      };\r\n    }\r\n  }\r\n  for (let i = 0; i < node_len; i++) {\r\n    const label = nodes[i];\r\n    console.log(label);\r\n    if(label.length > 63) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_TOO_LONG,\r\n      };\r\n    }\r\n    // \\u4E00-\\u9FA5 \\u00a1-\\uffff\r\n    if(!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow full-width chars\r\n    if(/[\\uff01-\\uff5e]/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_INVALID_CHARS,\r\n      };\r\n    }\r\n\r\n    // disallow node starting or ending with hyphen\r\n    if(/^-|-$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_HYPHEN,\r\n      };\r\n    }\r\n\r\n    if(!options.allow_underscores && /_/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n\r\n    // disallow node ending with _\r\n    if(/_$/.test(label)) {\r\n      return {\r\n        success: false,\r\n        message: errorMessage.LABEL_ENDS_WITH_UNDERSCORES,\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    success: true,\r\n    message: '',\r\n  };\r\n}\r\n","import isFQDN from './isFQDN'\r\n\r\n/**\r\n * 域名合法性校验\r\n * */\r\nconst isDomain = (str: string) => {\r\n  return isFQDN(str, {\r\n    require_tld: true,\r\n    // 是否允许包含下划线\r\n    allow_underscores: true,\r\n    // 是否允许 . 号结尾\r\n    allow_trailing_dot: false,\r\n    // 是否允许数字TLD号结尾\r\n    allow_numeric_tld: false,\r\n    // 是否运通配符 *\r\n    allow_wildcard: false\r\n  });\r\n};\r\nexport default isDomain\r\n","/**\r\n * 判断参数是否为数字\r\n *\r\n * @param[number]\r\n * @param[allowNegative] 是否允许为负数\r\n */\r\nexport const isNumber = (number: any, allowNegative = false) => {\r\n  /**\r\n   * isNaN([]) || isNaN('') || isNaN(true) || isNaN(false) || isNaN(null) => false\r\n   * */\r\n  if(typeof number === 'string') {\r\n    number = number.replace(/\\s+/g, '');\r\n  }\r\n  if(\r\n    isNaN(number) ||\r\n    number === '' ||\r\n    typeof number === 'object' ||\r\n    typeof number === 'boolean'\r\n  ) {\r\n    return false;\r\n  } else {\r\n    number = parseFloat(number);\r\n    if(number < 0) {\r\n      return allowNegative;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n","import {isNumber} from \"../utils/isNumber\";\r\n\r\n/**\r\n * 数字取值范围校验\r\n * @param[str] 数值\r\n * @param[min] 最小值\r\n * @param[max] 最大值\r\n * */\r\nconst isInRange = (str: any, min: number, max: number) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  const val = Number(str);\r\n  return val >= min && val <= max;\r\n};\r\n\r\nexport default isInRange\r\n","import isInRange from \"../isInRange\";\r\n\r\n/**\r\n * 端口号校验\r\n * */\r\nconst isPort = (str: any) => {\r\n  return isInRange(str, 1, 65535);\r\n};\r\n\r\nexport default isPort;\r\n","/**\r\n * MX【邮件交换记录 - Mail Exchanger】  => 将域名指向邮件服务器地址\r\n *  使用场景：设置邮箱时，让邮箱能收到邮件，就需要添加 MX 记录。MX全称为mail exchanger，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当有人发邮件给“vincen@example.com”时，系统将对“example.com”进行DNS中的MX记录解析。如果MX记录存在，系统就根据MX记录的优先级，将邮件转发到与该MX相应的邮件服务器上。\r\n *  主机记录：一般是指子域名的前缀，（要做xxx@dns-example.com的邮箱，所以主机记录输入“ @ ”；要做xxx@mail.dns-example.com，如果主机记录填 mail）。\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析，邮件无法收取；\r\n *  记录值：输入内容通过联系邮箱注册商提供。例如阿里云邮提供的需要配置的解析记录值是 mx1.qiye.aliyun.com；\r\n *  MX优先级：输入内容通过联系邮箱注册商提供，MX 优先级的数值越低，优先级别就越高（如下图，邮件会先尝试发送到 MX 优先级为 5 的mx1.qiye.aliyun.com，如果尝试失败，才会发送到 MX 优先级为10 的mx2.qiye.aliyun.com）。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from '../http/isDomain'\r\n\r\nconst isMX = (str: string) => {\r\n  if(!str) {\r\n    return false\r\n  }\r\n\r\n  return isDomain(str)\r\n\r\n};\r\nexport default isMX;\r\n","/**\r\n * TXT  => 文本长度限制512，通常做SPF记录（反垃圾邮件）\r\n *  使用场景：如果希望对域名进行标识和说明，可以使用 TXT 记录， TXT 记录多用来做 SPF 记录（反垃圾邮件）。\r\n *  主机记录：一般是指子域名的前缀（如需为子域名为 www.dns-example.com 添加 TXT 记录， 主机记录输入 www；如需为dns-example.com添加TXT记录，主机记录输入 @）\r\n *  解析线路：默认 为必选项，未设置会导致部分用户无法解析。\r\n *  记录值：常用情况TXT 记录是用来做 SPF 反垃圾邮件的，最典型的 SPF 格式的 TXT 记录例子为“v=spf1 a mx ~all”，表示只有这个域名的 A 记录和 MX 记录中的 IP 地址有权限使用这个域名发送邮件。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\n/**\r\n * TXT记录，一般指某个主机名或域名的标识和说明。如：admin IN TXT \"管理员, 电话：XXXXXXXXXXX\"，mail IN TXT \"邮件主机，存放在xxx , 管理人：AAA\"，Jim IN TXT \"contact: abc@mailserver.com\"，也就是说，通过设置TXT记录内容可以使别人更方便地联系到你。TXT 记录常用的方式还有做 SPF 记录（反垃圾邮件）和SSL证书的DNS验证等。\r\n * */\r\n\r\nconst isTXT = (str: string) => {\r\n  return str.length > 255;\r\n}\r\n\r\nexport default isTXT\r\n","/**\r\n * NS【Name Server - 域名服务器记录】  => 将子域名指定其他DNS服务器解析\r\n *  使用场景：如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。\r\n *  主机记录：一般是指子域名的前缀（如需将子域名为www.dns-example.com 的解析授权给腾讯云解析的DNS服务器进行解析管理，只需要在主机记录处填写 www 即可）。\r\n *  解析线路：默认为必填项，未设置默认线路会导致部分用户无法解析。\r\n *  记录值：记录值为要授权的 DNS 服务器域名，例如腾讯云解析的DNS服务器域名f1g1ns1.dnspod.net。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport isDomain from \"../http/isDomain\";\r\n\r\n\r\nconst isNS = (str: string) => {\r\n  return isDomain(str)\r\n}\r\n\r\nexport default isNS\r\n","/**\r\n * 字符串 转 数组\r\n * String to Array\r\n * */\r\nconst utilStringToArray = (str: any, separator?: string) => {\r\n  if(typeof str === 'string') {\r\n    str = str.trim();\r\n    return str.split(separator || /\\s+/);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport default utilStringToArray;\r\n","/**\r\n * CAA  =>  CA证书颁发机构授权校验\r\n *  使用场景： CAA(Certificate Authority Authorization)，即证书颁发机构授权。是一项新的可以添加到DNS记录中的额外字段,通过DNS机制创建CAA资源记录，可以限定域名颁发的证书和CA（证书颁发机构）之间的联系。未经授权的第三方尝试通过其他CA注册获取用于该域名的SSL/TLS证书将被拒绝。\r\n *  域名设置 CAA 记录，使网站所有者，可授权指定CA机构为自己的域名颁发证书，以防止HTTPS证书错误签发，从而提高网站安全性。\r\n *  CAA记录的格式为： [flag] [tag] [value]，是由一个标志字节的[flag]和一个被称为属性的[tag]-[value]（标签-值）对组成。您可以将多个CAA字段添加到域名的DNS记录中。\r\n * ------> [flag]：无符号整数（目前仅支持0和128），用于标志认证机构。通常情况下填0，表示如果颁发证书机构无法识别本条信息，就忽略。\r\n * ------> [tag]：支持 issue、issuewild 和 iodef。\r\n * --------> issue：CA授权单个证书颁发机构发布的 任何类型 域名证书。\r\n * --------> issuewild：CA授权单个证书颁发机构发布主机名的 通配符 证书。\r\n * --------> iodef：CA可以将违规的颁发记录URL发送给某个电子邮箱。\r\n * ------> [value]： CA的域名或用于违规通知的电子邮箱。\r\n */\r\nimport isInRange from \"../isInRange\";\r\nimport utilStringToArray from \"../../utils/utilStringToArray\";\r\n\r\n// （如：0 iodef \"mailto:admin@dns-example.com\"）\r\n// （如：0 issue \"symantec.com\"）\r\nconst isCAA = (str: any) => {\r\n  const caaValueRegex = /^\"[\\w-:./@]{1,255}\"$/;\r\n  const caaTags = ['issue', 'issuewild', 'iodef'];\r\n  const values = utilStringToArray(str);\r\n  return (\r\n    values.length === 3 &&\r\n    isInRange(values[0], 0, 255) &&\r\n    caaTags.indexOf(values[1]) !== -1 &&\r\n    caaValueRegex.test(values[2])\r\n  );\r\n};\r\nexport default isCAA\r\n","import isDomain from \"../http/isDomain\";\r\nimport isPort from \"../http/isPort\"\r\nimport utilStringToArray from \"../../utils/utilStringToArray\";\r\nimport isInRange from \"../isInRange\";\r\n\r\n\r\n/**\r\n * SRV【服务定位（SRV）资源记录】  => 记录提供特定的服务的服务器\r\n *  使用场景： SRV 记录用来标识某台服务器使用了某个服务，常见于微软系统的目录管理。\r\n *  主机记录： 格式为 服务的名字.协议的类型。\r\n *    例如：_sip._tcp\r\n *  解析线路： 默认 为必选项，未设置默认线路会导致部分用户无法解析\r\n *  记录值： 格式为 【优先级】 【权重】 【端口】 目标地址 ，每项中间需以空格分隔。\r\n *    例如：0 5 5060 sipserver.example.com\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n\r\n * */\r\nconst isSRV = (str: string) => {\r\n  const values = utilStringToArray(str);\r\n  return (\r\n    values.length === 4 &&\r\n    isInRange(values[0], 0, 65535) &&\r\n    isInRange(values[1], 0, 65535) &&\r\n    isPort(values[2]) &&\r\n    isDomain(values[3])\r\n  );\r\n};\r\n\r\nexport default isSRV\r\n","/**\r\n * A记录【Address】 => 将域名指向一个IPV4地址\r\n *  使用场景: 添加 A 记录可实现将域名指向 IP 地址。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）。\r\n *  解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。\r\n *  记录值：记录值为 IP 地址，填写 IPv4 地址。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport { isIPv4 } from \"../http/IP\";\r\n\r\nconst isA = (str: string) => {\r\n  return isIPv4(str);\r\n\r\n};\r\nexport default isA\r\n","/**\r\n * AAAA【AAAA record】  => 将域名指向一个IPV6地址\r\n * 使用场景：当预期是实现访问者通过 IPv6 地址访问网站，可以使用 AAAA 记录实现。\r\n * 主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）\r\n * 解析线路：默认为必选项，未设置会导致部分用户无法访问；\r\n * 记录值：记录值为IP地址，填写 IPV6 地址\r\n * TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\nimport { isIPv6 } from \"../http/IP\";\r\n\r\nconst isAAAA = (str: string) => {\r\n  return isIPv6(str);\r\n\r\n};\r\nexport default isAAAA\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n/**\r\n * CNAME【别名解析 - Canonical Name】  => 将域名指向另外一个域名\r\n *  使用场景: 当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。\r\n *  主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入“ www”；如需实现dns-example.com的解析，主机记录输入“@”）\r\n *  解析线路：默认为必填项，否则会导致部分用户无法解析。\r\n *  记录值：记录值为 CNAME 指向的域名，只可以填写域名。\r\n *  TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *\r\n * */\r\n\r\nconst isCNAME = (str: string) => {\r\n  return isDomain(str)\r\n}\r\n\r\nexport default isCNAME;\r\n","/**\r\n * 域名解析记录公共校验\r\n *\r\n * */\r\n\r\nimport isMX from \"./isMX\";\r\nimport isTXT from \"./isTXT\";\r\nimport isNS from \"./isNS\";\r\nimport isCAA from \"./isCAA\";\r\nimport isSRV from \"./isSRV\";\r\nimport isA from \"@/validator/rr/isA\";\r\nimport isAAAA from \"@/validator/rr/isAAAA\";\r\nimport isCNAME from \"@/validator/rr/isCNAME\";\r\n\r\nexport const enum EnumRecordType {\r\n  A = \"A\",\r\n  AAAA = \"AAAA\",\r\n  NS = \"NS\",\r\n  MX = \"MX\",\r\n  CNAME = \"CNAME\",\r\n  CAA = \"CAA\",\r\n  SRV = \"SRV\",\r\n  TXT = \"TXT\"\r\n}\r\n\r\n/**\r\n * 域名解析记录公共校验\r\n * @param[str] 校验值\r\n * @param[type] 校验类型\r\n * */\r\nexport const isRdata = (str: any, type: EnumRecordType.A) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  switch (type.toUpperCase()) {\r\n    case EnumRecordType.A:\r\n      return isA(str);\r\n    case EnumRecordType.AAAA:\r\n      return isAAAA(str);\r\n    case EnumRecordType.CAA:\r\n      return isCAA(str);\r\n    case EnumRecordType.CNAME:\r\n      return isCNAME(str);\r\n    case EnumRecordType.MX:\r\n      return isMX(str);\r\n    case EnumRecordType.NS:\r\n      return isNS(str);\r\n    case EnumRecordType.SRV:\r\n      return isSRV(str);\r\n    case EnumRecordType.TXT:\r\n      return isTXT(str);\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n","import isFQDN from \"../http/isFQDN\";\r\n\r\n/**\r\n * 主机合法性校验\r\n * */\r\nconst isHost = (str: string) => {\r\n  const specialHosts = '@';\r\n  return (\r\n    str.indexOf(specialHosts) > -1 ||\r\n    isFQDN(str, {\r\n      // 是否包含TLD\r\n      require_tld: true,\r\n      // 是否允许包含下划线\r\n      allow_underscores: true,\r\n      // 是否允许 . 号结尾\r\n      allow_trailing_dot: false,\r\n      // 是否允许数字TLD号结尾\r\n      allow_numeric_tld: false,\r\n      // 是否运通配符 *\r\n      allow_wildcard: false\r\n    })\r\n  );\r\n};\r\n\r\nexport default isHost\r\n","import { isNumber } from \"@/utils/isNumber\";\r\n\r\n/**\r\n * TTL【Time-To-Live】 => 为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。\r\n *  TTL值是指全国各地的localdns服务器中缓存解析结果的时间周期。\r\n *  1 . 当各地的localdns服务器接接收到解析请求查询时，就会向权威DNS（例如云解析DNS）发起解析请求查询，获取到解析结果。\r\n *  2 . localdns会将查询到的解析结果，保存到本地一段时间。保存的这个时间周期，就是根据TTL设置而来的。在保存的这个时间周期内，如果各地localdns再接收到此域名的解析请求查询，是不会再向权威DNS发起请求查询的，而是直接将本地保存的解析结果返回给用户。\r\n *  3 . 当localdns本地缓存的时间到期后，就会清除该解析记录的缓存结果，清除后，如果各地localdns再接收到此域名的解析请求查询，则会重新向权威DNS（例如云解析DNS）发起解析请求查询，获取最新的解析结果。\r\n *\r\n *  */\r\nconst isTTL = (str: string | number, maxTTL: 65535) => {\r\n  if(!isNumber(str)) {\r\n    return false;\r\n  }\r\n\r\n  if(isNumber(str)) {\r\n    let ttl = Number(str);\r\n    return ttl > 0 && ttl <= maxTTL;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default isTTL\r\n","import isDomain from \"../http/isDomain\";\r\n\r\n// is zone\r\nconst isZone = (str: string) => {\r\n  const rootZone = '.';\r\n  return rootZone === str || isDomain(str);\r\n};\r\n\r\nexport default isZone\r\n","/**\r\n * Better way to handle type checking\r\n * null, {}, array and date are objects, which confuses\r\n */\r\n\r\nexport type EnumUtilTypeOf =\r\n  'undefined'\r\n  | 'object'\r\n  | 'array'\r\n  | 'boolean'\r\n  | 'number'\r\n  | 'string'\r\n  | 'function'\r\n  | 'symbol'\r\n  | 'bigint';\r\n\r\nconst utilTypeOf = (input: any): EnumUtilTypeOf => {\r\n  const rawObject = Object.prototype.toString.call(input).toLowerCase();\r\n  const typeOfRegex = /\\[object (.*)]/g;\r\n  // @ts-ignore\r\n  return typeOfRegex.exec(rawObject)[1];\r\n}\r\n\r\nexport default utilTypeOf\r\n\r\n\r\n\r\n\r\n","/**\r\n * 判断函数参数是否为有效数据类型\r\n * @param[str] any 参数\r\n * @param[types] [any] 支持参数类型, 默认支持 ['string', 'number']\r\n * */\r\nimport utilTypeOf, { EnumUtilTypeOf } from \"./utilTypeOf\";\r\n\r\nexport type ValidParamsDefaultTypes = Array<EnumUtilTypeOf>;\r\n\r\nconst isValidParamsTypes = (str: any, types?: ValidParamsDefaultTypes) => {\r\n  let defaultTypes: ValidParamsDefaultTypes = ['string', 'number'];\r\n  if(utilTypeOf(types) !== 'array') {\r\n    types = defaultTypes;\r\n  }\r\n  return (types && types.includes(utilTypeOf(str)));\r\n}\r\n\r\nexport default isValidParamsTypes;\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n\r\n/**\r\n * 银行卡号合法性验证\r\n * @param[str] any 银行卡\r\n * description： 15位或者16位或者19位\r\n * */\r\nconst IsBankCard = (str: any) => {\r\n  // 建行16、19，农行19，工行19、交通17、民生16、兴业18、招行12、16、19\r\n  const reg = /^([1-9]{1})(\\d{11}|\\d{15}|\\d{16}|\\d{17}|\\d{18})$/;\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  return reg.test(str)\r\n}\r\n\r\nexport default IsBankCard\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 布尔值判断\r\n * @param[str]: 布尔值\r\n * @param[extend]: 是否支持拓展\r\n * @param[trueBooleans]: 拓展布尔值\r\n * */\r\nconst isBooleanTrue = (str: any, extend: Boolean, trueBooleans = ['yes', 'true', '1']) => {\r\n  const type_str = typeof str;\r\n  if(type_str === 'boolean') {\r\n    return str\r\n  }\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  if(extend) {\r\n    str = `${str}`.toLowerCase()\r\n    return trueBooleans.includes(str);\r\n  }\r\n}\r\n\r\nexport default isBooleanTrue\r\n","/**\r\n * 子节长度判断\r\n *@param[str] any 字符串\r\n *@param[option] 参数 {min: number, max:number}\r\n * */\r\nexport interface IsByteLengthOptions {\r\n  min?: number;\r\n  max: number;\r\n}\r\n\r\nexport default function isByteLength(str: any, options: IsByteLengthOptions) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  let min;\r\n  let max;\r\n  if(typeof (options) === 'object') {\r\n    min = options.min || 0;\r\n    max = options.max;\r\n  } else {\r\n    // backwards compatibility: isByteLength(str, min [, max])\r\n    min = arguments[1];\r\n    max = arguments[2];\r\n  }\r\n  const len = encodeURI(str).split(/%..|./).length - 1;\r\n  return len >= min && (typeof max === 'undefined' || len <= max);\r\n}\r\n\r\n","/**\r\n *\r\n * 手机格式校验\r\n * @param[str]: 手机号\r\n * */\r\nconst isCellPhone = function (str: any) {\r\n  try {\r\n    const reg = /^[1](([3][0-9])|([4][5-9])|([5][0-3,5-9])|([6][5,6])|([7][0-8])|([8][0-9])|([9][1,8,9]))[0-9]{8}$/;\r\n    return reg.test(str);\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default isCellPhone\r\n","/* eslint-disable max-len */\r\nconst creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;\r\n/* eslint-enable max-len */\r\n\r\n/**\r\n * 信用卡格式验证\r\n * @param[str] 校验字符串\r\n * */\r\nexport default function isCreditCard(str: any) {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += str;\r\n  const sanitized = str.replace(/[- ]+/g, '');\r\n  if(!creditCard.test(sanitized)) {\r\n    return false;\r\n  }\r\n  let sum = 0;\r\n  let digit;\r\n  let tmpNum;\r\n  let shouldDouble;\r\n  for (let i = sanitized.length - 1; i >= 0; i--) {\r\n    digit = sanitized.substring(i, (i + 1));\r\n    tmpNum = parseInt(digit, 10);\r\n    if(shouldDouble) {\r\n      tmpNum *= 2;\r\n      if(tmpNum >= 10) {\r\n        sum += ((tmpNum % 10) + 1);\r\n      } else {\r\n        sum += tmpNum;\r\n      }\r\n    } else {\r\n      sum += tmpNum;\r\n    }\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n  return !!((sum % 10) === 0 ? sanitized : false);\r\n}\r\n","/**\r\n *\r\n * 邮箱格式正则校验\r\n * @param[str] 邮箱\r\n * */\r\nconst isEmail = (str: any) => {\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  // 用户名@主机名”\r\n  const reg = /^(?!.*?[._-]{2})[a-z0-9][a-z0-9._-]{0,62}[a-z0-9]@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]{2,63}$/i;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isEmail\r\n","/**\r\n * 以太坊地址校验\r\n * @param[str] 以太坊地址\r\n * */\r\nconst isEthereumAddress = (str: any) => {\r\n  const ethReg = /^(0x)[0-9a-f]{40}$/i;\r\n  if(typeof str !== \"string\") {\r\n    return false\r\n  }\r\n  str += '';\r\n  return ethReg.test(str);\r\n}\r\nexport default isEthereumAddress\r\n","/**\r\n *\r\n * 固定电话格式校验\r\n * @param[str]: 电话\r\n * eg: (0827-7977654) || (7977654)\r\n * */\r\nconst  isFixedPhone = (str: string) => {\r\n  const reg = /^(\\d{3,4}-|\\s)?\\d{7,14}$/;\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isFixedPhone\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 是否为整数判断\r\n * @param[str] 数值\r\n * @param[options] 参数\r\n *\r\n * */\r\nexport default function isInt(str: any, options?: {\r\n  allow_leading_zeroes?: Boolean,\r\n  min?: number;\r\n  max?: number;\r\n  lt?: number;\r\n  gt?: number;\r\n}) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  const int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\r\n  const intLeadingZeroes = /^[-+]?[0-9]+$/;\r\n\r\n  options = options || {};\r\n\r\n  // Get the regex to use for testing, based on whether\r\n  // leading zeroes are allowed or not.\r\n  let regex = (\r\n    options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ?\r\n      int : intLeadingZeroes\r\n  );\r\n\r\n  // Check min/max/lt/gt\r\n  let minCheckPassed = (!options.hasOwnProperty('min') || (typeof options.min !== 'undefined' && str >= options.min));\r\n  let maxCheckPassed = (!options.hasOwnProperty('max') || (typeof options.max !== 'undefined' && str <= options.max));\r\n  let ltCheckPassed = (!options.hasOwnProperty('lt') || (typeof options.lt !== 'undefined' && str < options.lt));\r\n  let gtCheckPassed = (!options.hasOwnProperty('gt') || (typeof options.gt !== 'undefined' && str > options.gt));\r\n\r\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\r\n}\r\n","import isInt from './isInt';\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 证件号码验证函数\r\n *\r\n * */\r\n\r\nconst identityCardValidators = {\r\n  PL: (str: string) => {\r\n    const weightOfDigits = {\r\n      1: 1,\r\n      2: 3,\r\n      3: 7,\r\n      4: 9,\r\n      5: 1,\r\n      6: 3,\r\n      7: 7,\r\n      8: 9,\r\n      9: 1,\r\n      10: 3,\r\n      11: 0,\r\n    };\r\n\r\n    if(str != null && str.length === 11 && isInt(str, { allow_leading_zeroes: true })) {\r\n      const digits = str.split('').slice(0, -1);\r\n      const sum = digits.reduce((acc, digit, index) =>\r\n        acc + (Number(digit) * weightOfDigits[index + 1]), 0);\r\n\r\n      const modulo = sum % 10;\r\n      const lastDigit = Number(str.charAt(str.length - 1));\r\n\r\n      if((modulo === 0 && lastDigit === 0) || lastDigit === 10 - modulo) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n  ES: (str: string) => {\r\n    const DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;\r\n\r\n    const charsValue = {\r\n      X: 0,\r\n      Y: 1,\r\n      Z: 2,\r\n    };\r\n\r\n    const controlDigits = [\r\n      'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',\r\n      'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    // validate the control digit\r\n    const number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, char => charsValue[char]);\r\n\r\n    // @ts-ignore\r\n    return sanitized.endsWith(controlDigits[number % 23]);\r\n  },\r\n  FI: (str: string) => {\r\n    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated\r\n    if(str.length !== 11) {\r\n      return false;\r\n    }\r\n\r\n    if(!str.match(/^\\d{6}[\\-A\\+]\\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {\r\n      return false;\r\n    }\r\n\r\n    const checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';\r\n\r\n    const idAsNumber = (parseInt(str.slice(0, 6), 10) * 1000) + parseInt(str.slice(7, 10), 10);\r\n    const remainder = idAsNumber % 31;\r\n    const checkDigit = checkDigits[remainder];\r\n\r\n    return checkDigit === str.slice(10, 11);\r\n  },\r\n  IN: (str: string) => {\r\n    const DNI = /^[1-9]\\d{3}\\s?\\d{4}\\s?\\d{4}$/;\r\n\r\n    // multiplication table\r\n    const d = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],\r\n      [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],\r\n      [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],\r\n      [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],\r\n      [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],\r\n      [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],\r\n      [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],\r\n      [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],\r\n      [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],\r\n    ];\r\n\r\n    // permutation table\r\n    const p = [\r\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n      [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],\r\n      [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],\r\n      [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],\r\n      [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],\r\n      [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],\r\n      [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],\r\n      [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],\r\n    ];\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    let c = 0;\r\n    let invertedArray = sanitized.replace(/\\s/g, '').split('').map(Number).reverse();\r\n\r\n    invertedArray.forEach((val, i) => {\r\n      c = d[c][p[(i % 8)][val]];\r\n    });\r\n\r\n    return c === 0;\r\n  },\r\n  IR: (str: string) => {\r\n    if(!str.match(/^\\d{10}$/)) return false;\r\n    str = (`0000${str}`).substr(str.length - 6);\r\n\r\n    if(parseInt(str.substr(3, 6), 10) === 0) return false;\r\n\r\n    const lastNumber = parseInt(str.substr(9, 1), 10);\r\n    let sum = 0;\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      sum += parseInt(str.substr(i, 1), 10) * (10 - i);\r\n    }\r\n\r\n    sum %= 11;\r\n\r\n    return (\r\n      (sum < 2 && lastNumber === sum) || (sum >= 2 && lastNumber === 11 - sum)\r\n    );\r\n  },\r\n  IT: function IT(str: string) {\r\n    if(str.length !== 9) return false;\r\n    if(str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana\r\n    return str.search(/C[A-Z]\\d{5}[A-Z]{2}/is) > -1;\r\n  },\r\n  NO: (str: string) => {\r\n    const sanitized = str.trim();\r\n    if(isNaN(Number(sanitized))) return false;\r\n    if(sanitized.length !== 11) return false;\r\n    if(sanitized === '00000000000') return false;\r\n\r\n    // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer\r\n    const f = sanitized.split('').map(Number);\r\n    let k1 = (11 - (((3 * f[0]) + (7 * f[1]) + (6 * f[2])\r\n      + (1 * f[3]) + (8 * f[4]) + (9 * f[5]) + (4 * f[6])\r\n      + (5 * f[7]) + (2 * f[8])) % 11)) % 11;\r\n    let k2 = (11 - (((5 * f[0]) + (4 * f[1]) + (3 * f[2])\r\n      + (2 * f[3]) + (7 * f[4]) + (6 * f[5]) + (5 * f[6])\r\n      + (4 * f[7]) + (3 * f[8]) + (2 * k1)) % 11)) % 11;\r\n\r\n    if(k1 !== f[9] || k2 !== f[10]) return false;\r\n    return true;\r\n  },\r\n  TH: (str: string) => {\r\n    if(!str.match(/^[1-8]\\d{12}$/)) return false;\r\n\r\n    // validate check digit\r\n    let sum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n      sum += parseInt(str[i], 10) * (13 - i);\r\n    }\r\n    return str[12] === ((11 - (sum % 11)) % 10).toString();\r\n  },\r\n  LK: (str: string) => {\r\n    const old_nic = /^[1-9]\\d{8}[vx]$/i;\r\n    const new_nic = /^[1-9]\\d{11}$/i;\r\n\r\n    if(str.length === 10 && old_nic.test(str)) return true;\r\n    else if(str.length === 12 && new_nic.test(str)) return true;\r\n    return false;\r\n  },\r\n  'he-IL': (str: string) => {\r\n    const DNI = /^\\d{9}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n\r\n    const id = sanitized;\r\n\r\n    let sum = 0,\r\n      incNum;\r\n    for (let i = 0; i < id.length; i++) {\r\n      incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2\r\n      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total\r\n    }\r\n    return sum % 10 === 0;\r\n  },\r\n  'ar-LY': (str: string) => {\r\n    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2\r\n    const NIN = /^(1|2)\\d{11}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!NIN.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'ar-TN': (str: string) => {\r\n    const DNI = /^\\d{8}$/;\r\n\r\n    // sanitize user input\r\n    const sanitized = str.trim();\r\n\r\n    // validate the data structure\r\n    if(!DNI.test(sanitized)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  'zh-CN': (str: string) => {\r\n    const provincesAndCities = [\r\n      '11', // 北京\r\n      '12', // 天津\r\n      '13', // 河北\r\n      '14', // 山西\r\n      '15', // 内蒙古\r\n      '21', // 辽宁\r\n      '22', // 吉林\r\n      '23', // 黑龙江\r\n      '31', // 上海\r\n      '32', // 江苏\r\n      '33', // 浙江\r\n      '34', // 安徽\r\n      '35', // 福建\r\n      '36', // 江西\r\n      '37', // 山东\r\n      '41', // 河南\r\n      '42', // 湖北\r\n      '43', // 湖南\r\n      '44', // 广东\r\n      '45', // 广西\r\n      '46', // 海南\r\n      '50', // 重庆\r\n      '51', // 四川\r\n      '52', // 贵州\r\n      '53', // 云南\r\n      '54', // 西藏\r\n      '61', // 陕西\r\n      '62', // 甘肃\r\n      '63', // 青海\r\n      '64', // 宁夏\r\n      '65', // 新疆\r\n      '71', // 台湾\r\n      '81', // 香港\r\n      '82', // 澳门\r\n      '91', // 国外\r\n    ];\r\n\r\n    const powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];\r\n\r\n    const parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\r\n\r\n    const checkAddressCode = (addressCode: string) => provincesAndCities.includes(addressCode);\r\n\r\n    const checkBirthDayCode = (birDayCode: string) => {\r\n      const yyyy = parseInt(birDayCode.substring(0, 4), 10);\r\n      const mm = parseInt(birDayCode.substring(4, 6), 10);\r\n      const dd = parseInt(birDayCode.substring(6), 10);\r\n      const xdata = new Date(yyyy, mm - 1, dd);\r\n      if(xdata > new Date()) {\r\n        return false;\r\n        // eslint-disable-next-line max-len\r\n      } else if((xdata.getFullYear() === yyyy) && (xdata.getMonth() === mm - 1) && (xdata.getDate() === dd)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    const getParityBit = (idCardNo: string) => {\r\n      let id17 = idCardNo.substring(0, 17);\r\n\r\n      let power = 0;\r\n      for (let i = 0; i < 17; i++) {\r\n        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);\r\n      }\r\n\r\n      let mod = power % 11;\r\n      return parityBit[mod];\r\n    };\r\n\r\n    const checkParityBit = (idCardNo: string) => getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();\r\n\r\n\r\n    const check15IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = `19${idCardNo.substring(6, 12)}`;\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return true;\r\n    };\r\n\r\n    const check18IdCardNo = (idCardNo: string) => {\r\n      let check = /^[1-9]\\d{5}[1-9]\\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}(\\d|x|X)$/.test(idCardNo);\r\n      if(!check) return false;\r\n      let addressCode = idCardNo.substring(0, 2);\r\n      check = checkAddressCode(addressCode);\r\n      if(!check) return false;\r\n      let birDayCode = idCardNo.substring(6, 14);\r\n      check = checkBirthDayCode(birDayCode);\r\n      if(!check) return false;\r\n      return checkParityBit(idCardNo);\r\n    };\r\n\r\n    const checkIdCardNo = (idCardNo: string) => {\r\n      let check = /^\\d{15}|(\\d{17}(\\d|x|X))$/.test(idCardNo);\r\n      if(!check) return false;\r\n      if(idCardNo.length === 15) {\r\n        return check15IdCardNo(idCardNo);\r\n      }\r\n      return check18IdCardNo(idCardNo);\r\n    };\r\n    return checkIdCardNo(str);\r\n  },\r\n  'zh-TW': (str: string) => {\r\n    const ALPHABET_CODES = {\r\n      A: 10,\r\n      B: 11,\r\n      C: 12,\r\n      D: 13,\r\n      E: 14,\r\n      F: 15,\r\n      G: 16,\r\n      H: 17,\r\n      I: 34,\r\n      J: 18,\r\n      K: 19,\r\n      L: 20,\r\n      M: 21,\r\n      N: 22,\r\n      O: 35,\r\n      P: 23,\r\n      Q: 24,\r\n      R: 25,\r\n      S: 26,\r\n      T: 27,\r\n      U: 28,\r\n      V: 29,\r\n      W: 32,\r\n      X: 30,\r\n      Y: 31,\r\n      Z: 33,\r\n    };\r\n\r\n    const sanitized = str.trim().toUpperCase();\r\n\r\n    if(!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;\r\n\r\n    // @ts-ignore\r\n    return Array.from(sanitized).reduce((sum, number, index) => {\r\n      if(index === 0) {\r\n        const code = ALPHABET_CODES[number];\r\n\r\n        return ((code % 10) * 9) + Math.floor(code / 10);\r\n      }\r\n\r\n      if(index === 9) {\r\n        return ((10 - (sum % 10)) - Number(number)) % 10 === 0;\r\n      }\r\n\r\n      return sum + (Number(number) * (9 - index));\r\n    }, 0);\r\n  },\r\n};\r\n\r\n/*\r\n// 身份证\r\nexport function validateIDCard(str) {\r\n  const reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n  return reg.test(str)\r\n}\r\n*/\r\n\r\n/**\r\n * isIdentityCard\r\n * @param[str] any 证件号码\r\n * @param[locale] string 证件类型\r\n * */\r\nexport default function isIdentityCard(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false;\r\n  }\r\n  str = `${str}`;\r\n  if(locale in identityCardValidators) {\r\n    return identityCardValidators[locale](str);\r\n  } else if(locale === 'any') {\r\n    for (const key in identityCardValidators) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      if(identityCardValidators.hasOwnProperty(key)) {\r\n        const validator = identityCardValidators[key];\r\n        if(validator(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n\r\n/**\r\n * IMEI校验\r\n * @param[str] imei\r\n * @param[allow_hyphens] boolean 允许连字符\r\n * */\r\nexport default function isIMEI(str: any, allow_hyphens = false) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  str = `${str}`;\r\n\r\n  let imeiRegexWithoutHypens = /^[0-9]{15}$/;\r\n  let imeiRegexWithHypens = /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/;\r\n  // default regex for checking imei is the one without hyphens\r\n\r\n  let imeiRegex = imeiRegexWithoutHypens;\r\n\r\n  if(allow_hyphens) {\r\n    imeiRegex = imeiRegexWithHypens;\r\n  }\r\n\r\n\r\n  if(!imeiRegex.test(str)) {\r\n    return false;\r\n  }\r\n\r\n  str = str.replace(/-/g, '');\r\n\r\n  let sum = 0,\r\n    mul = 2,\r\n    l = 14;\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    const digit = str.substring(l - i - 1, l - i);\r\n    const tp = parseInt(digit, 10) * mul;\r\n    if(tp >= 10) {\r\n      sum += (tp % 10) + 1;\r\n    } else {\r\n      sum += tp;\r\n    }\r\n    if(mul === 1) {\r\n      mul += 1;\r\n    } else {\r\n      mul -= 1;\r\n    }\r\n  }\r\n  const chk = ((10 - (sum % 10)) % 10);\r\n  return chk === parseInt(str.substring(14, 15), 10);\r\n\r\n}\r\n","/**\r\n * 字符串格式判断\r\n * */\r\nconst utilToString = (input: any) => {\r\n  if(typeof input === 'object' && input !== null) {\r\n    if(typeof input.toString === 'function') {\r\n      input = input.toString();\r\n    } else {\r\n      input = '[object Object]';\r\n    }\r\n  } else if(input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {\r\n    input = '';\r\n  }\r\n  return String(input);\r\n}\r\n\r\nexport default utilToString\r\n","import utilToString from '../utils/utilToString';\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\nimport utilTypeOf from \"../utils/utilTypeOf\";\r\n\r\n/**\r\n * 是否包含数据判断\r\n * @param[str] 要判断的数据\r\n * @param[options] 匹配的数据\r\n * */\r\nexport default function isIn(str: any, options: any) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  let i;\r\n  let options_type = utilTypeOf(options)\r\n  if(options_type === 'array') {\r\n    const array: any[] = [];\r\n    for (i in options) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if({}.hasOwnProperty.call(options, i)) {\r\n        array[i] = utilToString(options[i]);\r\n      }\r\n    }\r\n    return array.indexOf(str) >= 0;\r\n  } else if(options_type === 'object') {\r\n    return options.hasOwnProperty(str);\r\n  } else if(options_type === 'function') {\r\n    return options.indexOf(str) >= 0;\r\n  }\r\n  return false;\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 邮编格式验证\r\n * @param[str] 邮编\r\n * @param[locale] 邮编所属地\r\n * */\r\nexport default function isPostalCode(str: any, locale: string) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n\r\n  // common patterns\r\n  const threeDigit = /^\\d{3}$/;\r\n  const fourDigit = /^\\d{4}$/;\r\n  const fiveDigit = /^\\d{5}$/;\r\n  const sixDigit = /^\\d{6}$/;\r\n\r\n  const patterns = {\r\n    AD: /^AD\\d{3}$/,\r\n    AT: fourDigit,\r\n    AU: fourDigit,\r\n    AZ: /^AZ\\d{4}$/,\r\n    BE: fourDigit,\r\n    BG: fourDigit,\r\n    BR: /^\\d{5}-\\d{3}$/,\r\n    BY: /2[1-4]{1}\\d{4}$/,\r\n    CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\r\n    CH: fourDigit,\r\n    CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\r\n    CZ: /^\\d{3}\\s?\\d{2}$/,\r\n    DE: fiveDigit,\r\n    DK: fourDigit,\r\n    DO: fiveDigit,\r\n    DZ: fiveDigit,\r\n    EE: fiveDigit,\r\n    ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\r\n    FI: fiveDigit,\r\n    FR: /^\\d{2}\\s?\\d{3}$/,\r\n    GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\r\n    GR: /^\\d{3}\\s?\\d{2}$/,\r\n    HR: /^([1-5]\\d{4}$)/,\r\n    HT: /^HT\\d{4}$/,\r\n    HU: fourDigit,\r\n    ID: fiveDigit,\r\n    IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\r\n    IL: /^(\\d{5}|\\d{7})$/,\r\n    IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\r\n    IR: /\\b(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}\\b/,\r\n    IS: threeDigit,\r\n    IT: fiveDigit,\r\n    JP: /^\\d{3}\\-\\d{4}$/,\r\n    KE: fiveDigit,\r\n    KR: /^(\\d{5}|\\d{6})$/,\r\n    LI: /^(948[5-9]|949[0-7])$/,\r\n    LT: /^LT\\-\\d{5}$/,\r\n    LU: fourDigit,\r\n    LV: /^LV\\-\\d{4}$/,\r\n    LK: fiveDigit,\r\n    MX: fiveDigit,\r\n    MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\r\n    MY: fiveDigit,\r\n    NL: /^\\d{4}\\s?[a-z]{2}$/i,\r\n    NO: fourDigit,\r\n    NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\r\n    NZ: fourDigit,\r\n    PL: /^\\d{2}\\-\\d{3}$/,\r\n    PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\r\n    PT: /^\\d{4}\\-\\d{3}?$/,\r\n    RO: sixDigit,\r\n    RU: sixDigit,\r\n    SA: fiveDigit,\r\n    SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\r\n    SG: sixDigit,\r\n    SI: fourDigit,\r\n    SK: /^\\d{3}\\s?\\d{2}$/,\r\n    TH: fiveDigit,\r\n    TN: fourDigit,\r\n    TW: /^\\d{3}(\\d{2})?$/,\r\n    UA: fiveDigit,\r\n    US: /^\\d{5}(-\\d{4})?$/,\r\n    ZA: fourDigit,\r\n    ZM: fiveDigit,\r\n  };\r\n  if(locale in patterns) {\r\n    return patterns[locale].test(str);\r\n  } else if(locale === 'any') {\r\n    for (const key in patterns) {\r\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\r\n      // istanbul ignore else\r\n      if(patterns.hasOwnProperty(key)) {\r\n        const pattern = patterns[key];\r\n        if(pattern.test(str)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  throw new Error(`Invalid locale '${locale}'`);\r\n}\r\n","/**\r\n * 密码强度验证\r\n *\r\n * */\r\nimport isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\nconst upperCaseRegex = /^[A-Z]$/;\r\nconst lowerCaseRegex = /^[a-z]$/;\r\nconst numberRegex = /^[0-9]$/;\r\nconst symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\r\n\r\nexport interface IsStrongPasswordOptions {\r\n  minLength: number;\r\n  minLowercase: number;\r\n  minUppercase: number;\r\n  minNumbers: number;\r\n  minSymbols: number;\r\n  returnScore: boolean;\r\n  pointsPerUnique: number;\r\n  pointsPerRepeat: number;\r\n  pointsForContainingLower: number;\r\n  pointsForContainingUpper: number;\r\n  pointsForContainingNumber: number;\r\n  pointsForContainingSymbol: number;\r\n}\r\n\r\nconst defaultOptions: IsStrongPasswordOptions = {\r\n  // 最小长度\r\n  minLength: 8,\r\n  // 最少小写字母个数\r\n  minLowercase: 1,\r\n  // 最少大写字母个数\r\n  minUppercase: 1,\r\n  // 最少数字个数\r\n  minNumbers: 1,\r\n  // 最少特殊符号个数\r\n  minSymbols: 1,\r\n  // 返回密码强度评分\r\n  returnScore: false,\r\n  pointsPerUnique: 1,\r\n  pointsPerRepeat: 0.5,\r\n  pointsForContainingLower: 10,\r\n  pointsForContainingUpper: 10,\r\n  pointsForContainingNumber: 10,\r\n  pointsForContainingSymbol: 10,\r\n};\r\n\r\n/* Counts number of occurrences of each char in a string\r\n * could be moved to util/ ?\r\n*/\r\nfunction countChars(str: string) {\r\n  let result = {};\r\n  Array.from(str).forEach((char) => {\r\n    let curVal = result[char];\r\n    if(curVal) {\r\n      result[char] += 1;\r\n    } else {\r\n      result[char] = 1;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\n/* Return information about a password */\r\nexport interface IAnalysisType {\r\n  length: number;\r\n  uniqueChars: number;\r\n  uppercaseCount: number;\r\n  lowercaseCount: number;\r\n  numberCount: number;\r\n  symbolCount: number;\r\n}\r\n\r\nfunction analyzePassword(password: string) {\r\n  let charMap = countChars(password);\r\n  let analysis: IAnalysisType = {\r\n    length: password.length,\r\n    uniqueChars: Object.keys(charMap).length,\r\n    uppercaseCount: 0,\r\n    lowercaseCount: 0,\r\n    numberCount: 0,\r\n    symbolCount: 0,\r\n  };\r\n  Object.keys(charMap).forEach((char) => {\r\n    /* istanbul ignore else */\r\n    if(upperCaseRegex.test(char)) {\r\n      analysis.uppercaseCount += charMap[char];\r\n    } else if(lowerCaseRegex.test(char)) {\r\n      analysis.lowercaseCount += charMap[char];\r\n    } else if(numberRegex.test(char)) {\r\n      analysis.numberCount += charMap[char];\r\n    } else if(symbolRegex.test(char)) {\r\n      analysis.symbolCount += charMap[char];\r\n    }\r\n  });\r\n  return analysis;\r\n}\r\n\r\nfunction scorePassword(analysis: IAnalysisType, scoringOptions: IsStrongPasswordOptions) {\r\n  let points = 0;\r\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\r\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\r\n  if(analysis.lowercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingLower;\r\n  }\r\n  if(analysis.uppercaseCount > 0) {\r\n    points += scoringOptions.pointsForContainingUpper;\r\n  }\r\n  if(analysis.numberCount > 0) {\r\n    points += scoringOptions.pointsForContainingNumber;\r\n  }\r\n  if(analysis.symbolCount > 0) {\r\n    points += scoringOptions.pointsForContainingSymbol;\r\n  }\r\n  return points;\r\n}\r\n\r\n/**\r\n * 密码强度验证\r\n *\r\n * @param[str]  密码\r\n * @param[options]  验证参数\r\n * */\r\nexport default function isStrongPassword(str: any, options?: Partial<IsStrongPasswordOptions>) {\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const analysis = analyzePassword(str);\r\n  const new_options: IsStrongPasswordOptions = {\r\n    ...defaultOptions,\r\n    ...options\r\n  };\r\n  if(new_options.returnScore) {\r\n    return scorePassword(analysis, new_options);\r\n  }\r\n  return analysis.length >= new_options.minLength\r\n    && analysis.lowercaseCount >= new_options.minLowercase\r\n    && analysis.uppercaseCount >= new_options.minUppercase\r\n    && analysis.numberCount >= new_options.minNumbers\r\n    && analysis.symbolCount >= new_options.minSymbols;\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * 纳税人识别码 合法性验证\r\n * @param[str] any 识别码\r\n * */\r\nconst isTaxpayerNo = (str: any) => {\r\n  const reg = /^[0-9A-Z]{15,18}$/i;\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  return reg.test(str)\r\n}\r\n\r\nexport default isTaxpayerNo\r\n","/**\r\n * URL 正在校验\r\n *\r\n * */\r\nimport isFQDN from './http/isFQDN';\r\nimport { isIP, isIPv6 } from './http/IP';\r\n\r\n/*\r\noptions for isURL method\r\n\r\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\r\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\r\nprotocols - valid protocols can be modified with this option\r\nrequire_host - if set as false isURL will not check if host is present in the URL\r\nrequire_port - if set as true isURL will check if port is present in the URL\r\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\r\nvalidate_length - if set as false isURL will skip string length validation (IE maximum is 2083)\r\n\r\n*/\r\n\r\n\r\nexport type TProtocols = Array<'http' | 'https' | 'ftp'>;\r\nexport type TCheckHostMatches = Array<string | RegExp>;\r\n\r\nexport interface IIsURLDefaultUrlOptions {\r\n  protocols: TProtocols;\r\n  require_tld: boolean;\r\n  require_protocol: boolean;\r\n  require_host: boolean;\r\n  require_port: boolean;\r\n  require_valid_protocol: boolean;\r\n  allow_underscores: boolean;\r\n  allow_trailing_dot: boolean;\r\n  allow_protocol_relative_urls: boolean;\r\n  allow_fragments: boolean;\r\n  allow_query_components: boolean;\r\n  validate_length: boolean;\r\n  disallow_auth?: boolean;\r\n  host_whitelist?: TCheckHostMatches;\r\n  host_blacklist?: TCheckHostMatches;\r\n}\r\n\r\n\r\n/**\r\n * URL合法性校验\r\n * @param[url]  url\r\n * @param[options] 校验参数\r\n * */\r\nexport default function isURL(url: any, options: Partial<IIsURLDefaultUrlOptions>) {\r\n\r\n\r\n  const default_url_options: IIsURLDefaultUrlOptions = {\r\n    protocols: ['http', 'https', 'ftp'],\r\n    require_tld: true,\r\n    require_protocol: false,\r\n    require_host: true,\r\n    require_port: false,\r\n    require_valid_protocol: true,\r\n    allow_underscores: false,\r\n    allow_trailing_dot: false,\r\n    allow_protocol_relative_urls: false,\r\n    allow_fragments: true,\r\n    allow_query_components: true,\r\n    validate_length: true,\r\n  };\r\n\r\n  const wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\r\n\r\n  function isRegExp(obj: RegExp | string) {\r\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\r\n  }\r\n\r\n  function checkHost(host: string, matches: TCheckHostMatches) {\r\n    for (let i = 0; i < matches.length; i++) {\r\n      let match = matches[i];\r\n      // @ts-ignore\r\n      if(host === match || (isRegExp(match) && match.test(host))) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  if(typeof url !== \"string\") {\r\n    return false\r\n  }\r\n  if(!url || /[\\s<>]/.test(url)) {\r\n    return false;\r\n  }\r\n  if(url.indexOf('mailto:') === 0) {\r\n    return false;\r\n  }\r\n  const new_options = {\r\n    ...options,\r\n    ...default_url_options\r\n  };\r\n\r\n  if(options.validate_length && url.length >= 2083) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_fragments && url.includes('#')) {\r\n    return false;\r\n  }\r\n\r\n  if(!options.allow_query_components && (url.includes('?') || url.includes('&'))) {\r\n    return false;\r\n  }\r\n\r\n  let protocol, auth, host, hostname, port, port_str, split, ipv6;\r\n\r\n  split = url.split('#');\r\n  url = split.shift();\r\n\r\n  split = url.split('?');\r\n  url = split.shift();\r\n\r\n  split = url.split('://');\r\n  if(split.length > 1) {\r\n    protocol = split.shift().toLowerCase();\r\n    if(new_options.require_valid_protocol && new_options.protocols.indexOf(protocol) === -1) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_protocol) {\r\n    return false;\r\n  } else if(url.substr(0, 2) === '//') {\r\n    if(!new_options.allow_protocol_relative_urls) {\r\n      return false;\r\n    }\r\n    split[0] = url.substr(2);\r\n  }\r\n  url = split.join('://');\r\n\r\n  if(url === '') {\r\n    return false;\r\n  }\r\n\r\n  split = url.split('/');\r\n  url = split.shift();\r\n\r\n  if(url === '' && !new_options.require_host) {\r\n    return true;\r\n  }\r\n\r\n  split = url.split('@');\r\n  if(split.length > 1) {\r\n    if(new_options.disallow_auth) {\r\n      return false;\r\n    }\r\n    if(split[0] === '') {\r\n      return false;\r\n    }\r\n    auth = split.shift();\r\n    if(auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\r\n      return false;\r\n    }\r\n    const [user, password] = auth.split(':');\r\n    if(user === '' && password === '') {\r\n      return false;\r\n    }\r\n  }\r\n  hostname = split.join('@');\r\n\r\n  port_str = null;\r\n  ipv6 = null;\r\n  const ipv6_match = hostname.match(wrapped_ipv6);\r\n  if(ipv6_match) {\r\n    host = '';\r\n    ipv6 = ipv6_match[1];\r\n    port_str = ipv6_match[2] || null;\r\n  } else {\r\n    split = hostname.split(':');\r\n    host = split.shift();\r\n    if(split.length) {\r\n      port_str = split.join(':');\r\n    }\r\n  }\r\n\r\n  if(port_str !== null && port_str.length > 0) {\r\n    port = parseInt(port_str, 10);\r\n    if(!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\r\n      return false;\r\n    }\r\n  } else if(new_options.require_port) {\r\n    return false;\r\n  }\r\n\r\n  if(new_options.host_whitelist) {\r\n    return checkHost(host, new_options.host_whitelist);\r\n  }\r\n  if(!isIP(host) && !isFQDN(host, new_options) && (!ipv6 || !isIPv6(ipv6))) {\r\n    return false;\r\n  }\r\n\r\n  host = host || ipv6;\r\n\r\n  return !(new_options.host_blacklist && checkHost(host, new_options.host_blacklist));\r\n\r\n\r\n}\r\n","import isValidParamsTypes from \"../utils/isValidParamsTypes\";\r\n\r\n/**\r\n * uuid 合法性校验\r\n * @param[str]  url\r\n * @param[version] uuid版本\r\n * */\r\nexport default function isUUID(str: any, version: any) {\r\n  const uuid = {\r\n    1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n  };\r\n\r\n  if(!isValidParamsTypes(str)) {\r\n    return false\r\n  }\r\n  const pattern = uuid[![undefined, null].includes(version) ? version : 'all'];\r\n  return !!pattern && pattern.test(str);\r\n}\r\n"],"names":["v4Seg","v4Str","IPv4Reg","RegExp","v6Seg","IPv6Reg","isIPv4","s","test","isIPv6","isIP","EnumLanguageType","setErrorCodeLang","lang","zh","en","filterStringSpace","str","options","reg","filterAll","replace","errorCodes","DOMAIN_IS_EMPTY","DOMAIN_FORMAT_ERROR","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_WITH_HYPHEN","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_WITH_UNDERSCORES","LABEL_ENDS_WITH_UNDERSCORES","LABEL_INVALID_CHARS","TLD_WITH_NUMBER","TLD_INVALID_CHARS","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","isFQDN","errorMessage","success","message","console","log","len","length","substring","indexOf","nodes","split","node_len","max_node","tld","i","label","isDomain","isNumber","number","allowNegative","isNaN","parseFloat","isInRange","min","max","val","Number","isPort","isMX","isTXT","isNS","utilStringToArray","separator","trim","isCAA","caaValueRegex","caaTags","values","isSRV","isA","isAAAA","isCNAME","EnumRecordType","isRdata","type","toUpperCase","A","AAAA","CAA","CNAME","MX","NS","SRV","TXT","isHost","specialHosts","isTTL","maxTTL","ttl","isZone","rootZone","utilTypeOf","input","rawObject","Object","prototype","toString","call","toLowerCase","typeOfRegex","exec","isValidParamsTypes","types","defaultTypes","includes","IsBankCard","isBooleanTrue","extend","trueBooleans","type_str","isByteLength","arguments","encodeURI","isCellPhone","err","creditCard","isCreditCard","sanitized","sum","digit","tmpNum","shouldDouble","parseInt","isEmail","isEthereumAddress","ethReg","isFixedPhone","isInt","int","intLeadingZeroes","regex","hasOwnProperty","allow_leading_zeroes","minCheckPassed","maxCheckPassed","ltCheckPassed","lt","gtCheckPassed","gt","identityCardValidators","PL","weightOfDigits","digits","slice","reduce","acc","index","modulo","lastDigit","charAt","ES","DNI","charsValue","X","Y","Z","controlDigits","char","endsWith","FI","match","checkDigits","idAsNumber","remainder","checkDigit","IN","d","p","c","invertedArray","map","reverse","forEach","IR","substr","lastNumber","IT","search","NO","f","k1","k2","TH","LK","old_nic","new_nic","id","incNum","NIN","provincesAndCities","powers","parityBit","checkAddressCode","addressCode","checkBirthDayCode","birDayCode","yyyy","mm","dd","xdata","Date","getFullYear","getMonth","getDate","getParityBit","idCardNo","id17","power","mod","checkParityBit","check15IdCardNo","check","check18IdCardNo","checkIdCardNo","ALPHABET_CODES","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","Array","from","code","Math","floor","isIdentityCard","locale","key","validator","Error","isIMEI","allow_hyphens","imeiRegexWithoutHypens","imeiRegexWithHypens","imeiRegex","mul","l","tp","chk","utilToString","String","isIn","options_type","array","isPostalCode","threeDigit","fourDigit","fiveDigit","sixDigit","patterns","AD","AT","AU","AZ","BE","BG","BR","BY","CA","CH","CN","CZ","DE","DK","DO","DZ","EE","FR","GB","GR","HR","HT","HU","ID","IE","IL","IS","JP","KE","KR","LI","LT","LU","LV","MT","MY","NL","NP","NZ","PR","PT","RO","RU","SA","SE","SG","SI","SK","TN","TW","UA","US","ZA","ZM","pattern","upperCaseRegex","lowerCaseRegex","numberRegex","symbolRegex","defaultOptions","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","countChars","result","curVal","analyzePassword","password","charMap","analysis","uniqueChars","keys","uppercaseCount","lowercaseCount","numberCount","symbolCount","scorePassword","scoringOptions","points","isStrongPassword","new_options","isTaxpayerNo","isURL","url","default_url_options","protocols","require_protocol","require_host","require_port","require_valid_protocol","allow_protocol_relative_urls","allow_fragments","allow_query_components","validate_length","wrapped_ipv6","isRegExp","obj","checkHost","host","matches","protocol","auth","hostname","port","port_str","ipv6","shift","join","disallow_auth","user","ipv6_match","host_whitelist","host_blacklist","isUUID","version","uuid","all","undefined"],"mappings":"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"}